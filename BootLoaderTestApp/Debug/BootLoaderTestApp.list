
BootLoaderTestApp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08020000  08020000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000272c  080201d0  080201d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  080228fc  080228fc  000128fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080229d0  080229d0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080229d0  080229d0  000129d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080229d8  080229d8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080229d8  080229d8  000129d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080229dc  080229dc  000129dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080229e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  20000070  08022a50  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  08022a50  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ff6b  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002524  00000000  00000000  0003000b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000718  00000000  00000000  00032530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008f8  00000000  00000000  00032c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002250f  00000000  00000000  00033540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000de61  00000000  00000000  00055a4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9f45  00000000  00000000  000638b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012d7f5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000019fc  00000000  00000000  0012d848  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000071f4  00000000  00000000  0012f244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080201d0 <__do_global_dtors_aux>:
 80201d0:	b510      	push	{r4, lr}
 80201d2:	4c05      	ldr	r4, [pc, #20]	; (80201e8 <__do_global_dtors_aux+0x18>)
 80201d4:	7823      	ldrb	r3, [r4, #0]
 80201d6:	b933      	cbnz	r3, 80201e6 <__do_global_dtors_aux+0x16>
 80201d8:	4b04      	ldr	r3, [pc, #16]	; (80201ec <__do_global_dtors_aux+0x1c>)
 80201da:	b113      	cbz	r3, 80201e2 <__do_global_dtors_aux+0x12>
 80201dc:	4804      	ldr	r0, [pc, #16]	; (80201f0 <__do_global_dtors_aux+0x20>)
 80201de:	f3af 8000 	nop.w
 80201e2:	2301      	movs	r3, #1
 80201e4:	7023      	strb	r3, [r4, #0]
 80201e6:	bd10      	pop	{r4, pc}
 80201e8:	20000070 	.word	0x20000070
 80201ec:	00000000 	.word	0x00000000
 80201f0:	080228e4 	.word	0x080228e4

080201f4 <frame_dummy>:
 80201f4:	b508      	push	{r3, lr}
 80201f6:	4b03      	ldr	r3, [pc, #12]	; (8020204 <frame_dummy+0x10>)
 80201f8:	b11b      	cbz	r3, 8020202 <frame_dummy+0xe>
 80201fa:	4903      	ldr	r1, [pc, #12]	; (8020208 <frame_dummy+0x14>)
 80201fc:	4803      	ldr	r0, [pc, #12]	; (802020c <frame_dummy+0x18>)
 80201fe:	f3af 8000 	nop.w
 8020202:	bd08      	pop	{r3, pc}
 8020204:	00000000 	.word	0x00000000
 8020208:	20000074 	.word	0x20000074
 802020c:	080228e4 	.word	0x080228e4

08020210 <memchr>:
 8020210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8020214:	2a10      	cmp	r2, #16
 8020216:	db2b      	blt.n	8020270 <memchr+0x60>
 8020218:	f010 0f07 	tst.w	r0, #7
 802021c:	d008      	beq.n	8020230 <memchr+0x20>
 802021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020222:	3a01      	subs	r2, #1
 8020224:	428b      	cmp	r3, r1
 8020226:	d02d      	beq.n	8020284 <memchr+0x74>
 8020228:	f010 0f07 	tst.w	r0, #7
 802022c:	b342      	cbz	r2, 8020280 <memchr+0x70>
 802022e:	d1f6      	bne.n	802021e <memchr+0xe>
 8020230:	b4f0      	push	{r4, r5, r6, r7}
 8020232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8020236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 802023a:	f022 0407 	bic.w	r4, r2, #7
 802023e:	f07f 0700 	mvns.w	r7, #0
 8020242:	2300      	movs	r3, #0
 8020244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8020248:	3c08      	subs	r4, #8
 802024a:	ea85 0501 	eor.w	r5, r5, r1
 802024e:	ea86 0601 	eor.w	r6, r6, r1
 8020252:	fa85 f547 	uadd8	r5, r5, r7
 8020256:	faa3 f587 	sel	r5, r3, r7
 802025a:	fa86 f647 	uadd8	r6, r6, r7
 802025e:	faa5 f687 	sel	r6, r5, r7
 8020262:	b98e      	cbnz	r6, 8020288 <memchr+0x78>
 8020264:	d1ee      	bne.n	8020244 <memchr+0x34>
 8020266:	bcf0      	pop	{r4, r5, r6, r7}
 8020268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 802026c:	f002 0207 	and.w	r2, r2, #7
 8020270:	b132      	cbz	r2, 8020280 <memchr+0x70>
 8020272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020276:	3a01      	subs	r2, #1
 8020278:	ea83 0301 	eor.w	r3, r3, r1
 802027c:	b113      	cbz	r3, 8020284 <memchr+0x74>
 802027e:	d1f8      	bne.n	8020272 <memchr+0x62>
 8020280:	2000      	movs	r0, #0
 8020282:	4770      	bx	lr
 8020284:	3801      	subs	r0, #1
 8020286:	4770      	bx	lr
 8020288:	2d00      	cmp	r5, #0
 802028a:	bf06      	itte	eq
 802028c:	4635      	moveq	r5, r6
 802028e:	3803      	subeq	r0, #3
 8020290:	3807      	subne	r0, #7
 8020292:	f015 0f01 	tst.w	r5, #1
 8020296:	d107      	bne.n	80202a8 <memchr+0x98>
 8020298:	3001      	adds	r0, #1
 802029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 802029e:	bf02      	ittt	eq
 80202a0:	3001      	addeq	r0, #1
 80202a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80202a6:	3001      	addeq	r0, #1
 80202a8:	bcf0      	pop	{r4, r5, r6, r7}
 80202aa:	3801      	subs	r0, #1
 80202ac:	4770      	bx	lr
 80202ae:	bf00      	nop

080202b0 <__aeabi_uldivmod>:
 80202b0:	b953      	cbnz	r3, 80202c8 <__aeabi_uldivmod+0x18>
 80202b2:	b94a      	cbnz	r2, 80202c8 <__aeabi_uldivmod+0x18>
 80202b4:	2900      	cmp	r1, #0
 80202b6:	bf08      	it	eq
 80202b8:	2800      	cmpeq	r0, #0
 80202ba:	bf1c      	itt	ne
 80202bc:	f04f 31ff 	movne.w	r1, #4294967295
 80202c0:	f04f 30ff 	movne.w	r0, #4294967295
 80202c4:	f000 b96e 	b.w	80205a4 <__aeabi_idiv0>
 80202c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80202cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80202d0:	f000 f806 	bl	80202e0 <__udivmoddi4>
 80202d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80202d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80202dc:	b004      	add	sp, #16
 80202de:	4770      	bx	lr

080202e0 <__udivmoddi4>:
 80202e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80202e4:	9d08      	ldr	r5, [sp, #32]
 80202e6:	4604      	mov	r4, r0
 80202e8:	468c      	mov	ip, r1
 80202ea:	2b00      	cmp	r3, #0
 80202ec:	f040 8083 	bne.w	80203f6 <__udivmoddi4+0x116>
 80202f0:	428a      	cmp	r2, r1
 80202f2:	4617      	mov	r7, r2
 80202f4:	d947      	bls.n	8020386 <__udivmoddi4+0xa6>
 80202f6:	fab2 f282 	clz	r2, r2
 80202fa:	b142      	cbz	r2, 802030e <__udivmoddi4+0x2e>
 80202fc:	f1c2 0020 	rsb	r0, r2, #32
 8020300:	fa24 f000 	lsr.w	r0, r4, r0
 8020304:	4091      	lsls	r1, r2
 8020306:	4097      	lsls	r7, r2
 8020308:	ea40 0c01 	orr.w	ip, r0, r1
 802030c:	4094      	lsls	r4, r2
 802030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8020312:	0c23      	lsrs	r3, r4, #16
 8020314:	fbbc f6f8 	udiv	r6, ip, r8
 8020318:	fa1f fe87 	uxth.w	lr, r7
 802031c:	fb08 c116 	mls	r1, r8, r6, ip
 8020320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8020324:	fb06 f10e 	mul.w	r1, r6, lr
 8020328:	4299      	cmp	r1, r3
 802032a:	d909      	bls.n	8020340 <__udivmoddi4+0x60>
 802032c:	18fb      	adds	r3, r7, r3
 802032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8020332:	f080 8119 	bcs.w	8020568 <__udivmoddi4+0x288>
 8020336:	4299      	cmp	r1, r3
 8020338:	f240 8116 	bls.w	8020568 <__udivmoddi4+0x288>
 802033c:	3e02      	subs	r6, #2
 802033e:	443b      	add	r3, r7
 8020340:	1a5b      	subs	r3, r3, r1
 8020342:	b2a4      	uxth	r4, r4
 8020344:	fbb3 f0f8 	udiv	r0, r3, r8
 8020348:	fb08 3310 	mls	r3, r8, r0, r3
 802034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8020350:	fb00 fe0e 	mul.w	lr, r0, lr
 8020354:	45a6      	cmp	lr, r4
 8020356:	d909      	bls.n	802036c <__udivmoddi4+0x8c>
 8020358:	193c      	adds	r4, r7, r4
 802035a:	f100 33ff 	add.w	r3, r0, #4294967295
 802035e:	f080 8105 	bcs.w	802056c <__udivmoddi4+0x28c>
 8020362:	45a6      	cmp	lr, r4
 8020364:	f240 8102 	bls.w	802056c <__udivmoddi4+0x28c>
 8020368:	3802      	subs	r0, #2
 802036a:	443c      	add	r4, r7
 802036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8020370:	eba4 040e 	sub.w	r4, r4, lr
 8020374:	2600      	movs	r6, #0
 8020376:	b11d      	cbz	r5, 8020380 <__udivmoddi4+0xa0>
 8020378:	40d4      	lsrs	r4, r2
 802037a:	2300      	movs	r3, #0
 802037c:	e9c5 4300 	strd	r4, r3, [r5]
 8020380:	4631      	mov	r1, r6
 8020382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020386:	b902      	cbnz	r2, 802038a <__udivmoddi4+0xaa>
 8020388:	deff      	udf	#255	; 0xff
 802038a:	fab2 f282 	clz	r2, r2
 802038e:	2a00      	cmp	r2, #0
 8020390:	d150      	bne.n	8020434 <__udivmoddi4+0x154>
 8020392:	1bcb      	subs	r3, r1, r7
 8020394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8020398:	fa1f f887 	uxth.w	r8, r7
 802039c:	2601      	movs	r6, #1
 802039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80203a2:	0c21      	lsrs	r1, r4, #16
 80203a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80203a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80203ac:	fb08 f30c 	mul.w	r3, r8, ip
 80203b0:	428b      	cmp	r3, r1
 80203b2:	d907      	bls.n	80203c4 <__udivmoddi4+0xe4>
 80203b4:	1879      	adds	r1, r7, r1
 80203b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80203ba:	d202      	bcs.n	80203c2 <__udivmoddi4+0xe2>
 80203bc:	428b      	cmp	r3, r1
 80203be:	f200 80e9 	bhi.w	8020594 <__udivmoddi4+0x2b4>
 80203c2:	4684      	mov	ip, r0
 80203c4:	1ac9      	subs	r1, r1, r3
 80203c6:	b2a3      	uxth	r3, r4
 80203c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80203cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80203d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80203d4:	fb08 f800 	mul.w	r8, r8, r0
 80203d8:	45a0      	cmp	r8, r4
 80203da:	d907      	bls.n	80203ec <__udivmoddi4+0x10c>
 80203dc:	193c      	adds	r4, r7, r4
 80203de:	f100 33ff 	add.w	r3, r0, #4294967295
 80203e2:	d202      	bcs.n	80203ea <__udivmoddi4+0x10a>
 80203e4:	45a0      	cmp	r8, r4
 80203e6:	f200 80d9 	bhi.w	802059c <__udivmoddi4+0x2bc>
 80203ea:	4618      	mov	r0, r3
 80203ec:	eba4 0408 	sub.w	r4, r4, r8
 80203f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80203f4:	e7bf      	b.n	8020376 <__udivmoddi4+0x96>
 80203f6:	428b      	cmp	r3, r1
 80203f8:	d909      	bls.n	802040e <__udivmoddi4+0x12e>
 80203fa:	2d00      	cmp	r5, #0
 80203fc:	f000 80b1 	beq.w	8020562 <__udivmoddi4+0x282>
 8020400:	2600      	movs	r6, #0
 8020402:	e9c5 0100 	strd	r0, r1, [r5]
 8020406:	4630      	mov	r0, r6
 8020408:	4631      	mov	r1, r6
 802040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802040e:	fab3 f683 	clz	r6, r3
 8020412:	2e00      	cmp	r6, #0
 8020414:	d14a      	bne.n	80204ac <__udivmoddi4+0x1cc>
 8020416:	428b      	cmp	r3, r1
 8020418:	d302      	bcc.n	8020420 <__udivmoddi4+0x140>
 802041a:	4282      	cmp	r2, r0
 802041c:	f200 80b8 	bhi.w	8020590 <__udivmoddi4+0x2b0>
 8020420:	1a84      	subs	r4, r0, r2
 8020422:	eb61 0103 	sbc.w	r1, r1, r3
 8020426:	2001      	movs	r0, #1
 8020428:	468c      	mov	ip, r1
 802042a:	2d00      	cmp	r5, #0
 802042c:	d0a8      	beq.n	8020380 <__udivmoddi4+0xa0>
 802042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8020432:	e7a5      	b.n	8020380 <__udivmoddi4+0xa0>
 8020434:	f1c2 0320 	rsb	r3, r2, #32
 8020438:	fa20 f603 	lsr.w	r6, r0, r3
 802043c:	4097      	lsls	r7, r2
 802043e:	fa01 f002 	lsl.w	r0, r1, r2
 8020442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8020446:	40d9      	lsrs	r1, r3
 8020448:	4330      	orrs	r0, r6
 802044a:	0c03      	lsrs	r3, r0, #16
 802044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8020450:	fa1f f887 	uxth.w	r8, r7
 8020454:	fb0e 1116 	mls	r1, lr, r6, r1
 8020458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 802045c:	fb06 f108 	mul.w	r1, r6, r8
 8020460:	4299      	cmp	r1, r3
 8020462:	fa04 f402 	lsl.w	r4, r4, r2
 8020466:	d909      	bls.n	802047c <__udivmoddi4+0x19c>
 8020468:	18fb      	adds	r3, r7, r3
 802046a:	f106 3cff 	add.w	ip, r6, #4294967295
 802046e:	f080 808d 	bcs.w	802058c <__udivmoddi4+0x2ac>
 8020472:	4299      	cmp	r1, r3
 8020474:	f240 808a 	bls.w	802058c <__udivmoddi4+0x2ac>
 8020478:	3e02      	subs	r6, #2
 802047a:	443b      	add	r3, r7
 802047c:	1a5b      	subs	r3, r3, r1
 802047e:	b281      	uxth	r1, r0
 8020480:	fbb3 f0fe 	udiv	r0, r3, lr
 8020484:	fb0e 3310 	mls	r3, lr, r0, r3
 8020488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 802048c:	fb00 f308 	mul.w	r3, r0, r8
 8020490:	428b      	cmp	r3, r1
 8020492:	d907      	bls.n	80204a4 <__udivmoddi4+0x1c4>
 8020494:	1879      	adds	r1, r7, r1
 8020496:	f100 3cff 	add.w	ip, r0, #4294967295
 802049a:	d273      	bcs.n	8020584 <__udivmoddi4+0x2a4>
 802049c:	428b      	cmp	r3, r1
 802049e:	d971      	bls.n	8020584 <__udivmoddi4+0x2a4>
 80204a0:	3802      	subs	r0, #2
 80204a2:	4439      	add	r1, r7
 80204a4:	1acb      	subs	r3, r1, r3
 80204a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80204aa:	e778      	b.n	802039e <__udivmoddi4+0xbe>
 80204ac:	f1c6 0c20 	rsb	ip, r6, #32
 80204b0:	fa03 f406 	lsl.w	r4, r3, r6
 80204b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80204b8:	431c      	orrs	r4, r3
 80204ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80204be:	fa01 f306 	lsl.w	r3, r1, r6
 80204c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80204c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80204ca:	431f      	orrs	r7, r3
 80204cc:	0c3b      	lsrs	r3, r7, #16
 80204ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80204d2:	fa1f f884 	uxth.w	r8, r4
 80204d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80204da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80204de:	fb09 fa08 	mul.w	sl, r9, r8
 80204e2:	458a      	cmp	sl, r1
 80204e4:	fa02 f206 	lsl.w	r2, r2, r6
 80204e8:	fa00 f306 	lsl.w	r3, r0, r6
 80204ec:	d908      	bls.n	8020500 <__udivmoddi4+0x220>
 80204ee:	1861      	adds	r1, r4, r1
 80204f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80204f4:	d248      	bcs.n	8020588 <__udivmoddi4+0x2a8>
 80204f6:	458a      	cmp	sl, r1
 80204f8:	d946      	bls.n	8020588 <__udivmoddi4+0x2a8>
 80204fa:	f1a9 0902 	sub.w	r9, r9, #2
 80204fe:	4421      	add	r1, r4
 8020500:	eba1 010a 	sub.w	r1, r1, sl
 8020504:	b2bf      	uxth	r7, r7
 8020506:	fbb1 f0fe 	udiv	r0, r1, lr
 802050a:	fb0e 1110 	mls	r1, lr, r0, r1
 802050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8020512:	fb00 f808 	mul.w	r8, r0, r8
 8020516:	45b8      	cmp	r8, r7
 8020518:	d907      	bls.n	802052a <__udivmoddi4+0x24a>
 802051a:	19e7      	adds	r7, r4, r7
 802051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8020520:	d22e      	bcs.n	8020580 <__udivmoddi4+0x2a0>
 8020522:	45b8      	cmp	r8, r7
 8020524:	d92c      	bls.n	8020580 <__udivmoddi4+0x2a0>
 8020526:	3802      	subs	r0, #2
 8020528:	4427      	add	r7, r4
 802052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 802052e:	eba7 0708 	sub.w	r7, r7, r8
 8020532:	fba0 8902 	umull	r8, r9, r0, r2
 8020536:	454f      	cmp	r7, r9
 8020538:	46c6      	mov	lr, r8
 802053a:	4649      	mov	r1, r9
 802053c:	d31a      	bcc.n	8020574 <__udivmoddi4+0x294>
 802053e:	d017      	beq.n	8020570 <__udivmoddi4+0x290>
 8020540:	b15d      	cbz	r5, 802055a <__udivmoddi4+0x27a>
 8020542:	ebb3 020e 	subs.w	r2, r3, lr
 8020546:	eb67 0701 	sbc.w	r7, r7, r1
 802054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 802054e:	40f2      	lsrs	r2, r6
 8020550:	ea4c 0202 	orr.w	r2, ip, r2
 8020554:	40f7      	lsrs	r7, r6
 8020556:	e9c5 2700 	strd	r2, r7, [r5]
 802055a:	2600      	movs	r6, #0
 802055c:	4631      	mov	r1, r6
 802055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020562:	462e      	mov	r6, r5
 8020564:	4628      	mov	r0, r5
 8020566:	e70b      	b.n	8020380 <__udivmoddi4+0xa0>
 8020568:	4606      	mov	r6, r0
 802056a:	e6e9      	b.n	8020340 <__udivmoddi4+0x60>
 802056c:	4618      	mov	r0, r3
 802056e:	e6fd      	b.n	802036c <__udivmoddi4+0x8c>
 8020570:	4543      	cmp	r3, r8
 8020572:	d2e5      	bcs.n	8020540 <__udivmoddi4+0x260>
 8020574:	ebb8 0e02 	subs.w	lr, r8, r2
 8020578:	eb69 0104 	sbc.w	r1, r9, r4
 802057c:	3801      	subs	r0, #1
 802057e:	e7df      	b.n	8020540 <__udivmoddi4+0x260>
 8020580:	4608      	mov	r0, r1
 8020582:	e7d2      	b.n	802052a <__udivmoddi4+0x24a>
 8020584:	4660      	mov	r0, ip
 8020586:	e78d      	b.n	80204a4 <__udivmoddi4+0x1c4>
 8020588:	4681      	mov	r9, r0
 802058a:	e7b9      	b.n	8020500 <__udivmoddi4+0x220>
 802058c:	4666      	mov	r6, ip
 802058e:	e775      	b.n	802047c <__udivmoddi4+0x19c>
 8020590:	4630      	mov	r0, r6
 8020592:	e74a      	b.n	802042a <__udivmoddi4+0x14a>
 8020594:	f1ac 0c02 	sub.w	ip, ip, #2
 8020598:	4439      	add	r1, r7
 802059a:	e713      	b.n	80203c4 <__udivmoddi4+0xe4>
 802059c:	3802      	subs	r0, #2
 802059e:	443c      	add	r4, r7
 80205a0:	e724      	b.n	80203ec <__udivmoddi4+0x10c>
 80205a2:	bf00      	nop

080205a4 <__aeabi_idiv0>:
 80205a4:	4770      	bx	lr
 80205a6:	bf00      	nop

080205a8 <SystemClock_Config>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;


void SystemClock_Config(void)
{
 80205a8:	b510      	push	{r4, lr}
 80205aa:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80205ac:	2214      	movs	r2, #20
 80205ae:	2100      	movs	r1, #0
 80205b0:	a808      	add	r0, sp, #32
 80205b2:	f001 fa39 	bl	8021a28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80205b6:	2214      	movs	r2, #20
 80205b8:	2100      	movs	r1, #0
 80205ba:	a802      	add	r0, sp, #8
 80205bc:	f001 fa34 	bl	8021a28 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80205c0:	4b1f      	ldr	r3, [pc, #124]	; (8020640 <SystemClock_Config+0x98>)
 80205c2:	2200      	movs	r2, #0
 80205c4:	9200      	str	r2, [sp, #0]
 80205c6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80205c8:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80205cc:	6419      	str	r1, [r3, #64]	; 0x40
 80205ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80205d0:	491c      	ldr	r1, [pc, #112]	; (8020644 <SystemClock_Config+0x9c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80205d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80205d6:	9300      	str	r3, [sp, #0]
 80205d8:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80205da:	9201      	str	r2, [sp, #4]
 80205dc:	680b      	ldr	r3, [r1, #0]
 80205de:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80205e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80205e6:	600b      	str	r3, [r1, #0]
 80205e8:	680b      	ldr	r3, [r1, #0]
 80205ea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80205ee:	9301      	str	r3, [sp, #4]
 80205f0:	9b01      	ldr	r3, [sp, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80205f2:	2101      	movs	r1, #1
 80205f4:	2310      	movs	r3, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 90;
 80205f6:	2008      	movs	r0, #8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80205f8:	e9cd 130a 	strd	r1, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 90;
 80205fc:	235a      	movs	r3, #90	; 0x5a
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80205fe:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLN = 90;
 8020600:	e9cd 030f 	strd	r0, r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8020604:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8020606:	e9cd 420d 	strd	r4, r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 2;
 802060a:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 802060e:	9407      	str	r4, [sp, #28]
  RCC_OscInitStruct.PLL.PLLR = 2;
 8020610:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8020612:	f000 fd23 	bl	802105c <HAL_RCC_OscConfig>
 8020616:	b108      	cbz	r0, 802061c <SystemClock_Config+0x74>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8020618:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 802061a:	e7fe      	b.n	802061a <SystemClock_Config+0x72>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 802061c:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 802061e:	e9cd 3402 	strd	r3, r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8020622:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8020626:	e9cd 3005 	strd	r3, r0, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 802062a:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 802062c:	4621      	mov	r1, r4
 802062e:	a802      	add	r0, sp, #8
 8020630:	f000 fc10 	bl	8020e54 <HAL_RCC_ClockConfig>
 8020634:	b108      	cbz	r0, 802063a <SystemClock_Config+0x92>
 8020636:	b672      	cpsid	i
  while (1)
 8020638:	e7fe      	b.n	8020638 <SystemClock_Config+0x90>
}
 802063a:	b014      	add	sp, #80	; 0x50
 802063c:	bd10      	pop	{r4, pc}
 802063e:	bf00      	nop
 8020640:	40023800 	.word	0x40023800
 8020644:	40007000 	.word	0x40007000

08020648 <MX_USART1_UART_Init>:
  huart1.Instance = USART1;
 8020648:	480a      	ldr	r0, [pc, #40]	; (8020674 <MX_USART1_UART_Init+0x2c>)
  huart1.Init.BaudRate = 9600;
 802064a:	4a0b      	ldr	r2, [pc, #44]	; (8020678 <MX_USART1_UART_Init+0x30>)
{
 802064c:	b508      	push	{r3, lr}
  huart1.Init.BaudRate = 9600;
 802064e:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8020652:	e9c0 2300 	strd	r2, r3, [r0]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8020656:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 8020658:	220c      	movs	r2, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 802065a:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 802065e:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart1.Init.Parity = UART_PARITY_NONE;
 8020662:	6103      	str	r3, [r0, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8020664:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8020666:	f000 ff81 	bl	802156c <HAL_UART_Init>
 802066a:	b108      	cbz	r0, 8020670 <MX_USART1_UART_Init+0x28>
 802066c:	b672      	cpsid	i
  while (1)
 802066e:	e7fe      	b.n	802066e <MX_USART1_UART_Init+0x26>
}
 8020670:	bd08      	pop	{r3, pc}
 8020672:	bf00      	nop
 8020674:	20000098 	.word	0x20000098
 8020678:	40011000 	.word	0x40011000

0802067c <MX_USART2_UART_Init>:
  huart2.Instance = USART2;
 802067c:	480a      	ldr	r0, [pc, #40]	; (80206a8 <MX_USART2_UART_Init+0x2c>)
  huart2.Init.BaudRate = 115200;
 802067e:	4a0b      	ldr	r2, [pc, #44]	; (80206ac <MX_USART2_UART_Init+0x30>)
{
 8020680:	b508      	push	{r3, lr}
  huart2.Init.BaudRate = 115200;
 8020682:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8020686:	e9c0 2300 	strd	r2, r3, [r0]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 802068a:	2300      	movs	r3, #0
  huart2.Init.Mode = UART_MODE_TX_RX;
 802068c:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 802068e:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8020692:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart2.Init.Parity = UART_PARITY_NONE;
 8020696:	6103      	str	r3, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8020698:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 802069a:	f000 ff67 	bl	802156c <HAL_UART_Init>
 802069e:	b108      	cbz	r0, 80206a4 <MX_USART2_UART_Init+0x28>
 80206a0:	b672      	cpsid	i
  while (1)
 80206a2:	e7fe      	b.n	80206a2 <MX_USART2_UART_Init+0x26>
}
 80206a4:	bd08      	pop	{r3, pc}
 80206a6:	bf00      	nop
 80206a8:	200000dc 	.word	0x200000dc
 80206ac:	40004400 	.word	0x40004400

080206b0 <MX_GPIO_Init>:
{
 80206b0:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80206b2:	2214      	movs	r2, #20
{
 80206b4:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80206b6:	eb0d 0002 	add.w	r0, sp, r2
 80206ba:	2100      	movs	r1, #0
 80206bc:	f001 f9b4 	bl	8021a28 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80206c0:	2400      	movs	r4, #0
 80206c2:	4b27      	ldr	r3, [pc, #156]	; (8020760 <MX_GPIO_Init+0xb0>)
 80206c4:	9401      	str	r4, [sp, #4]
 80206c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80206c8:	4d26      	ldr	r5, [pc, #152]	; (8020764 <MX_GPIO_Init+0xb4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80206ca:	f042 0204 	orr.w	r2, r2, #4
 80206ce:	631a      	str	r2, [r3, #48]	; 0x30
 80206d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80206d2:	f002 0204 	and.w	r2, r2, #4
 80206d6:	9201      	str	r2, [sp, #4]
 80206d8:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80206da:	9402      	str	r4, [sp, #8]
 80206dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80206de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80206e2:	631a      	str	r2, [r3, #48]	; 0x30
 80206e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80206e6:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80206ea:	9202      	str	r2, [sp, #8]
 80206ec:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80206ee:	9403      	str	r4, [sp, #12]
 80206f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80206f2:	f042 0201 	orr.w	r2, r2, #1
 80206f6:	631a      	str	r2, [r3, #48]	; 0x30
 80206f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80206fa:	f002 0201 	and.w	r2, r2, #1
 80206fe:	9203      	str	r2, [sp, #12]
 8020700:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8020702:	9404      	str	r4, [sp, #16]
 8020704:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8020706:	f042 0202 	orr.w	r2, r2, #2
 802070a:	631a      	str	r2, [r3, #48]	; 0x30
 802070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802070e:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8020712:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8020714:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8020716:	4628      	mov	r0, r5
 8020718:	2120      	movs	r1, #32
  __HAL_RCC_GPIOB_CLK_ENABLE();
 802071a:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 802071c:	f000 fb8c 	bl	8020e38 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 8020720:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8020724:	a905      	add	r1, sp, #20
 8020726:	4810      	ldr	r0, [pc, #64]	; (8020768 <MX_GPIO_Init+0xb8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020728:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 802072a:	e9cd 3405 	strd	r3, r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 802072e:	2601      	movs	r6, #1
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8020730:	f000 faa8 	bl	8020c84 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8020734:	2320      	movs	r3, #32
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8020736:	a905      	add	r1, sp, #20
 8020738:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 802073a:	e9cd 3605 	strd	r3, r6, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802073e:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8020742:	f000 fa9f 	bl	8020c84 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8020746:	f44f 7380 	mov.w	r3, #256	; 0x100
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802074a:	a905      	add	r1, sp, #20
 802074c:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 802074e:	e9cd 3605 	strd	r3, r6, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020752:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8020756:	f000 fa95 	bl	8020c84 <HAL_GPIO_Init>
}
 802075a:	b00a      	add	sp, #40	; 0x28
 802075c:	bd70      	pop	{r4, r5, r6, pc}
 802075e:	bf00      	nop
 8020760:	40023800 	.word	0x40023800
 8020764:	40020000 	.word	0x40020000
 8020768:	40020800 	.word	0x40020800

0802076c <main>:


#define PRESSED 0

int main(void)
{
 802076c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  HAL_Init();
 8020770:	f000 f99e 	bl	8020ab0 <HAL_Init>
  SystemClock_Config();
 8020774:	f7ff ff18 	bl	80205a8 <SystemClock_Config>
  MX_GPIO_Init();
 8020778:	f7ff ff9a 	bl	80206b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 802077c:	f7ff ff7e 	bl	802067c <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8020780:	f7ff ff62 	bl	8020648 <MX_USART1_UART_Init>
  uint8_t  blinkFlag=0;
  uint32_t blinkLastTime=HAL_GetTick();
 8020784:	f000 f9ba 	bl	8020afc <HAL_GetTick>
 8020788:	4604      	mov	r4, r0
  uint32_t buttonLastTime=HAL_GetTick();
 802078a:	f000 f9b7 	bl	8020afc <HAL_GetTick>
  uint32_t debounceDelay=200;

  while (1)
  {

	  if((PRESSED==HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin))
 802078e:	f8df 9068 	ldr.w	r9, [pc, #104]	; 80207f8 <main+0x8c>
		   {HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
		   blinkLastTime=HAL_GetTick();
		   }
	  }else
	  {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8020792:	4f18      	ldr	r7, [pc, #96]	; (80207f4 <main+0x88>)
	  }

	  printf("Hello Ahmed,blinking value =%d \r\n",blinkFlag);
 8020794:	f8df 8064 	ldr.w	r8, [pc, #100]	; 80207fc <main+0x90>
  uint32_t buttonLastTime=HAL_GetTick();
 8020798:	4605      	mov	r5, r0
  uint8_t  blinkFlag=0;
 802079a:	2600      	movs	r6, #0
	  if((PRESSED==HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin))
 802079c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80207a0:	4648      	mov	r0, r9
 80207a2:	f000 fb43 	bl	8020e2c <HAL_GPIO_ReadPin>
 80207a6:	b948      	cbnz	r0, 80207bc <main+0x50>
		 &&((HAL_GetTick()-buttonLastTime)>debounceDelay))
 80207a8:	f000 f9a8 	bl	8020afc <HAL_GetTick>
 80207ac:	1b40      	subs	r0, r0, r5
 80207ae:	28c8      	cmp	r0, #200	; 0xc8
 80207b0:	d904      	bls.n	80207bc <main+0x50>
		  buttonLastTime=HAL_GetTick();
 80207b2:	f000 f9a3 	bl	8020afc <HAL_GetTick>
 80207b6:	f086 0601 	eor.w	r6, r6, #1
 80207ba:	4605      	mov	r5, r0
	  if(blinkFlag)
 80207bc:	b196      	cbz	r6, 80207e4 <main+0x78>
		  if((HAL_GetTick()-blinkLastTime)>blinkingDelay)
 80207be:	f000 f99d 	bl	8020afc <HAL_GetTick>
 80207c2:	1b00      	subs	r0, r0, r4
 80207c4:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 80207c8:	d907      	bls.n	80207da <main+0x6e>
		   {HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 80207ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80207ce:	4638      	mov	r0, r7
 80207d0:	f000 fb37 	bl	8020e42 <HAL_GPIO_TogglePin>
		   blinkLastTime=HAL_GetTick();
 80207d4:	f000 f992 	bl	8020afc <HAL_GetTick>
 80207d8:	4604      	mov	r4, r0
	  printf("Hello Ahmed,blinking value =%d \r\n",blinkFlag);
 80207da:	4631      	mov	r1, r6
 80207dc:	4640      	mov	r0, r8
 80207de:	f001 f92b 	bl	8021a38 <iprintf>
	  if((PRESSED==HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin))
 80207e2:	e7db      	b.n	802079c <main+0x30>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80207e4:	4632      	mov	r2, r6
 80207e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80207ea:	4638      	mov	r0, r7
 80207ec:	f000 fb24 	bl	8020e38 <HAL_GPIO_WritePin>
 80207f0:	e7f3      	b.n	80207da <main+0x6e>
 80207f2:	bf00      	nop
 80207f4:	40020000 	.word	0x40020000
 80207f8:	40020800 	.word	0x40020800
 80207fc:	080228fc 	.word	0x080228fc

08020800 <__io_putchar>:

}


int __io_putchar(int ch)
{
 8020800:	b507      	push	{r0, r1, r2, lr}
  /* e.g. write a character to the PC_UART and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1,HAL_MAX_DELAY);
 8020802:	f04f 33ff 	mov.w	r3, #4294967295
{
 8020806:	9001      	str	r0, [sp, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1,HAL_MAX_DELAY);
 8020808:	2201      	movs	r2, #1
 802080a:	a901      	add	r1, sp, #4
 802080c:	4803      	ldr	r0, [pc, #12]	; (802081c <__io_putchar+0x1c>)
 802080e:	f000 fedb 	bl	80215c8 <HAL_UART_Transmit>
  return ch;
}
 8020812:	9801      	ldr	r0, [sp, #4]
 8020814:	b003      	add	sp, #12
 8020816:	f85d fb04 	ldr.w	pc, [sp], #4
 802081a:	bf00      	nop
 802081c:	200000dc 	.word	0x200000dc

08020820 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8020820:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8020822:	4b0d      	ldr	r3, [pc, #52]	; (8020858 <HAL_MspInit+0x38>)
 8020824:	2100      	movs	r1, #0
 8020826:	9100      	str	r1, [sp, #0]
 8020828:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 802082a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 802082e:	645a      	str	r2, [r3, #68]	; 0x44
 8020830:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8020832:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8020836:	9200      	str	r2, [sp, #0]
 8020838:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 802083a:	9101      	str	r1, [sp, #4]
 802083c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 802083e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8020842:	641a      	str	r2, [r3, #64]	; 0x40
 8020844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802084a:	9301      	str	r3, [sp, #4]
 802084c:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 802084e:	2007      	movs	r0, #7
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8020850:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8020852:	f000 b959 	b.w	8020b08 <HAL_NVIC_SetPriorityGrouping>
 8020856:	bf00      	nop
 8020858:	40023800 	.word	0x40023800

0802085c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 802085c:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802085e:	2214      	movs	r2, #20
{
 8020860:	b08a      	sub	sp, #40	; 0x28
 8020862:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8020864:	2100      	movs	r1, #0
 8020866:	eb0d 0002 	add.w	r0, sp, r2
 802086a:	f001 f8dd 	bl	8021a28 <memset>
  if(huart->Instance==USART1)
 802086e:	6823      	ldr	r3, [r4, #0]
 8020870:	4a2f      	ldr	r2, [pc, #188]	; (8020930 <HAL_UART_MspInit+0xd4>)
 8020872:	4293      	cmp	r3, r2
 8020874:	d12e      	bne.n	80208d4 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8020876:	4b2f      	ldr	r3, [pc, #188]	; (8020934 <HAL_UART_MspInit+0xd8>)
 8020878:	2400      	movs	r4, #0
 802087a:	9401      	str	r4, [sp, #4]
 802087c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 802087e:	f042 0210 	orr.w	r2, r2, #16
 8020882:	645a      	str	r2, [r3, #68]	; 0x44
 8020884:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8020886:	f002 0210 	and.w	r2, r2, #16
 802088a:	9201      	str	r2, [sp, #4]
 802088c:	9a01      	ldr	r2, [sp, #4]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 802088e:	9402      	str	r4, [sp, #8]
 8020890:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8020892:	f042 0201 	orr.w	r2, r2, #1
 8020896:	631a      	str	r2, [r3, #48]	; 0x30
 8020898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802089a:	9407      	str	r4, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 802089c:	f003 0301 	and.w	r3, r3, #1
 80208a0:	9302      	str	r3, [sp, #8]
 80208a2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80208a4:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 80208a8:	2302      	movs	r3, #2
 80208aa:	e9cd 0305 	strd	r0, r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80208ae:	f04f 0c03 	mov.w	ip, #3
 80208b2:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80208b4:	4820      	ldr	r0, [pc, #128]	; (8020938 <HAL_UART_MspInit+0xdc>)
 80208b6:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80208b8:	e9cd c308 	strd	ip, r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80208bc:	f000 f9e2 	bl	8020c84 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80208c0:	2025      	movs	r0, #37	; 0x25
 80208c2:	4622      	mov	r2, r4
 80208c4:	4621      	mov	r1, r4
 80208c6:	f000 f931 	bl	8020b2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80208ca:	2025      	movs	r0, #37	; 0x25
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80208cc:	f000 f960 	bl	8020b90 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80208d0:	b00a      	add	sp, #40	; 0x28
 80208d2:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART2)
 80208d4:	4a19      	ldr	r2, [pc, #100]	; (802093c <HAL_UART_MspInit+0xe0>)
 80208d6:	4293      	cmp	r3, r2
 80208d8:	d1fa      	bne.n	80208d0 <HAL_UART_MspInit+0x74>
    __HAL_RCC_USART2_CLK_ENABLE();
 80208da:	4b16      	ldr	r3, [pc, #88]	; (8020934 <HAL_UART_MspInit+0xd8>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80208dc:	4816      	ldr	r0, [pc, #88]	; (8020938 <HAL_UART_MspInit+0xdc>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80208de:	2400      	movs	r4, #0
 80208e0:	9403      	str	r4, [sp, #12]
 80208e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80208e4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80208e8:	641a      	str	r2, [r3, #64]	; 0x40
 80208ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80208ec:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80208f0:	9203      	str	r2, [sp, #12]
 80208f2:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80208f4:	9404      	str	r4, [sp, #16]
 80208f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80208f8:	f042 0201 	orr.w	r2, r2, #1
 80208fc:	631a      	str	r2, [r3, #48]	; 0x30
 80208fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020900:	9407      	str	r4, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8020902:	f003 0301 	and.w	r3, r3, #1
 8020906:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8020908:	220c      	movs	r2, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 802090a:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802090c:	2302      	movs	r3, #2
 802090e:	e9cd 2305 	strd	r2, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8020912:	2103      	movs	r1, #3
 8020914:	2307      	movs	r3, #7
 8020916:	e9cd 1308 	strd	r1, r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802091a:	a905      	add	r1, sp, #20
 802091c:	f000 f9b2 	bl	8020c84 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8020920:	2026      	movs	r0, #38	; 0x26
 8020922:	4622      	mov	r2, r4
 8020924:	4621      	mov	r1, r4
 8020926:	f000 f901 	bl	8020b2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 802092a:	2026      	movs	r0, #38	; 0x26
 802092c:	e7ce      	b.n	80208cc <HAL_UART_MspInit+0x70>
 802092e:	bf00      	nop
 8020930:	40011000 	.word	0x40011000
 8020934:	40023800 	.word	0x40023800
 8020938:	40020000 	.word	0x40020000
 802093c:	40004400 	.word	0x40004400

08020940 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8020940:	e7fe      	b.n	8020940 <NMI_Handler>

08020942 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8020942:	e7fe      	b.n	8020942 <HardFault_Handler>

08020944 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8020944:	e7fe      	b.n	8020944 <MemManage_Handler>

08020946 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8020946:	e7fe      	b.n	8020946 <BusFault_Handler>

08020948 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8020948:	e7fe      	b.n	8020948 <UsageFault_Handler>

0802094a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 802094a:	4770      	bx	lr

0802094c <DebugMon_Handler>:
 802094c:	4770      	bx	lr

0802094e <PendSV_Handler>:
 802094e:	4770      	bx	lr

08020950 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8020950:	f000 b8c8 	b.w	8020ae4 <HAL_IncTick>

08020954 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8020954:	4801      	ldr	r0, [pc, #4]	; (802095c <USART1_IRQHandler+0x8>)
 8020956:	f000 bef5 	b.w	8021744 <HAL_UART_IRQHandler>
 802095a:	bf00      	nop
 802095c:	20000098 	.word	0x20000098

08020960 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8020960:	4801      	ldr	r0, [pc, #4]	; (8020968 <USART2_IRQHandler+0x8>)
 8020962:	f000 beef 	b.w	8021744 <HAL_UART_IRQHandler>
 8020966:	bf00      	nop
 8020968:	200000dc 	.word	0x200000dc

0802096c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 802096c:	b570      	push	{r4, r5, r6, lr}
 802096e:	460e      	mov	r6, r1
 8020970:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8020972:	2500      	movs	r5, #0
 8020974:	42a5      	cmp	r5, r4
 8020976:	db01      	blt.n	802097c <_read+0x10>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8020978:	4620      	mov	r0, r4
 802097a:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 802097c:	f3af 8000 	nop.w
 8020980:	5570      	strb	r0, [r6, r5]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8020982:	3501      	adds	r5, #1
 8020984:	e7f6      	b.n	8020974 <_read+0x8>

08020986 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8020986:	b570      	push	{r4, r5, r6, lr}
 8020988:	460e      	mov	r6, r1
 802098a:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 802098c:	2500      	movs	r5, #0
 802098e:	42a5      	cmp	r5, r4
 8020990:	db01      	blt.n	8020996 <_write+0x10>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8020992:	4620      	mov	r0, r4
 8020994:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8020996:	5d70      	ldrb	r0, [r6, r5]
 8020998:	f7ff ff32 	bl	8020800 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 802099c:	3501      	adds	r5, #1
 802099e:	e7f6      	b.n	802098e <_write+0x8>

080209a0 <_close>:

int _close(int file)
{
	return -1;
}
 80209a0:	f04f 30ff 	mov.w	r0, #4294967295
 80209a4:	4770      	bx	lr

080209a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80209a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80209aa:	604b      	str	r3, [r1, #4]
	return 0;
}
 80209ac:	2000      	movs	r0, #0
 80209ae:	4770      	bx	lr

080209b0 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80209b0:	2001      	movs	r0, #1
 80209b2:	4770      	bx	lr

080209b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80209b4:	2000      	movs	r0, #0
 80209b6:	4770      	bx	lr

080209b8 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80209b8:	4b0b      	ldr	r3, [pc, #44]	; (80209e8 <_sbrk+0x30>)
 80209ba:	6819      	ldr	r1, [r3, #0]
{
 80209bc:	b510      	push	{r4, lr}
 80209be:	4602      	mov	r2, r0
  if (NULL == __sbrk_heap_end)
 80209c0:	b909      	cbnz	r1, 80209c6 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 80209c2:	490a      	ldr	r1, [pc, #40]	; (80209ec <_sbrk+0x34>)
 80209c4:	6019      	str	r1, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80209c6:	6818      	ldr	r0, [r3, #0]
 80209c8:	4909      	ldr	r1, [pc, #36]	; (80209f0 <_sbrk+0x38>)
 80209ca:	4c0a      	ldr	r4, [pc, #40]	; (80209f4 <_sbrk+0x3c>)
 80209cc:	4402      	add	r2, r0
 80209ce:	1b09      	subs	r1, r1, r4
 80209d0:	428a      	cmp	r2, r1
 80209d2:	d906      	bls.n	80209e2 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 80209d4:	f000 fffe 	bl	80219d4 <__errno>
 80209d8:	230c      	movs	r3, #12
 80209da:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80209dc:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80209e0:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80209e2:	601a      	str	r2, [r3, #0]
  return (void *)prev_heap_end;
 80209e4:	e7fc      	b.n	80209e0 <_sbrk+0x28>
 80209e6:	bf00      	nop
 80209e8:	2000008c 	.word	0x2000008c
 80209ec:	20000138 	.word	0x20000138
 80209f0:	20020000 	.word	0x20020000
 80209f4:	00000400 	.word	0x00000400

080209f8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80209f8:	4b04      	ldr	r3, [pc, #16]	; (8020a0c <SystemInit+0x14>)
 80209fa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80209fe:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8020a02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8020a06:	4a02      	ldr	r2, [pc, #8]	; (8020a10 <SystemInit+0x18>)
 8020a08:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8020a0a:	4770      	bx	lr
 8020a0c:	e000ed00 	.word	0xe000ed00
 8020a10:	08020000 	.word	0x08020000

08020a14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8020a14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8020a4c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8020a18:	480d      	ldr	r0, [pc, #52]	; (8020a50 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8020a1a:	490e      	ldr	r1, [pc, #56]	; (8020a54 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8020a1c:	4a0e      	ldr	r2, [pc, #56]	; (8020a58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8020a1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8020a20:	e002      	b.n	8020a28 <LoopCopyDataInit>

08020a22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8020a22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8020a24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8020a26:	3304      	adds	r3, #4

08020a28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8020a28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8020a2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8020a2c:	d3f9      	bcc.n	8020a22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8020a2e:	4a0b      	ldr	r2, [pc, #44]	; (8020a5c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8020a30:	4c0b      	ldr	r4, [pc, #44]	; (8020a60 <LoopFillZerobss+0x26>)
  movs r3, #0
 8020a32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8020a34:	e001      	b.n	8020a3a <LoopFillZerobss>

08020a36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8020a36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8020a38:	3204      	adds	r2, #4

08020a3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8020a3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8020a3c:	d3fb      	bcc.n	8020a36 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8020a3e:	f7ff ffdb 	bl	80209f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8020a42:	f000 ffcd 	bl	80219e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8020a46:	f7ff fe91 	bl	802076c <main>
  bx  lr    
 8020a4a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8020a4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8020a50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8020a54:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8020a58:	080229e0 	.word	0x080229e0
  ldr r2, =_sbss
 8020a5c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8020a60:	20000134 	.word	0x20000134

08020a64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8020a64:	e7fe      	b.n	8020a64 <ADC_IRQHandler>
	...

08020a68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8020a68:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8020a6a:	4a0e      	ldr	r2, [pc, #56]	; (8020aa4 <HAL_InitTick+0x3c>)
 8020a6c:	4b0e      	ldr	r3, [pc, #56]	; (8020aa8 <HAL_InitTick+0x40>)
{
 8020a6e:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8020a70:	7818      	ldrb	r0, [r3, #0]
 8020a72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8020a76:	fbb3 f3f0 	udiv	r3, r3, r0
 8020a7a:	6810      	ldr	r0, [r2, #0]
 8020a7c:	fbb0 f0f3 	udiv	r0, r0, r3
 8020a80:	f000 f894 	bl	8020bac <HAL_SYSTICK_Config>
 8020a84:	4604      	mov	r4, r0
 8020a86:	b958      	cbnz	r0, 8020aa0 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8020a88:	2d0f      	cmp	r5, #15
 8020a8a:	d809      	bhi.n	8020aa0 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8020a8c:	4602      	mov	r2, r0
 8020a8e:	4629      	mov	r1, r5
 8020a90:	f04f 30ff 	mov.w	r0, #4294967295
 8020a94:	f000 f84a 	bl	8020b2c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8020a98:	4b04      	ldr	r3, [pc, #16]	; (8020aac <HAL_InitTick+0x44>)
 8020a9a:	4620      	mov	r0, r4
 8020a9c:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8020a9e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8020aa0:	2001      	movs	r0, #1
 8020aa2:	e7fc      	b.n	8020a9e <HAL_InitTick+0x36>
 8020aa4:	20000000 	.word	0x20000000
 8020aa8:	20000004 	.word	0x20000004
 8020aac:	20000008 	.word	0x20000008

08020ab0 <HAL_Init>:
{
 8020ab0:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8020ab2:	4b0b      	ldr	r3, [pc, #44]	; (8020ae0 <HAL_Init+0x30>)
 8020ab4:	681a      	ldr	r2, [r3, #0]
 8020ab6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8020aba:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8020abc:	681a      	ldr	r2, [r3, #0]
 8020abe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8020ac2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8020ac4:	681a      	ldr	r2, [r3, #0]
 8020ac6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8020aca:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8020acc:	2003      	movs	r0, #3
 8020ace:	f000 f81b 	bl	8020b08 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8020ad2:	2000      	movs	r0, #0
 8020ad4:	f7ff ffc8 	bl	8020a68 <HAL_InitTick>
  HAL_MspInit();
 8020ad8:	f7ff fea2 	bl	8020820 <HAL_MspInit>
}
 8020adc:	2000      	movs	r0, #0
 8020ade:	bd08      	pop	{r3, pc}
 8020ae0:	40023c00 	.word	0x40023c00

08020ae4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8020ae4:	4a03      	ldr	r2, [pc, #12]	; (8020af4 <HAL_IncTick+0x10>)
 8020ae6:	4b04      	ldr	r3, [pc, #16]	; (8020af8 <HAL_IncTick+0x14>)
 8020ae8:	6811      	ldr	r1, [r2, #0]
 8020aea:	781b      	ldrb	r3, [r3, #0]
 8020aec:	440b      	add	r3, r1
 8020aee:	6013      	str	r3, [r2, #0]
}
 8020af0:	4770      	bx	lr
 8020af2:	bf00      	nop
 8020af4:	20000120 	.word	0x20000120
 8020af8:	20000004 	.word	0x20000004

08020afc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8020afc:	4b01      	ldr	r3, [pc, #4]	; (8020b04 <HAL_GetTick+0x8>)
 8020afe:	6818      	ldr	r0, [r3, #0]
}
 8020b00:	4770      	bx	lr
 8020b02:	bf00      	nop
 8020b04:	20000120 	.word	0x20000120

08020b08 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8020b08:	4907      	ldr	r1, [pc, #28]	; (8020b28 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8020b0a:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8020b0c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8020b10:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8020b12:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8020b14:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8020b18:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8020b1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8020b1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8020b20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8020b24:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8020b26:	4770      	bx	lr
 8020b28:	e000ed00 	.word	0xe000ed00

08020b2c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8020b2c:	4b16      	ldr	r3, [pc, #88]	; (8020b88 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8020b2e:	b530      	push	{r4, r5, lr}
 8020b30:	68dc      	ldr	r4, [r3, #12]
 8020b32:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8020b36:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8020b3a:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8020b3c:	2d04      	cmp	r5, #4
 8020b3e:	bf28      	it	cs
 8020b40:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8020b42:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8020b44:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8020b48:	bf8c      	ite	hi
 8020b4a:	3c03      	subhi	r4, #3
 8020b4c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8020b4e:	fa03 f505 	lsl.w	r5, r3, r5
 8020b52:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8020b56:	40a3      	lsls	r3, r4
 8020b58:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8020b5c:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 8020b5e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8020b60:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8020b64:	bfac      	ite	ge
 8020b66:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8020b6a:	4a08      	ldrlt	r2, [pc, #32]	; (8020b8c <HAL_NVIC_SetPriority+0x60>)
 8020b6c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8020b70:	bfb8      	it	lt
 8020b72:	f000 000f 	andlt.w	r0, r0, #15
 8020b76:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8020b78:	bfaa      	itet	ge
 8020b7a:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8020b7e:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8020b80:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8020b84:	bd30      	pop	{r4, r5, pc}
 8020b86:	bf00      	nop
 8020b88:	e000ed00 	.word	0xe000ed00
 8020b8c:	e000ed14 	.word	0xe000ed14

08020b90 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8020b90:	2800      	cmp	r0, #0
 8020b92:	db08      	blt.n	8020ba6 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8020b94:	0942      	lsrs	r2, r0, #5
 8020b96:	2301      	movs	r3, #1
 8020b98:	f000 001f 	and.w	r0, r0, #31
 8020b9c:	fa03 f000 	lsl.w	r0, r3, r0
 8020ba0:	4b01      	ldr	r3, [pc, #4]	; (8020ba8 <HAL_NVIC_EnableIRQ+0x18>)
 8020ba2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8020ba6:	4770      	bx	lr
 8020ba8:	e000e100 	.word	0xe000e100

08020bac <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8020bac:	3801      	subs	r0, #1
 8020bae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8020bb2:	d20a      	bcs.n	8020bca <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8020bb4:	4b06      	ldr	r3, [pc, #24]	; (8020bd0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8020bb6:	4a07      	ldr	r2, [pc, #28]	; (8020bd4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8020bb8:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8020bba:	21f0      	movs	r1, #240	; 0xf0
 8020bbc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8020bc0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8020bc2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8020bc4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8020bc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8020bc8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8020bca:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8020bcc:	4770      	bx	lr
 8020bce:	bf00      	nop
 8020bd0:	e000e010 	.word	0xe000e010
 8020bd4:	e000ed00 	.word	0xe000ed00

08020bd8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8020bd8:	b570      	push	{r4, r5, r6, lr}
 8020bda:	4604      	mov	r4, r0
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8020bdc:	6d86      	ldr	r6, [r0, #88]	; 0x58
  
  uint32_t tickstart = HAL_GetTick();
 8020bde:	f7ff ff8d 	bl	8020afc <HAL_GetTick>
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8020be2:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8020be6:	2b02      	cmp	r3, #2
  uint32_t tickstart = HAL_GetTick();
 8020be8:	4605      	mov	r5, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8020bea:	d006      	beq.n	8020bfa <HAL_DMA_Abort+0x22>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8020bec:	2380      	movs	r3, #128	; 0x80
 8020bee:	6563      	str	r3, [r4, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8020bf0:	2300      	movs	r3, #0
 8020bf2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    
    return HAL_ERROR;
 8020bf6:	2001      	movs	r0, #1
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
  }
  return HAL_OK;
}
 8020bf8:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8020bfa:	6823      	ldr	r3, [r4, #0]
 8020bfc:	681a      	ldr	r2, [r3, #0]
 8020bfe:	f022 0216 	bic.w	r2, r2, #22
 8020c02:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8020c04:	695a      	ldr	r2, [r3, #20]
 8020c06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8020c0a:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8020c0c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8020c0e:	b90a      	cbnz	r2, 8020c14 <HAL_DMA_Abort+0x3c>
 8020c10:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8020c12:	b11a      	cbz	r2, 8020c1c <HAL_DMA_Abort+0x44>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8020c14:	681a      	ldr	r2, [r3, #0]
 8020c16:	f022 0208 	bic.w	r2, r2, #8
 8020c1a:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8020c1c:	681a      	ldr	r2, [r3, #0]
 8020c1e:	f022 0201 	bic.w	r2, r2, #1
 8020c22:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8020c24:	6823      	ldr	r3, [r4, #0]
 8020c26:	681b      	ldr	r3, [r3, #0]
 8020c28:	f013 0301 	ands.w	r3, r3, #1
 8020c2c:	d10a      	bne.n	8020c44 <HAL_DMA_Abort+0x6c>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8020c2e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8020c30:	223f      	movs	r2, #63	; 0x3f
 8020c32:	408a      	lsls	r2, r1
 8020c34:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8020c36:	2201      	movs	r2, #1
 8020c38:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8020c3c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8020c40:	4618      	mov	r0, r3
 8020c42:	e7d9      	b.n	8020bf8 <HAL_DMA_Abort+0x20>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8020c44:	f7ff ff5a 	bl	8020afc <HAL_GetTick>
 8020c48:	1b40      	subs	r0, r0, r5
 8020c4a:	2805      	cmp	r0, #5
 8020c4c:	d9ea      	bls.n	8020c24 <HAL_DMA_Abort+0x4c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8020c4e:	2320      	movs	r3, #32
 8020c50:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8020c52:	2003      	movs	r0, #3
        __HAL_UNLOCK(hdma);
 8020c54:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8020c56:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8020c5a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 8020c5e:	e7cb      	b.n	8020bf8 <HAL_DMA_Abort+0x20>

08020c60 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8020c60:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8020c64:	2b02      	cmp	r3, #2
 8020c66:	d003      	beq.n	8020c70 <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8020c68:	2380      	movs	r3, #128	; 0x80
 8020c6a:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8020c6c:	2001      	movs	r0, #1
 8020c6e:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8020c70:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8020c72:	2305      	movs	r3, #5
 8020c74:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8020c78:	6813      	ldr	r3, [r2, #0]
 8020c7a:	f023 0301 	bic.w	r3, r3, #1
 8020c7e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8020c80:	2000      	movs	r0, #0
}
 8020c82:	4770      	bx	lr

08020c84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8020c84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8020c88:	f8df 919c 	ldr.w	r9, [pc, #412]	; 8020e28 <HAL_GPIO_Init+0x1a4>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8020c8c:	4a64      	ldr	r2, [pc, #400]	; (8020e20 <HAL_GPIO_Init+0x19c>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 8020c8e:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8020c90:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 8020c92:	2401      	movs	r4, #1
 8020c94:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8020c96:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 8020c9a:	43ac      	bics	r4, r5
 8020c9c:	f040 80ad 	bne.w	8020dfa <HAL_GPIO_Init+0x176>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8020ca0:	684d      	ldr	r5, [r1, #4]
 8020ca2:	f005 0403 	and.w	r4, r5, #3
 8020ca6:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8020caa:	2603      	movs	r6, #3
 8020cac:	1e67      	subs	r7, r4, #1
 8020cae:	fa06 f608 	lsl.w	r6, r6, r8
 8020cb2:	2f01      	cmp	r7, #1
 8020cb4:	ea6f 0606 	mvn.w	r6, r6
 8020cb8:	d834      	bhi.n	8020d24 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 8020cba:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8020cbc:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8020cc0:	68cf      	ldr	r7, [r1, #12]
 8020cc2:	fa07 f708 	lsl.w	r7, r7, r8
 8020cc6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8020cca:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8020ccc:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8020cce:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8020cd2:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8020cd6:	409f      	lsls	r7, r3
 8020cd8:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8020cdc:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8020cde:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8020ce0:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8020ce4:	688f      	ldr	r7, [r1, #8]
 8020ce6:	fa07 f708 	lsl.w	r7, r7, r8
 8020cea:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8020cee:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 8020cf0:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8020cf2:	d119      	bne.n	8020d28 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 8020cf4:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8020cf8:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8020cfc:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8020d00:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8020d04:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8020d08:	f04f 0e0f 	mov.w	lr, #15
 8020d0c:	fa0e fe0b 	lsl.w	lr, lr, fp
 8020d10:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8020d14:	690f      	ldr	r7, [r1, #16]
 8020d16:	fa07 f70b 	lsl.w	r7, r7, fp
 8020d1a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8020d1e:	f8ca 7020 	str.w	r7, [sl, #32]
 8020d22:	e001      	b.n	8020d28 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8020d24:	2c03      	cmp	r4, #3
 8020d26:	d1da      	bne.n	8020cde <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 8020d28:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8020d2a:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8020d2e:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8020d30:	4326      	orrs	r6, r4
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8020d32:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 8020d36:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8020d38:	d05f      	beq.n	8020dfa <HAL_GPIO_Init+0x176>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8020d3a:	f04f 0a00 	mov.w	sl, #0
 8020d3e:	f8cd a004 	str.w	sl, [sp, #4]
 8020d42:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8020d46:	4c37      	ldr	r4, [pc, #220]	; (8020e24 <HAL_GPIO_Init+0x1a0>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8020d48:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8020d4c:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 8020d50:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 8020d54:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8020d58:	9601      	str	r6, [sp, #4]
 8020d5a:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8020d5c:	f023 0603 	bic.w	r6, r3, #3
 8020d60:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8020d64:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8020d68:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8020d6c:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8020d70:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8020d74:	270f      	movs	r7, #15
 8020d76:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8020d7a:	42a0      	cmp	r0, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8020d7c:	ea28 0707 	bic.w	r7, r8, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8020d80:	d042      	beq.n	8020e08 <HAL_GPIO_Init+0x184>
 8020d82:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8020d86:	42a0      	cmp	r0, r4
 8020d88:	d040      	beq.n	8020e0c <HAL_GPIO_Init+0x188>
 8020d8a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8020d8e:	42a0      	cmp	r0, r4
 8020d90:	d03e      	beq.n	8020e10 <HAL_GPIO_Init+0x18c>
 8020d92:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8020d96:	42a0      	cmp	r0, r4
 8020d98:	d03c      	beq.n	8020e14 <HAL_GPIO_Init+0x190>
 8020d9a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8020d9e:	42a0      	cmp	r0, r4
 8020da0:	d03a      	beq.n	8020e18 <HAL_GPIO_Init+0x194>
 8020da2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8020da6:	42a0      	cmp	r0, r4
 8020da8:	d038      	beq.n	8020e1c <HAL_GPIO_Init+0x198>
 8020daa:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8020dae:	42a0      	cmp	r0, r4
 8020db0:	bf0c      	ite	eq
 8020db2:	2406      	moveq	r4, #6
 8020db4:	2407      	movne	r4, #7
 8020db6:	fa04 f40e 	lsl.w	r4, r4, lr
 8020dba:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8020dbc:	60b4      	str	r4, [r6, #8]
        temp = EXTI->IMR;
 8020dbe:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8020dc0:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8020dc4:	03ef      	lsls	r7, r5, #15
        temp &= ~((uint32_t)iocurrent);
 8020dc6:	bf54      	ite	pl
 8020dc8:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8020dca:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 8020dce:	6014      	str	r4, [r2, #0]

        temp = EXTI->EMR;
 8020dd0:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8020dd2:	03af      	lsls	r7, r5, #14
        temp &= ~((uint32_t)iocurrent);
 8020dd4:	bf54      	ite	pl
 8020dd6:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8020dd8:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR = temp;
 8020ddc:	6054      	str	r4, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8020dde:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8020de0:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 8020de2:	bf54      	ite	pl
 8020de4:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8020de6:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;
 8020dea:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 8020dec:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8020dee:	02ad      	lsls	r5, r5, #10
        temp &= ~((uint32_t)iocurrent);
 8020df0:	bf54      	ite	pl
 8020df2:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8020df4:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;
 8020df8:	60d4      	str	r4, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8020dfa:	3301      	adds	r3, #1
 8020dfc:	2b10      	cmp	r3, #16
 8020dfe:	f47f af47 	bne.w	8020c90 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8020e02:	b003      	add	sp, #12
 8020e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8020e08:	4654      	mov	r4, sl
 8020e0a:	e7d4      	b.n	8020db6 <HAL_GPIO_Init+0x132>
 8020e0c:	2401      	movs	r4, #1
 8020e0e:	e7d2      	b.n	8020db6 <HAL_GPIO_Init+0x132>
 8020e10:	2402      	movs	r4, #2
 8020e12:	e7d0      	b.n	8020db6 <HAL_GPIO_Init+0x132>
 8020e14:	2403      	movs	r4, #3
 8020e16:	e7ce      	b.n	8020db6 <HAL_GPIO_Init+0x132>
 8020e18:	2404      	movs	r4, #4
 8020e1a:	e7cc      	b.n	8020db6 <HAL_GPIO_Init+0x132>
 8020e1c:	2405      	movs	r4, #5
 8020e1e:	e7ca      	b.n	8020db6 <HAL_GPIO_Init+0x132>
 8020e20:	40013c00 	.word	0x40013c00
 8020e24:	40020000 	.word	0x40020000
 8020e28:	40023800 	.word	0x40023800

08020e2c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8020e2c:	6903      	ldr	r3, [r0, #16]
 8020e2e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8020e30:	bf14      	ite	ne
 8020e32:	2001      	movne	r0, #1
 8020e34:	2000      	moveq	r0, #0
 8020e36:	4770      	bx	lr

08020e38 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8020e38:	b10a      	cbz	r2, 8020e3e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8020e3a:	6181      	str	r1, [r0, #24]
  }
}
 8020e3c:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8020e3e:	0409      	lsls	r1, r1, #16
 8020e40:	e7fb      	b.n	8020e3a <HAL_GPIO_WritePin+0x2>

08020e42 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8020e42:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8020e44:	ea01 0203 	and.w	r2, r1, r3
 8020e48:	ea21 0103 	bic.w	r1, r1, r3
 8020e4c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8020e50:	6181      	str	r1, [r0, #24]
}
 8020e52:	4770      	bx	lr

08020e54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8020e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020e58:	460d      	mov	r5, r1
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8020e5a:	4604      	mov	r4, r0
 8020e5c:	b910      	cbnz	r0, 8020e64 <HAL_RCC_ClockConfig+0x10>
  {
    return HAL_ERROR;
 8020e5e:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);

  return HAL_OK;
}
 8020e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8020e64:	4b44      	ldr	r3, [pc, #272]	; (8020f78 <HAL_RCC_ClockConfig+0x124>)
 8020e66:	681a      	ldr	r2, [r3, #0]
 8020e68:	f002 020f 	and.w	r2, r2, #15
 8020e6c:	428a      	cmp	r2, r1
 8020e6e:	d328      	bcc.n	8020ec2 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8020e70:	6822      	ldr	r2, [r4, #0]
 8020e72:	0797      	lsls	r7, r2, #30
 8020e74:	d42d      	bmi.n	8020ed2 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8020e76:	07d0      	lsls	r0, r2, #31
 8020e78:	d441      	bmi.n	8020efe <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8020e7a:	4b3f      	ldr	r3, [pc, #252]	; (8020f78 <HAL_RCC_ClockConfig+0x124>)
 8020e7c:	681a      	ldr	r2, [r3, #0]
 8020e7e:	f002 020f 	and.w	r2, r2, #15
 8020e82:	42aa      	cmp	r2, r5
 8020e84:	d866      	bhi.n	8020f54 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8020e86:	6822      	ldr	r2, [r4, #0]
 8020e88:	0751      	lsls	r1, r2, #29
 8020e8a:	d46c      	bmi.n	8020f66 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8020e8c:	0713      	lsls	r3, r2, #28
 8020e8e:	d507      	bpl.n	8020ea0 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8020e90:	4a3a      	ldr	r2, [pc, #232]	; (8020f7c <HAL_RCC_ClockConfig+0x128>)
 8020e92:	6921      	ldr	r1, [r4, #16]
 8020e94:	6893      	ldr	r3, [r2, #8]
 8020e96:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8020e9a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8020e9e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8020ea0:	f000 f894 	bl	8020fcc <HAL_RCC_GetSysClockFreq>
 8020ea4:	4b35      	ldr	r3, [pc, #212]	; (8020f7c <HAL_RCC_ClockConfig+0x128>)
 8020ea6:	4a36      	ldr	r2, [pc, #216]	; (8020f80 <HAL_RCC_ClockConfig+0x12c>)
 8020ea8:	689b      	ldr	r3, [r3, #8]
 8020eaa:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8020eae:	5cd3      	ldrb	r3, [r2, r3]
 8020eb0:	40d8      	lsrs	r0, r3
 8020eb2:	4b34      	ldr	r3, [pc, #208]	; (8020f84 <HAL_RCC_ClockConfig+0x130>)
 8020eb4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8020eb6:	4b34      	ldr	r3, [pc, #208]	; (8020f88 <HAL_RCC_ClockConfig+0x134>)
 8020eb8:	6818      	ldr	r0, [r3, #0]
 8020eba:	f7ff fdd5 	bl	8020a68 <HAL_InitTick>
  return HAL_OK;
 8020ebe:	2000      	movs	r0, #0
 8020ec0:	e7ce      	b.n	8020e60 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8020ec2:	b2ca      	uxtb	r2, r1
 8020ec4:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8020ec6:	681b      	ldr	r3, [r3, #0]
 8020ec8:	f003 030f 	and.w	r3, r3, #15
 8020ecc:	428b      	cmp	r3, r1
 8020ece:	d1c6      	bne.n	8020e5e <HAL_RCC_ClockConfig+0xa>
 8020ed0:	e7ce      	b.n	8020e70 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8020ed2:	4b2a      	ldr	r3, [pc, #168]	; (8020f7c <HAL_RCC_ClockConfig+0x128>)
 8020ed4:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8020ed8:	bf1e      	ittt	ne
 8020eda:	6899      	ldrne	r1, [r3, #8]
 8020edc:	f441 51e0 	orrne.w	r1, r1, #7168	; 0x1c00
 8020ee0:	6099      	strne	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8020ee2:	0716      	lsls	r6, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8020ee4:	bf42      	ittt	mi
 8020ee6:	6899      	ldrmi	r1, [r3, #8]
 8020ee8:	f441 4160 	orrmi.w	r1, r1, #57344	; 0xe000
 8020eec:	6099      	strmi	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8020eee:	4923      	ldr	r1, [pc, #140]	; (8020f7c <HAL_RCC_ClockConfig+0x128>)
 8020ef0:	68a0      	ldr	r0, [r4, #8]
 8020ef2:	688b      	ldr	r3, [r1, #8]
 8020ef4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8020ef8:	4303      	orrs	r3, r0
 8020efa:	608b      	str	r3, [r1, #8]
 8020efc:	e7bb      	b.n	8020e76 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8020efe:	6862      	ldr	r2, [r4, #4]
 8020f00:	4b1e      	ldr	r3, [pc, #120]	; (8020f7c <HAL_RCC_ClockConfig+0x128>)
 8020f02:	2a01      	cmp	r2, #1
 8020f04:	d11c      	bne.n	8020f40 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8020f06:	681b      	ldr	r3, [r3, #0]
 8020f08:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8020f0c:	d0a7      	beq.n	8020e5e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8020f0e:	4e1b      	ldr	r6, [pc, #108]	; (8020f7c <HAL_RCC_ClockConfig+0x128>)
 8020f10:	68b3      	ldr	r3, [r6, #8]
 8020f12:	f023 0303 	bic.w	r3, r3, #3
 8020f16:	4313      	orrs	r3, r2
 8020f18:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8020f1a:	f7ff fdef 	bl	8020afc <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8020f1e:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8020f22:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8020f24:	68b3      	ldr	r3, [r6, #8]
 8020f26:	6862      	ldr	r2, [r4, #4]
 8020f28:	f003 030c 	and.w	r3, r3, #12
 8020f2c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8020f30:	d0a3      	beq.n	8020e7a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8020f32:	f7ff fde3 	bl	8020afc <HAL_GetTick>
 8020f36:	1bc0      	subs	r0, r0, r7
 8020f38:	4540      	cmp	r0, r8
 8020f3a:	d9f3      	bls.n	8020f24 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8020f3c:	2003      	movs	r0, #3
 8020f3e:	e78f      	b.n	8020e60 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8020f40:	1e91      	subs	r1, r2, #2
 8020f42:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8020f44:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8020f46:	d802      	bhi.n	8020f4e <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8020f48:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8020f4c:	e7de      	b.n	8020f0c <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8020f4e:	f013 0f02 	tst.w	r3, #2
 8020f52:	e7db      	b.n	8020f0c <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8020f54:	b2ea      	uxtb	r2, r5
 8020f56:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8020f58:	681b      	ldr	r3, [r3, #0]
 8020f5a:	f003 030f 	and.w	r3, r3, #15
 8020f5e:	42ab      	cmp	r3, r5
 8020f60:	f47f af7d 	bne.w	8020e5e <HAL_RCC_ClockConfig+0xa>
 8020f64:	e78f      	b.n	8020e86 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8020f66:	4905      	ldr	r1, [pc, #20]	; (8020f7c <HAL_RCC_ClockConfig+0x128>)
 8020f68:	68e0      	ldr	r0, [r4, #12]
 8020f6a:	688b      	ldr	r3, [r1, #8]
 8020f6c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8020f70:	4303      	orrs	r3, r0
 8020f72:	608b      	str	r3, [r1, #8]
 8020f74:	e78a      	b.n	8020e8c <HAL_RCC_ClockConfig+0x38>
 8020f76:	bf00      	nop
 8020f78:	40023c00 	.word	0x40023c00
 8020f7c:	40023800 	.word	0x40023800
 8020f80:	0802291e 	.word	0x0802291e
 8020f84:	20000000 	.word	0x20000000
 8020f88:	20000008 	.word	0x20000008

08020f8c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8020f8c:	4b04      	ldr	r3, [pc, #16]	; (8020fa0 <HAL_RCC_GetPCLK1Freq+0x14>)
 8020f8e:	4a05      	ldr	r2, [pc, #20]	; (8020fa4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8020f90:	689b      	ldr	r3, [r3, #8]
 8020f92:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8020f96:	5cd3      	ldrb	r3, [r2, r3]
 8020f98:	4a03      	ldr	r2, [pc, #12]	; (8020fa8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8020f9a:	6810      	ldr	r0, [r2, #0]
}
 8020f9c:	40d8      	lsrs	r0, r3
 8020f9e:	4770      	bx	lr
 8020fa0:	40023800 	.word	0x40023800
 8020fa4:	0802292e 	.word	0x0802292e
 8020fa8:	20000000 	.word	0x20000000

08020fac <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8020fac:	4b04      	ldr	r3, [pc, #16]	; (8020fc0 <HAL_RCC_GetPCLK2Freq+0x14>)
 8020fae:	4a05      	ldr	r2, [pc, #20]	; (8020fc4 <HAL_RCC_GetPCLK2Freq+0x18>)
 8020fb0:	689b      	ldr	r3, [r3, #8]
 8020fb2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8020fb6:	5cd3      	ldrb	r3, [r2, r3]
 8020fb8:	4a03      	ldr	r2, [pc, #12]	; (8020fc8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8020fba:	6810      	ldr	r0, [r2, #0]
}
 8020fbc:	40d8      	lsrs	r0, r3
 8020fbe:	4770      	bx	lr
 8020fc0:	40023800 	.word	0x40023800
 8020fc4:	0802292e 	.word	0x0802292e
 8020fc8:	20000000 	.word	0x20000000

08020fcc <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8020fcc:	4920      	ldr	r1, [pc, #128]	; (8021050 <HAL_RCC_GetSysClockFreq+0x84>)
{
 8020fce:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8020fd0:	688b      	ldr	r3, [r1, #8]
 8020fd2:	f003 030c 	and.w	r3, r3, #12
 8020fd6:	2b08      	cmp	r3, #8
 8020fd8:	d007      	beq.n	8020fea <HAL_RCC_GetSysClockFreq+0x1e>
 8020fda:	2b0c      	cmp	r3, #12
 8020fdc:	d020      	beq.n	8021020 <HAL_RCC_GetSysClockFreq+0x54>
 8020fde:	481d      	ldr	r0, [pc, #116]	; (8021054 <HAL_RCC_GetSysClockFreq+0x88>)
 8020fe0:	4a1d      	ldr	r2, [pc, #116]	; (8021058 <HAL_RCC_GetSysClockFreq+0x8c>)
 8020fe2:	2b04      	cmp	r3, #4
 8020fe4:	bf08      	it	eq
 8020fe6:	4610      	moveq	r0, r2
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8020fe8:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8020fea:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8020fec:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8020fee:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8020ff0:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8020ff4:	bf14      	ite	ne
 8020ff6:	4818      	ldrne	r0, [pc, #96]	; (8021058 <HAL_RCC_GetSysClockFreq+0x8c>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8020ff8:	4816      	ldreq	r0, [pc, #88]	; (8021054 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8020ffa:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8020ffe:	bf18      	it	ne
 8021000:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8021002:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8021006:	fba1 0100 	umull	r0, r1, r1, r0
 802100a:	f7ff f951 	bl	80202b0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 802100e:	4b10      	ldr	r3, [pc, #64]	; (8021050 <HAL_RCC_GetSysClockFreq+0x84>)
 8021010:	685b      	ldr	r3, [r3, #4]
 8021012:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8021016:	3301      	adds	r3, #1
 8021018:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllr;
 802101a:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 802101e:	e7e3      	b.n	8020fe8 <HAL_RCC_GetSysClockFreq+0x1c>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8021020:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8021022:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8021024:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8021026:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 802102a:	bf14      	ite	ne
 802102c:	480a      	ldrne	r0, [pc, #40]	; (8021058 <HAL_RCC_GetSysClockFreq+0x8c>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 802102e:	4809      	ldreq	r0, [pc, #36]	; (8021054 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8021030:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8021034:	bf18      	it	ne
 8021036:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8021038:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 802103c:	fba1 0100 	umull	r0, r1, r1, r0
 8021040:	f7ff f936 	bl	80202b0 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8021044:	4b02      	ldr	r3, [pc, #8]	; (8021050 <HAL_RCC_GetSysClockFreq+0x84>)
 8021046:	685b      	ldr	r3, [r3, #4]
 8021048:	f3c3 7302 	ubfx	r3, r3, #28, #3
 802104c:	e7e5      	b.n	802101a <HAL_RCC_GetSysClockFreq+0x4e>
 802104e:	bf00      	nop
 8021050:	40023800 	.word	0x40023800
 8021054:	00f42400 	.word	0x00f42400
 8021058:	007a1200 	.word	0x007a1200

0802105c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 802105c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8021060:	4604      	mov	r4, r0
 8021062:	2800      	cmp	r0, #0
 8021064:	d030      	beq.n	80210c8 <HAL_RCC_OscConfig+0x6c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8021066:	6803      	ldr	r3, [r0, #0]
 8021068:	07df      	lsls	r7, r3, #31
 802106a:	d410      	bmi.n	802108e <HAL_RCC_OscConfig+0x32>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 802106c:	6823      	ldr	r3, [r4, #0]
 802106e:	079e      	lsls	r6, r3, #30
 8021070:	d463      	bmi.n	802113a <HAL_RCC_OscConfig+0xde>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8021072:	6823      	ldr	r3, [r4, #0]
 8021074:	071a      	lsls	r2, r3, #28
 8021076:	f100 80ad 	bmi.w	80211d4 <HAL_RCC_OscConfig+0x178>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 802107a:	6823      	ldr	r3, [r4, #0]
 802107c:	075b      	lsls	r3, r3, #29
 802107e:	f100 80cb 	bmi.w	8021218 <HAL_RCC_OscConfig+0x1bc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8021082:	69a0      	ldr	r0, [r4, #24]
 8021084:	2800      	cmp	r0, #0
 8021086:	f040 8135 	bne.w	80212f4 <HAL_RCC_OscConfig+0x298>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 802108a:	2000      	movs	r0, #0
 802108c:	e034      	b.n	80210f8 <HAL_RCC_OscConfig+0x9c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 802108e:	4b95      	ldr	r3, [pc, #596]	; (80212e4 <HAL_RCC_OscConfig+0x288>)
 8021090:	689a      	ldr	r2, [r3, #8]
 8021092:	f002 020c 	and.w	r2, r2, #12
 8021096:	2a04      	cmp	r2, #4
 8021098:	d00f      	beq.n	80210ba <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 802109a:	689a      	ldr	r2, [r3, #8]
 802109c:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80210a0:	2a08      	cmp	r2, #8
 80210a2:	d102      	bne.n	80210aa <HAL_RCC_OscConfig+0x4e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80210a4:	685a      	ldr	r2, [r3, #4]
 80210a6:	0255      	lsls	r5, r2, #9
 80210a8:	d407      	bmi.n	80210ba <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80210aa:	689a      	ldr	r2, [r3, #8]
 80210ac:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80210b0:	2a0c      	cmp	r2, #12
 80210b2:	d10b      	bne.n	80210cc <HAL_RCC_OscConfig+0x70>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80210b4:	685b      	ldr	r3, [r3, #4]
 80210b6:	0258      	lsls	r0, r3, #9
 80210b8:	d508      	bpl.n	80210cc <HAL_RCC_OscConfig+0x70>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80210ba:	4b8a      	ldr	r3, [pc, #552]	; (80212e4 <HAL_RCC_OscConfig+0x288>)
 80210bc:	681b      	ldr	r3, [r3, #0]
 80210be:	0399      	lsls	r1, r3, #14
 80210c0:	d5d4      	bpl.n	802106c <HAL_RCC_OscConfig+0x10>
 80210c2:	6863      	ldr	r3, [r4, #4]
 80210c4:	2b00      	cmp	r3, #0
 80210c6:	d1d1      	bne.n	802106c <HAL_RCC_OscConfig+0x10>
          return HAL_ERROR;
 80210c8:	2001      	movs	r0, #1
 80210ca:	e015      	b.n	80210f8 <HAL_RCC_OscConfig+0x9c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80210cc:	6863      	ldr	r3, [r4, #4]
 80210ce:	4d85      	ldr	r5, [pc, #532]	; (80212e4 <HAL_RCC_OscConfig+0x288>)
 80210d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80210d4:	d113      	bne.n	80210fe <HAL_RCC_OscConfig+0xa2>
 80210d6:	682b      	ldr	r3, [r5, #0]
 80210d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80210dc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80210de:	f7ff fd0d 	bl	8020afc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80210e2:	4e80      	ldr	r6, [pc, #512]	; (80212e4 <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 80210e4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80210e6:	6833      	ldr	r3, [r6, #0]
 80210e8:	039a      	lsls	r2, r3, #14
 80210ea:	d4bf      	bmi.n	802106c <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80210ec:	f7ff fd06 	bl	8020afc <HAL_GetTick>
 80210f0:	1b40      	subs	r0, r0, r5
 80210f2:	2864      	cmp	r0, #100	; 0x64
 80210f4:	d9f7      	bls.n	80210e6 <HAL_RCC_OscConfig+0x8a>
            return HAL_TIMEOUT;
 80210f6:	2003      	movs	r0, #3
}
 80210f8:	b002      	add	sp, #8
 80210fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80210fe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8021102:	d104      	bne.n	802110e <HAL_RCC_OscConfig+0xb2>
 8021104:	682b      	ldr	r3, [r5, #0]
 8021106:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 802110a:	602b      	str	r3, [r5, #0]
 802110c:	e7e3      	b.n	80210d6 <HAL_RCC_OscConfig+0x7a>
 802110e:	682a      	ldr	r2, [r5, #0]
 8021110:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8021114:	602a      	str	r2, [r5, #0]
 8021116:	682a      	ldr	r2, [r5, #0]
 8021118:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 802111c:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 802111e:	2b00      	cmp	r3, #0
 8021120:	d1dd      	bne.n	80210de <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8021122:	f7ff fceb 	bl	8020afc <HAL_GetTick>
 8021126:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8021128:	682b      	ldr	r3, [r5, #0]
 802112a:	039b      	lsls	r3, r3, #14
 802112c:	d59e      	bpl.n	802106c <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 802112e:	f7ff fce5 	bl	8020afc <HAL_GetTick>
 8021132:	1b80      	subs	r0, r0, r6
 8021134:	2864      	cmp	r0, #100	; 0x64
 8021136:	d9f7      	bls.n	8021128 <HAL_RCC_OscConfig+0xcc>
 8021138:	e7dd      	b.n	80210f6 <HAL_RCC_OscConfig+0x9a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 802113a:	4b6a      	ldr	r3, [pc, #424]	; (80212e4 <HAL_RCC_OscConfig+0x288>)
 802113c:	689a      	ldr	r2, [r3, #8]
 802113e:	f012 0f0c 	tst.w	r2, #12
 8021142:	d00f      	beq.n	8021164 <HAL_RCC_OscConfig+0x108>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8021144:	689a      	ldr	r2, [r3, #8]
 8021146:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 802114a:	2a08      	cmp	r2, #8
 802114c:	d102      	bne.n	8021154 <HAL_RCC_OscConfig+0xf8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 802114e:	685a      	ldr	r2, [r3, #4]
 8021150:	0257      	lsls	r7, r2, #9
 8021152:	d507      	bpl.n	8021164 <HAL_RCC_OscConfig+0x108>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8021154:	689a      	ldr	r2, [r3, #8]
 8021156:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 802115a:	2a0c      	cmp	r2, #12
 802115c:	d111      	bne.n	8021182 <HAL_RCC_OscConfig+0x126>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 802115e:	685b      	ldr	r3, [r3, #4]
 8021160:	025e      	lsls	r6, r3, #9
 8021162:	d40e      	bmi.n	8021182 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8021164:	4b5f      	ldr	r3, [pc, #380]	; (80212e4 <HAL_RCC_OscConfig+0x288>)
 8021166:	681a      	ldr	r2, [r3, #0]
 8021168:	0795      	lsls	r5, r2, #30
 802116a:	d502      	bpl.n	8021172 <HAL_RCC_OscConfig+0x116>
 802116c:	68e2      	ldr	r2, [r4, #12]
 802116e:	2a01      	cmp	r2, #1
 8021170:	d1aa      	bne.n	80210c8 <HAL_RCC_OscConfig+0x6c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8021172:	681a      	ldr	r2, [r3, #0]
 8021174:	6921      	ldr	r1, [r4, #16]
 8021176:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 802117a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 802117e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8021180:	e777      	b.n	8021072 <HAL_RCC_OscConfig+0x16>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8021182:	68e2      	ldr	r2, [r4, #12]
 8021184:	4b58      	ldr	r3, [pc, #352]	; (80212e8 <HAL_RCC_OscConfig+0x28c>)
 8021186:	b1b2      	cbz	r2, 80211b6 <HAL_RCC_OscConfig+0x15a>
        __HAL_RCC_HSI_ENABLE();
 8021188:	2201      	movs	r2, #1
 802118a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 802118c:	f7ff fcb6 	bl	8020afc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8021190:	4d54      	ldr	r5, [pc, #336]	; (80212e4 <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 8021192:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8021194:	682b      	ldr	r3, [r5, #0]
 8021196:	0798      	lsls	r0, r3, #30
 8021198:	d507      	bpl.n	80211aa <HAL_RCC_OscConfig+0x14e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 802119a:	682b      	ldr	r3, [r5, #0]
 802119c:	6922      	ldr	r2, [r4, #16]
 802119e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80211a2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80211a6:	602b      	str	r3, [r5, #0]
 80211a8:	e763      	b.n	8021072 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80211aa:	f7ff fca7 	bl	8020afc <HAL_GetTick>
 80211ae:	1b80      	subs	r0, r0, r6
 80211b0:	2802      	cmp	r0, #2
 80211b2:	d9ef      	bls.n	8021194 <HAL_RCC_OscConfig+0x138>
 80211b4:	e79f      	b.n	80210f6 <HAL_RCC_OscConfig+0x9a>
        __HAL_RCC_HSI_DISABLE();
 80211b6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80211b8:	f7ff fca0 	bl	8020afc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80211bc:	4e49      	ldr	r6, [pc, #292]	; (80212e4 <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 80211be:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80211c0:	6833      	ldr	r3, [r6, #0]
 80211c2:	0799      	lsls	r1, r3, #30
 80211c4:	f57f af55 	bpl.w	8021072 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80211c8:	f7ff fc98 	bl	8020afc <HAL_GetTick>
 80211cc:	1b40      	subs	r0, r0, r5
 80211ce:	2802      	cmp	r0, #2
 80211d0:	d9f6      	bls.n	80211c0 <HAL_RCC_OscConfig+0x164>
 80211d2:	e790      	b.n	80210f6 <HAL_RCC_OscConfig+0x9a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80211d4:	6962      	ldr	r2, [r4, #20]
 80211d6:	4b45      	ldr	r3, [pc, #276]	; (80212ec <HAL_RCC_OscConfig+0x290>)
 80211d8:	b17a      	cbz	r2, 80211fa <HAL_RCC_OscConfig+0x19e>
      __HAL_RCC_LSI_ENABLE();
 80211da:	2201      	movs	r2, #1
 80211dc:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80211de:	f7ff fc8d 	bl	8020afc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80211e2:	4e40      	ldr	r6, [pc, #256]	; (80212e4 <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 80211e4:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80211e6:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80211e8:	079f      	lsls	r7, r3, #30
 80211ea:	f53f af46 	bmi.w	802107a <HAL_RCC_OscConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80211ee:	f7ff fc85 	bl	8020afc <HAL_GetTick>
 80211f2:	1b40      	subs	r0, r0, r5
 80211f4:	2802      	cmp	r0, #2
 80211f6:	d9f6      	bls.n	80211e6 <HAL_RCC_OscConfig+0x18a>
 80211f8:	e77d      	b.n	80210f6 <HAL_RCC_OscConfig+0x9a>
      __HAL_RCC_LSI_DISABLE();
 80211fa:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80211fc:	f7ff fc7e 	bl	8020afc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8021200:	4e38      	ldr	r6, [pc, #224]	; (80212e4 <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 8021202:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8021204:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8021206:	0798      	lsls	r0, r3, #30
 8021208:	f57f af37 	bpl.w	802107a <HAL_RCC_OscConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 802120c:	f7ff fc76 	bl	8020afc <HAL_GetTick>
 8021210:	1b40      	subs	r0, r0, r5
 8021212:	2802      	cmp	r0, #2
 8021214:	d9f6      	bls.n	8021204 <HAL_RCC_OscConfig+0x1a8>
 8021216:	e76e      	b.n	80210f6 <HAL_RCC_OscConfig+0x9a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8021218:	4b32      	ldr	r3, [pc, #200]	; (80212e4 <HAL_RCC_OscConfig+0x288>)
 802121a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 802121c:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8021220:	d128      	bne.n	8021274 <HAL_RCC_OscConfig+0x218>
      __HAL_RCC_PWR_CLK_ENABLE();
 8021222:	9201      	str	r2, [sp, #4]
 8021224:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8021226:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 802122a:	641a      	str	r2, [r3, #64]	; 0x40
 802122c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802122e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8021232:	9301      	str	r3, [sp, #4]
 8021234:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8021236:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8021238:	4d2d      	ldr	r5, [pc, #180]	; (80212f0 <HAL_RCC_OscConfig+0x294>)
 802123a:	682b      	ldr	r3, [r5, #0]
 802123c:	05d9      	lsls	r1, r3, #23
 802123e:	d51b      	bpl.n	8021278 <HAL_RCC_OscConfig+0x21c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8021240:	68a3      	ldr	r3, [r4, #8]
 8021242:	4d28      	ldr	r5, [pc, #160]	; (80212e4 <HAL_RCC_OscConfig+0x288>)
 8021244:	2b01      	cmp	r3, #1
 8021246:	d127      	bne.n	8021298 <HAL_RCC_OscConfig+0x23c>
 8021248:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 802124a:	f043 0301 	orr.w	r3, r3, #1
 802124e:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8021250:	f7ff fc54 	bl	8020afc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8021254:	4e23      	ldr	r6, [pc, #140]	; (80212e4 <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 8021256:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8021258:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 802125c:	6f33      	ldr	r3, [r6, #112]	; 0x70
 802125e:	079b      	lsls	r3, r3, #30
 8021260:	d539      	bpl.n	80212d6 <HAL_RCC_OscConfig+0x27a>
    if(pwrclkchanged == SET)
 8021262:	2f00      	cmp	r7, #0
 8021264:	f43f af0d 	beq.w	8021082 <HAL_RCC_OscConfig+0x26>
      __HAL_RCC_PWR_CLK_DISABLE();
 8021268:	4a1e      	ldr	r2, [pc, #120]	; (80212e4 <HAL_RCC_OscConfig+0x288>)
 802126a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 802126c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8021270:	6413      	str	r3, [r2, #64]	; 0x40
 8021272:	e706      	b.n	8021082 <HAL_RCC_OscConfig+0x26>
    FlagStatus       pwrclkchanged = RESET;
 8021274:	2700      	movs	r7, #0
 8021276:	e7df      	b.n	8021238 <HAL_RCC_OscConfig+0x1dc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8021278:	682b      	ldr	r3, [r5, #0]
 802127a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802127e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8021280:	f7ff fc3c 	bl	8020afc <HAL_GetTick>
 8021284:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8021286:	682b      	ldr	r3, [r5, #0]
 8021288:	05da      	lsls	r2, r3, #23
 802128a:	d4d9      	bmi.n	8021240 <HAL_RCC_OscConfig+0x1e4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 802128c:	f7ff fc36 	bl	8020afc <HAL_GetTick>
 8021290:	1b80      	subs	r0, r0, r6
 8021292:	2802      	cmp	r0, #2
 8021294:	d9f7      	bls.n	8021286 <HAL_RCC_OscConfig+0x22a>
 8021296:	e72e      	b.n	80210f6 <HAL_RCC_OscConfig+0x9a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8021298:	2b05      	cmp	r3, #5
 802129a:	d104      	bne.n	80212a6 <HAL_RCC_OscConfig+0x24a>
 802129c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 802129e:	f043 0304 	orr.w	r3, r3, #4
 80212a2:	672b      	str	r3, [r5, #112]	; 0x70
 80212a4:	e7d0      	b.n	8021248 <HAL_RCC_OscConfig+0x1ec>
 80212a6:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80212a8:	f022 0201 	bic.w	r2, r2, #1
 80212ac:	672a      	str	r2, [r5, #112]	; 0x70
 80212ae:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80212b0:	f022 0204 	bic.w	r2, r2, #4
 80212b4:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80212b6:	2b00      	cmp	r3, #0
 80212b8:	d1ca      	bne.n	8021250 <HAL_RCC_OscConfig+0x1f4>
      tickstart = HAL_GetTick();
 80212ba:	f7ff fc1f 	bl	8020afc <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80212be:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80212c2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80212c4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80212c6:	0798      	lsls	r0, r3, #30
 80212c8:	d5cb      	bpl.n	8021262 <HAL_RCC_OscConfig+0x206>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80212ca:	f7ff fc17 	bl	8020afc <HAL_GetTick>
 80212ce:	1b80      	subs	r0, r0, r6
 80212d0:	4540      	cmp	r0, r8
 80212d2:	d9f7      	bls.n	80212c4 <HAL_RCC_OscConfig+0x268>
 80212d4:	e70f      	b.n	80210f6 <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80212d6:	f7ff fc11 	bl	8020afc <HAL_GetTick>
 80212da:	1b40      	subs	r0, r0, r5
 80212dc:	4540      	cmp	r0, r8
 80212de:	d9bd      	bls.n	802125c <HAL_RCC_OscConfig+0x200>
 80212e0:	e709      	b.n	80210f6 <HAL_RCC_OscConfig+0x9a>
 80212e2:	bf00      	nop
 80212e4:	40023800 	.word	0x40023800
 80212e8:	42470000 	.word	0x42470000
 80212ec:	42470e80 	.word	0x42470e80
 80212f0:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80212f4:	4d3a      	ldr	r5, [pc, #232]	; (80213e0 <HAL_RCC_OscConfig+0x384>)
 80212f6:	68ab      	ldr	r3, [r5, #8]
 80212f8:	f003 030c 	and.w	r3, r3, #12
 80212fc:	2b08      	cmp	r3, #8
 80212fe:	d03f      	beq.n	8021380 <HAL_RCC_OscConfig+0x324>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8021300:	4e38      	ldr	r6, [pc, #224]	; (80213e4 <HAL_RCC_OscConfig+0x388>)
 8021302:	2300      	movs	r3, #0
 8021304:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8021306:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8021308:	d12d      	bne.n	8021366 <HAL_RCC_OscConfig+0x30a>
        tickstart = HAL_GetTick();
 802130a:	f7ff fbf7 	bl	8020afc <HAL_GetTick>
 802130e:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8021310:	682b      	ldr	r3, [r5, #0]
 8021312:	0199      	lsls	r1, r3, #6
 8021314:	d421      	bmi.n	802135a <HAL_RCC_OscConfig+0x2fe>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8021316:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 802131a:	4313      	orrs	r3, r2
 802131c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 802131e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8021322:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8021324:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8021328:	6b22      	ldr	r2, [r4, #48]	; 0x30
 802132a:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 802132e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8021330:	0852      	lsrs	r2, r2, #1
 8021332:	3a01      	subs	r2, #1
 8021334:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8021338:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 802133a:	2301      	movs	r3, #1
 802133c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 802133e:	f7ff fbdd 	bl	8020afc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8021342:	4d27      	ldr	r5, [pc, #156]	; (80213e0 <HAL_RCC_OscConfig+0x384>)
        tickstart = HAL_GetTick();
 8021344:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8021346:	682b      	ldr	r3, [r5, #0]
 8021348:	019a      	lsls	r2, r3, #6
 802134a:	f53f ae9e 	bmi.w	802108a <HAL_RCC_OscConfig+0x2e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 802134e:	f7ff fbd5 	bl	8020afc <HAL_GetTick>
 8021352:	1b00      	subs	r0, r0, r4
 8021354:	2802      	cmp	r0, #2
 8021356:	d9f6      	bls.n	8021346 <HAL_RCC_OscConfig+0x2ea>
 8021358:	e6cd      	b.n	80210f6 <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 802135a:	f7ff fbcf 	bl	8020afc <HAL_GetTick>
 802135e:	1bc0      	subs	r0, r0, r7
 8021360:	2802      	cmp	r0, #2
 8021362:	d9d5      	bls.n	8021310 <HAL_RCC_OscConfig+0x2b4>
 8021364:	e6c7      	b.n	80210f6 <HAL_RCC_OscConfig+0x9a>
        tickstart = HAL_GetTick();
 8021366:	f7ff fbc9 	bl	8020afc <HAL_GetTick>
 802136a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 802136c:	682b      	ldr	r3, [r5, #0]
 802136e:	019b      	lsls	r3, r3, #6
 8021370:	f57f ae8b 	bpl.w	802108a <HAL_RCC_OscConfig+0x2e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8021374:	f7ff fbc2 	bl	8020afc <HAL_GetTick>
 8021378:	1b00      	subs	r0, r0, r4
 802137a:	2802      	cmp	r0, #2
 802137c:	d9f6      	bls.n	802136c <HAL_RCC_OscConfig+0x310>
 802137e:	e6ba      	b.n	80210f6 <HAL_RCC_OscConfig+0x9a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8021380:	2801      	cmp	r0, #1
 8021382:	f43f aeb9 	beq.w	80210f8 <HAL_RCC_OscConfig+0x9c>
        pll_config = RCC->PLLCFGR;
 8021386:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8021388:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 802138a:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 802138e:	4291      	cmp	r1, r2
 8021390:	f47f ae9a 	bne.w	80210c8 <HAL_RCC_OscConfig+0x6c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8021394:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8021396:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 802139a:	428a      	cmp	r2, r1
 802139c:	f47f ae94 	bne.w	80210c8 <HAL_RCC_OscConfig+0x6c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80213a0:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80213a2:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80213a6:	401a      	ands	r2, r3
 80213a8:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80213ac:	f47f ae8c 	bne.w	80210c8 <HAL_RCC_OscConfig+0x6c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80213b0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80213b2:	0852      	lsrs	r2, r2, #1
 80213b4:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 80213b8:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80213ba:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80213be:	f47f ae83 	bne.w	80210c8 <HAL_RCC_OscConfig+0x6c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80213c2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80213c4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80213c8:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 80213cc:	f47f ae7c 	bne.w	80210c8 <HAL_RCC_OscConfig+0x6c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80213d0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80213d2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80213d6:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 80213da:	f43f ae56 	beq.w	802108a <HAL_RCC_OscConfig+0x2e>
 80213de:	e673      	b.n	80210c8 <HAL_RCC_OscConfig+0x6c>
 80213e0:	40023800 	.word	0x40023800
 80213e4:	42470060 	.word	0x42470060

080213e8 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80213e8:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80213ea:	f102 030c 	add.w	r3, r2, #12
 80213ee:	e853 3f00 	ldrex	r3, [r3]
 80213f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80213f6:	320c      	adds	r2, #12
 80213f8:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 80213fc:	6802      	ldr	r2, [r0, #0]
 80213fe:	2900      	cmp	r1, #0
 8021400:	d1f2      	bne.n	80213e8 <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021402:	f102 0314 	add.w	r3, r2, #20
 8021406:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802140a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802140e:	f102 0c14 	add.w	ip, r2, #20
 8021412:	e84c 3100 	strex	r1, r3, [ip]
 8021416:	2900      	cmp	r1, #0
 8021418:	d1f3      	bne.n	8021402 <UART_EndRxTransfer+0x1a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 802141a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 802141c:	2b01      	cmp	r3, #1
 802141e:	d10b      	bne.n	8021438 <UART_EndRxTransfer+0x50>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021420:	f102 030c 	add.w	r3, r2, #12
 8021424:	e853 3f00 	ldrex	r3, [r3]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8021428:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802142c:	f102 0c0c 	add.w	ip, r2, #12
 8021430:	e84c 3100 	strex	r1, r3, [ip]
 8021434:	2900      	cmp	r1, #0
 8021436:	d1f3      	bne.n	8021420 <UART_EndRxTransfer+0x38>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8021438:	2320      	movs	r3, #32
 802143a:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802143e:	2300      	movs	r3, #0
 8021440:	6303      	str	r3, [r0, #48]	; 0x30
}
 8021442:	4770      	bx	lr

08021444 <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8021444:	6802      	ldr	r2, [r0, #0]
 8021446:	68c1      	ldr	r1, [r0, #12]
{
 8021448:	b538      	push	{r3, r4, r5, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 802144a:	6913      	ldr	r3, [r2, #16]
 802144c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8021450:	430b      	orrs	r3, r1
 8021452:	6113      	str	r3, [r2, #16]
{
 8021454:	4605      	mov	r5, r0
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8021456:	6883      	ldr	r3, [r0, #8]
 8021458:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 802145a:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 802145c:	4303      	orrs	r3, r0
 802145e:	6968      	ldr	r0, [r5, #20]
 8021460:	4303      	orrs	r3, r0
 8021462:	69e8      	ldr	r0, [r5, #28]
  MODIFY_REG(huart->Instance->CR1,
 8021464:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 8021468:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 802146c:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 802146e:	430b      	orrs	r3, r1
 8021470:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8021472:	6953      	ldr	r3, [r2, #20]
 8021474:	69a9      	ldr	r1, [r5, #24]
 8021476:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802147a:	430b      	orrs	r3, r1
 802147c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 802147e:	4b1f      	ldr	r3, [pc, #124]	; (80214fc <UART_SetConfig+0xb8>)
 8021480:	429a      	cmp	r2, r3
 8021482:	d003      	beq.n	802148c <UART_SetConfig+0x48>
 8021484:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8021488:	429a      	cmp	r2, r3
 802148a:	d124      	bne.n	80214d6 <UART_SetConfig+0x92>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 802148c:	f7ff fd8e 	bl	8020fac <HAL_RCC_GetPCLK2Freq>
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8021490:	69ea      	ldr	r2, [r5, #28]
 8021492:	2319      	movs	r3, #25
 8021494:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8021498:	fba0 0103 	umull	r0, r1, r0, r3
 802149c:	e9d5 4300 	ldrd	r4, r3, [r5]
 80214a0:	d11c      	bne.n	80214dc <UART_SetConfig+0x98>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80214a2:	461a      	mov	r2, r3
 80214a4:	1892      	adds	r2, r2, r2
 80214a6:	f04f 0300 	mov.w	r3, #0
 80214aa:	415b      	adcs	r3, r3
 80214ac:	f7fe ff00 	bl	80202b0 <__aeabi_uldivmod>
 80214b0:	2164      	movs	r1, #100	; 0x64
 80214b2:	fbb0 f5f1 	udiv	r5, r0, r1
 80214b6:	fb01 0315 	mls	r3, r1, r5, r0
 80214ba:	00db      	lsls	r3, r3, #3
 80214bc:	3332      	adds	r3, #50	; 0x32
 80214be:	fbb3 f3f1 	udiv	r3, r3, r1
 80214c2:	f003 0207 	and.w	r2, r3, #7
 80214c6:	005b      	lsls	r3, r3, #1
 80214c8:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 80214cc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80214d0:	4413      	add	r3, r2
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80214d2:	60a3      	str	r3, [r4, #8]
  }
}
 80214d4:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 80214d6:	f7ff fd59 	bl	8020f8c <HAL_RCC_GetPCLK1Freq>
 80214da:	e7d9      	b.n	8021490 <UART_SetConfig+0x4c>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80214dc:	009a      	lsls	r2, r3, #2
 80214de:	0f9b      	lsrs	r3, r3, #30
 80214e0:	f7fe fee6 	bl	80202b0 <__aeabi_uldivmod>
 80214e4:	2264      	movs	r2, #100	; 0x64
 80214e6:	fbb0 f1f2 	udiv	r1, r0, r2
 80214ea:	fb02 0311 	mls	r3, r2, r1, r0
 80214ee:	011b      	lsls	r3, r3, #4
 80214f0:	3332      	adds	r3, #50	; 0x32
 80214f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80214f6:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80214fa:	e7ea      	b.n	80214d2 <UART_SetConfig+0x8e>
 80214fc:	40011000 	.word	0x40011000

08021500 <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 8021500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021502:	4604      	mov	r4, r0
 8021504:	460e      	mov	r6, r1
 8021506:	4617      	mov	r7, r2
 8021508:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 802150a:	6822      	ldr	r2, [r4, #0]
 802150c:	6813      	ldr	r3, [r2, #0]
 802150e:	ea36 0303 	bics.w	r3, r6, r3
 8021512:	d101      	bne.n	8021518 <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 8021514:	2000      	movs	r0, #0
 8021516:	e028      	b.n	802156a <UART_WaitOnFlagUntilTimeout.constprop.0+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 8021518:	1c6b      	adds	r3, r5, #1
 802151a:	d0f7      	beq.n	802150c <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 802151c:	b125      	cbz	r5, 8021528 <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
 802151e:	f7ff faed 	bl	8020afc <HAL_GetTick>
 8021522:	1bc0      	subs	r0, r0, r7
 8021524:	4285      	cmp	r5, r0
 8021526:	d2f0      	bcs.n	802150a <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8021528:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802152a:	f102 030c 	add.w	r3, r2, #12
 802152e:	e853 3f00 	ldrex	r3, [r3]
 8021532:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021536:	320c      	adds	r2, #12
 8021538:	e842 3000 	strex	r0, r3, [r2]
   return(result);
 802153c:	6821      	ldr	r1, [r4, #0]
 802153e:	2800      	cmp	r0, #0
 8021540:	d1f2      	bne.n	8021528 <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021542:	f101 0314 	add.w	r3, r1, #20
 8021546:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802154a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802154e:	f101 0014 	add.w	r0, r1, #20
 8021552:	e840 3200 	strex	r2, r3, [r0]
 8021556:	2a00      	cmp	r2, #0
 8021558:	d1f3      	bne.n	8021542 <UART_WaitOnFlagUntilTimeout.constprop.0+0x42>
        huart->gState  = HAL_UART_STATE_READY;
 802155a:	2320      	movs	r3, #32
 802155c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        __HAL_UNLOCK(huart);
 8021560:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        huart->RxState = HAL_UART_STATE_READY;
 8021564:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 8021568:	2003      	movs	r0, #3
}
 802156a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0802156c <HAL_UART_Init>:
{
 802156c:	b510      	push	{r4, lr}
  if (huart == NULL)
 802156e:	4604      	mov	r4, r0
 8021570:	b340      	cbz	r0, 80215c4 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8021572:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8021576:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 802157a:	b91b      	cbnz	r3, 8021584 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 802157c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8021580:	f7ff f96c 	bl	802085c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8021584:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8021586:	2324      	movs	r3, #36	; 0x24
 8021588:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 802158c:	68d3      	ldr	r3, [r2, #12]
 802158e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8021592:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8021594:	4620      	mov	r0, r4
 8021596:	f7ff ff55 	bl	8021444 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 802159a:	6823      	ldr	r3, [r4, #0]
 802159c:	691a      	ldr	r2, [r3, #16]
 802159e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80215a2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80215a4:	695a      	ldr	r2, [r3, #20]
 80215a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80215aa:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80215ac:	68da      	ldr	r2, [r3, #12]
 80215ae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80215b2:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80215b4:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80215b6:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80215b8:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80215ba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80215be:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 80215c2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80215c4:	2001      	movs	r0, #1
 80215c6:	e7fc      	b.n	80215c2 <HAL_UART_Init+0x56>

080215c8 <HAL_UART_Transmit>:
{
 80215c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80215ca:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80215cc:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
{
 80215d0:	9300      	str	r3, [sp, #0]
  if (huart->gState == HAL_UART_STATE_READY)
 80215d2:	2a20      	cmp	r2, #32
{
 80215d4:	4604      	mov	r4, r0
 80215d6:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 80215d8:	d149      	bne.n	802166e <HAL_UART_Transmit+0xa6>
    if ((pData == NULL) || (Size == 0U))
 80215da:	2900      	cmp	r1, #0
 80215dc:	d045      	beq.n	802166a <HAL_UART_Transmit+0xa2>
 80215de:	2f00      	cmp	r7, #0
 80215e0:	d043      	beq.n	802166a <HAL_UART_Transmit+0xa2>
    __HAL_LOCK(huart);
 80215e2:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 80215e6:	2a01      	cmp	r2, #1
 80215e8:	d041      	beq.n	802166e <HAL_UART_Transmit+0xa6>
 80215ea:	2201      	movs	r2, #1
 80215ec:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80215f0:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80215f2:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80215f4:	6405      	str	r5, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80215f6:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 80215fa:	f7ff fa7f 	bl	8020afc <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80215fe:	68a1      	ldr	r1, [r4, #8]
 8021600:	9b00      	ldr	r3, [sp, #0]
    huart->TxXferSize = Size;
 8021602:	84a7      	strh	r7, [r4, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8021604:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8021608:	4602      	mov	r2, r0
    huart->TxXferCount = Size;
 802160a:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 802160c:	d103      	bne.n	8021616 <HAL_UART_Transmit+0x4e>
 802160e:	6921      	ldr	r1, [r4, #16]
 8021610:	b909      	cbnz	r1, 8021616 <HAL_UART_Transmit+0x4e>
 8021612:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8021614:	460e      	mov	r6, r1
    __HAL_UNLOCK(huart);
 8021616:	2100      	movs	r1, #0
 8021618:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 802161c:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 802161e:	b289      	uxth	r1, r1
 8021620:	b941      	cbnz	r1, 8021634 <HAL_UART_Transmit+0x6c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8021622:	2140      	movs	r1, #64	; 0x40
 8021624:	4620      	mov	r0, r4
 8021626:	f7ff ff6b 	bl	8021500 <UART_WaitOnFlagUntilTimeout.constprop.0>
 802162a:	b960      	cbnz	r0, 8021646 <HAL_UART_Transmit+0x7e>
    huart->gState = HAL_UART_STATE_READY;
 802162c:	2320      	movs	r3, #32
 802162e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 8021632:	e009      	b.n	8021648 <HAL_UART_Transmit+0x80>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8021634:	2180      	movs	r1, #128	; 0x80
 8021636:	4620      	mov	r0, r4
 8021638:	e9cd 2300 	strd	r2, r3, [sp]
 802163c:	f7ff ff60 	bl	8021500 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8021640:	e9dd 2300 	ldrd	r2, r3, [sp]
 8021644:	b110      	cbz	r0, 802164c <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 8021646:	2003      	movs	r0, #3
}
 8021648:	b003      	add	sp, #12
 802164a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (pdata8bits == NULL)
 802164c:	6820      	ldr	r0, [r4, #0]
 802164e:	b94e      	cbnz	r6, 8021664 <HAL_UART_Transmit+0x9c>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8021650:	f835 1b02 	ldrh.w	r1, [r5], #2
 8021654:	f3c1 0108 	ubfx	r1, r1, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8021658:	6041      	str	r1, [r0, #4]
      huart->TxXferCount--;
 802165a:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 802165c:	3901      	subs	r1, #1
 802165e:	b289      	uxth	r1, r1
 8021660:	84e1      	strh	r1, [r4, #38]	; 0x26
 8021662:	e7db      	b.n	802161c <HAL_UART_Transmit+0x54>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8021664:	f816 1b01 	ldrb.w	r1, [r6], #1
 8021668:	e7f6      	b.n	8021658 <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 802166a:	2001      	movs	r0, #1
 802166c:	e7ec      	b.n	8021648 <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 802166e:	2002      	movs	r0, #2
 8021670:	e7ea      	b.n	8021648 <HAL_UART_Transmit+0x80>

08021672 <HAL_UART_TxCpltCallback>:
 8021672:	4770      	bx	lr

08021674 <HAL_UART_RxCpltCallback>:
 8021674:	4770      	bx	lr

08021676 <HAL_UART_ErrorCallback>:
 8021676:	4770      	bx	lr

08021678 <UART_DMAAbortOnError>:
{
 8021678:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 802167a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 802167c:	2300      	movs	r3, #0
 802167e:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8021680:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8021682:	f7ff fff8 	bl	8021676 <HAL_UART_ErrorCallback>
}
 8021686:	bd08      	pop	{r3, pc}

08021688 <HAL_UARTEx_RxEventCallback>:
}
 8021688:	4770      	bx	lr

0802168a <UART_Receive_IT>:
{
 802168a:	b513      	push	{r0, r1, r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 802168c:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8021690:	2b22      	cmp	r3, #34	; 0x22
 8021692:	d153      	bne.n	802173c <UART_Receive_IT+0xb2>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8021694:	6881      	ldr	r1, [r0, #8]
 8021696:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8021698:	6802      	ldr	r2, [r0, #0]
 802169a:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 802169e:	d13d      	bne.n	802171c <UART_Receive_IT+0x92>
 80216a0:	6901      	ldr	r1, [r0, #16]
 80216a2:	2900      	cmp	r1, #0
 80216a4:	d13d      	bne.n	8021722 <UART_Receive_IT+0x98>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80216a6:	6852      	ldr	r2, [r2, #4]
 80216a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80216ac:	f823 2b02 	strh.w	r2, [r3], #2
    if (--huart->RxXferCount == 0U)
 80216b0:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
      huart->pRxBuffPtr += 1U;
 80216b2:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 80216b4:	3c01      	subs	r4, #1
 80216b6:	b2a4      	uxth	r4, r4
 80216b8:	85c4      	strh	r4, [r0, #46]	; 0x2e
 80216ba:	2c00      	cmp	r4, #0
 80216bc:	d12c      	bne.n	8021718 <UART_Receive_IT+0x8e>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80216be:	6803      	ldr	r3, [r0, #0]
 80216c0:	68da      	ldr	r2, [r3, #12]
 80216c2:	f022 0220 	bic.w	r2, r2, #32
 80216c6:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80216c8:	68da      	ldr	r2, [r3, #12]
 80216ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80216ce:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80216d0:	695a      	ldr	r2, [r3, #20]
 80216d2:	f022 0201 	bic.w	r2, r2, #1
 80216d6:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80216d8:	2320      	movs	r3, #32
 80216da:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80216de:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80216e0:	2b01      	cmp	r3, #1
 80216e2:	6803      	ldr	r3, [r0, #0]
 80216e4:	d127      	bne.n	8021736 <UART_Receive_IT+0xac>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80216e6:	6304      	str	r4, [r0, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80216e8:	f103 020c 	add.w	r2, r3, #12
 80216ec:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80216f0:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80216f4:	f103 040c 	add.w	r4, r3, #12
 80216f8:	e844 2100 	strex	r1, r2, [r4]
 80216fc:	2900      	cmp	r1, #0
 80216fe:	d1f3      	bne.n	80216e8 <UART_Receive_IT+0x5e>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8021700:	681a      	ldr	r2, [r3, #0]
 8021702:	06d2      	lsls	r2, r2, #27
 8021704:	d505      	bpl.n	8021712 <UART_Receive_IT+0x88>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8021706:	9101      	str	r1, [sp, #4]
 8021708:	681a      	ldr	r2, [r3, #0]
 802170a:	9201      	str	r2, [sp, #4]
 802170c:	685b      	ldr	r3, [r3, #4]
 802170e:	9301      	str	r3, [sp, #4]
 8021710:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8021712:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8021714:	f7ff ffb8 	bl	8021688 <HAL_UARTEx_RxEventCallback>
 8021718:	2000      	movs	r0, #0
 802171a:	e010      	b.n	802173e <UART_Receive_IT+0xb4>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 802171c:	b939      	cbnz	r1, 802172e <UART_Receive_IT+0xa4>
 802171e:	6901      	ldr	r1, [r0, #16]
 8021720:	b929      	cbnz	r1, 802172e <UART_Receive_IT+0xa4>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8021722:	6852      	ldr	r2, [r2, #4]
 8021724:	b2d2      	uxtb	r2, r2
 8021726:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr += 1U;
 8021728:	6a83      	ldr	r3, [r0, #40]	; 0x28
 802172a:	3301      	adds	r3, #1
 802172c:	e7c0      	b.n	80216b0 <UART_Receive_IT+0x26>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 802172e:	6852      	ldr	r2, [r2, #4]
 8021730:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8021734:	e7f7      	b.n	8021726 <UART_Receive_IT+0x9c>
        HAL_UART_RxCpltCallback(huart);
 8021736:	f7ff ff9d 	bl	8021674 <HAL_UART_RxCpltCallback>
 802173a:	e7ed      	b.n	8021718 <UART_Receive_IT+0x8e>
    return HAL_BUSY;
 802173c:	2002      	movs	r0, #2
}
 802173e:	b002      	add	sp, #8
 8021740:	bd10      	pop	{r4, pc}
	...

08021744 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8021744:	6803      	ldr	r3, [r0, #0]
{
 8021746:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8021748:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 802174a:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 802174c:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 802174e:	f012 0f0f 	tst.w	r2, #15
{
 8021752:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8021754:	d108      	bne.n	8021768 <HAL_UART_IRQHandler+0x24>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8021756:	0695      	lsls	r5, r2, #26
 8021758:	d568      	bpl.n	802182c <HAL_UART_IRQHandler+0xe8>
 802175a:	068d      	lsls	r5, r1, #26
 802175c:	d566      	bpl.n	802182c <HAL_UART_IRQHandler+0xe8>
}
 802175e:	b003      	add	sp, #12
 8021760:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      UART_Receive_IT(huart);
 8021764:	f7ff bf91 	b.w	802168a <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8021768:	f005 0001 	and.w	r0, r5, #1
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 802176c:	f401 7590 	and.w	r5, r1, #288	; 0x120
 8021770:	4305      	orrs	r5, r0
 8021772:	d05b      	beq.n	802182c <HAL_UART_IRQHandler+0xe8>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8021774:	07d5      	lsls	r5, r2, #31
 8021776:	d505      	bpl.n	8021784 <HAL_UART_IRQHandler+0x40>
 8021778:	05cb      	lsls	r3, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 802177a:	bf42      	ittt	mi
 802177c:	6c23      	ldrmi	r3, [r4, #64]	; 0x40
 802177e:	f043 0301 	orrmi.w	r3, r3, #1
 8021782:	6423      	strmi	r3, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8021784:	0755      	lsls	r5, r2, #29
 8021786:	d504      	bpl.n	8021792 <HAL_UART_IRQHandler+0x4e>
 8021788:	b118      	cbz	r0, 8021792 <HAL_UART_IRQHandler+0x4e>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 802178a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802178c:	f043 0302 	orr.w	r3, r3, #2
 8021790:	6423      	str	r3, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8021792:	0793      	lsls	r3, r2, #30
 8021794:	d504      	bpl.n	80217a0 <HAL_UART_IRQHandler+0x5c>
 8021796:	b118      	cbz	r0, 80217a0 <HAL_UART_IRQHandler+0x5c>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8021798:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802179a:	f043 0304 	orr.w	r3, r3, #4
 802179e:	6423      	str	r3, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80217a0:	0715      	lsls	r5, r2, #28
 80217a2:	d507      	bpl.n	80217b4 <HAL_UART_IRQHandler+0x70>
 80217a4:	f001 0320 	and.w	r3, r1, #32
 80217a8:	4303      	orrs	r3, r0
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80217aa:	bf1e      	ittt	ne
 80217ac:	6c23      	ldrne	r3, [r4, #64]	; 0x40
 80217ae:	f043 0308 	orrne.w	r3, r3, #8
 80217b2:	6423      	strne	r3, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80217b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80217b6:	2b00      	cmp	r3, #0
 80217b8:	d032      	beq.n	8021820 <HAL_UART_IRQHandler+0xdc>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80217ba:	0690      	lsls	r0, r2, #26
 80217bc:	d504      	bpl.n	80217c8 <HAL_UART_IRQHandler+0x84>
 80217be:	068a      	lsls	r2, r1, #26
 80217c0:	d502      	bpl.n	80217c8 <HAL_UART_IRQHandler+0x84>
        UART_Receive_IT(huart);
 80217c2:	4620      	mov	r0, r4
 80217c4:	f7ff ff61 	bl	802168a <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80217c8:	6823      	ldr	r3, [r4, #0]
 80217ca:	695b      	ldr	r3, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80217cc:	6c25      	ldr	r5, [r4, #64]	; 0x40
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80217ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80217d2:	f005 0508 	and.w	r5, r5, #8
 80217d6:	431d      	orrs	r5, r3
        UART_EndRxTransfer(huart);
 80217d8:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80217da:	d023      	beq.n	8021824 <HAL_UART_IRQHandler+0xe0>
        UART_EndRxTransfer(huart);
 80217dc:	f7ff fe04 	bl	80213e8 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80217e0:	6822      	ldr	r2, [r4, #0]
 80217e2:	6953      	ldr	r3, [r2, #20]
 80217e4:	065b      	lsls	r3, r3, #25
 80217e6:	d518      	bpl.n	802181a <HAL_UART_IRQHandler+0xd6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80217e8:	f102 0314 	add.w	r3, r2, #20
 80217ec:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80217f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80217f4:	f102 0014 	add.w	r0, r2, #20
 80217f8:	e840 3100 	strex	r1, r3, [r0]
 80217fc:	2900      	cmp	r1, #0
 80217fe:	d1f3      	bne.n	80217e8 <HAL_UART_IRQHandler+0xa4>
          if (huart->hdmarx != NULL)
 8021800:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8021802:	b150      	cbz	r0, 802181a <HAL_UART_IRQHandler+0xd6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8021804:	4b72      	ldr	r3, [pc, #456]	; (80219d0 <HAL_UART_IRQHandler+0x28c>)
 8021806:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8021808:	f7ff fa2a 	bl	8020c60 <HAL_DMA_Abort_IT>
 802180c:	b140      	cbz	r0, 8021820 <HAL_UART_IRQHandler+0xdc>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 802180e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8021810:	6d03      	ldr	r3, [r0, #80]	; 0x50
}
 8021812:	b003      	add	sp, #12
 8021814:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8021818:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 802181a:	4620      	mov	r0, r4
 802181c:	f7ff ff2b 	bl	8021676 <HAL_UART_ErrorCallback>
}
 8021820:	b003      	add	sp, #12
 8021822:	bd30      	pop	{r4, r5, pc}
        HAL_UART_ErrorCallback(huart);
 8021824:	f7ff ff27 	bl	8021676 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8021828:	6425      	str	r5, [r4, #64]	; 0x40
 802182a:	e7f9      	b.n	8021820 <HAL_UART_IRQHandler+0xdc>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 802182c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 802182e:	2801      	cmp	r0, #1
 8021830:	f040 8091 	bne.w	8021956 <HAL_UART_IRQHandler+0x212>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8021834:	06d5      	lsls	r5, r2, #27
 8021836:	f140 808e 	bpl.w	8021956 <HAL_UART_IRQHandler+0x212>
      && ((cr1its & USART_SR_IDLE) != 0U))
 802183a:	06c8      	lsls	r0, r1, #27
 802183c:	f140 808b 	bpl.w	8021956 <HAL_UART_IRQHandler+0x212>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8021840:	2200      	movs	r2, #0
 8021842:	9201      	str	r2, [sp, #4]
 8021844:	681a      	ldr	r2, [r3, #0]
 8021846:	9201      	str	r2, [sp, #4]
 8021848:	685a      	ldr	r2, [r3, #4]
 802184a:	9201      	str	r2, [sp, #4]
 802184c:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802184e:	695a      	ldr	r2, [r3, #20]
 8021850:	0655      	lsls	r5, r2, #25
 8021852:	d54c      	bpl.n	80218ee <HAL_UART_IRQHandler+0x1aa>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8021854:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8021856:	680a      	ldr	r2, [r1, #0]
 8021858:	6852      	ldr	r2, [r2, #4]
 802185a:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 802185c:	2a00      	cmp	r2, #0
 802185e:	d0df      	beq.n	8021820 <HAL_UART_IRQHandler+0xdc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8021860:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
 8021862:	4290      	cmp	r0, r2
 8021864:	d9dc      	bls.n	8021820 <HAL_UART_IRQHandler+0xdc>
        huart->RxXferCount = nb_remaining_rx_data;
 8021866:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8021868:	69ca      	ldr	r2, [r1, #28]
 802186a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 802186e:	d036      	beq.n	80218de <HAL_UART_IRQHandler+0x19a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021870:	f103 020c 	add.w	r2, r3, #12
 8021874:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8021878:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802187c:	f103 000c 	add.w	r0, r3, #12
 8021880:	e840 2100 	strex	r1, r2, [r0]
 8021884:	2900      	cmp	r1, #0
 8021886:	d1f3      	bne.n	8021870 <HAL_UART_IRQHandler+0x12c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021888:	f103 0214 	add.w	r2, r3, #20
 802188c:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8021890:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021894:	f103 0014 	add.w	r0, r3, #20
 8021898:	e840 2100 	strex	r1, r2, [r0]
 802189c:	2900      	cmp	r1, #0
 802189e:	d1f3      	bne.n	8021888 <HAL_UART_IRQHandler+0x144>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80218a0:	f103 0214 	add.w	r2, r3, #20
 80218a4:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80218a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80218ac:	f103 0014 	add.w	r0, r3, #20
 80218b0:	e840 2100 	strex	r1, r2, [r0]
 80218b4:	2900      	cmp	r1, #0
 80218b6:	d1f3      	bne.n	80218a0 <HAL_UART_IRQHandler+0x15c>
          huart->RxState = HAL_UART_STATE_READY;
 80218b8:	2220      	movs	r2, #32
 80218ba:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80218be:	6321      	str	r1, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80218c0:	f103 020c 	add.w	r2, r3, #12
 80218c4:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80218c8:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80218cc:	f103 000c 	add.w	r0, r3, #12
 80218d0:	e840 2100 	strex	r1, r2, [r0]
 80218d4:	2900      	cmp	r1, #0
 80218d6:	d1f3      	bne.n	80218c0 <HAL_UART_IRQHandler+0x17c>
          (void)HAL_DMA_Abort(huart->hdmarx);
 80218d8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80218da:	f7ff f97d 	bl	8020bd8 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80218de:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80218e0:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80218e2:	1ac9      	subs	r1, r1, r3
 80218e4:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80218e6:	4620      	mov	r0, r4
 80218e8:	f7ff fece 	bl	8021688 <HAL_UARTEx_RxEventCallback>
 80218ec:	e798      	b.n	8021820 <HAL_UART_IRQHandler+0xdc>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80218ee:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 80218f0:	b28a      	uxth	r2, r1
      if ((huart->RxXferCount > 0U)
 80218f2:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 80218f4:	b289      	uxth	r1, r1
 80218f6:	2900      	cmp	r1, #0
 80218f8:	d092      	beq.n	8021820 <HAL_UART_IRQHandler+0xdc>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80218fa:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80218fc:	1a89      	subs	r1, r1, r2
 80218fe:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8021900:	2900      	cmp	r1, #0
 8021902:	d08d      	beq.n	8021820 <HAL_UART_IRQHandler+0xdc>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021904:	f103 020c 	add.w	r2, r3, #12
 8021908:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 802190c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021910:	f103 050c 	add.w	r5, r3, #12
 8021914:	e845 2000 	strex	r0, r2, [r5]
 8021918:	2800      	cmp	r0, #0
 802191a:	d1f3      	bne.n	8021904 <HAL_UART_IRQHandler+0x1c0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802191c:	f103 0214 	add.w	r2, r3, #20
 8021920:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8021924:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021928:	f103 0514 	add.w	r5, r3, #20
 802192c:	e845 2000 	strex	r0, r2, [r5]
 8021930:	2800      	cmp	r0, #0
 8021932:	d1f3      	bne.n	802191c <HAL_UART_IRQHandler+0x1d8>
        huart->RxState = HAL_UART_STATE_READY;
 8021934:	2220      	movs	r2, #32
 8021936:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802193a:	6320      	str	r0, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802193c:	f103 020c 	add.w	r2, r3, #12
 8021940:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8021944:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021948:	f103 050c 	add.w	r5, r3, #12
 802194c:	e845 2000 	strex	r0, r2, [r5]
 8021950:	2800      	cmp	r0, #0
 8021952:	d1f3      	bne.n	802193c <HAL_UART_IRQHandler+0x1f8>
 8021954:	e7c7      	b.n	80218e6 <HAL_UART_IRQHandler+0x1a2>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8021956:	0610      	lsls	r0, r2, #24
 8021958:	d528      	bpl.n	80219ac <HAL_UART_IRQHandler+0x268>
 802195a:	060d      	lsls	r5, r1, #24
 802195c:	d526      	bpl.n	80219ac <HAL_UART_IRQHandler+0x268>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 802195e:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8021962:	2a21      	cmp	r2, #33	; 0x21
 8021964:	f47f af5c 	bne.w	8021820 <HAL_UART_IRQHandler+0xdc>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8021968:	68a1      	ldr	r1, [r4, #8]
 802196a:	6a22      	ldr	r2, [r4, #32]
 802196c:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8021970:	d117      	bne.n	80219a2 <HAL_UART_IRQHandler+0x25e>
 8021972:	6921      	ldr	r1, [r4, #16]
 8021974:	b9a9      	cbnz	r1, 80219a2 <HAL_UART_IRQHandler+0x25e>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8021976:	f832 1b02 	ldrh.w	r1, [r2], #2
 802197a:	f3c1 0108 	ubfx	r1, r1, #0, #9
 802197e:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8021980:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8021982:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8021984:	3a01      	subs	r2, #1
 8021986:	b292      	uxth	r2, r2
 8021988:	84e2      	strh	r2, [r4, #38]	; 0x26
 802198a:	2a00      	cmp	r2, #0
 802198c:	f47f af48 	bne.w	8021820 <HAL_UART_IRQHandler+0xdc>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8021990:	68da      	ldr	r2, [r3, #12]
 8021992:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8021996:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8021998:	68da      	ldr	r2, [r3, #12]
 802199a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 802199e:	60da      	str	r2, [r3, #12]
 80219a0:	e73e      	b.n	8021820 <HAL_UART_IRQHandler+0xdc>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80219a2:	1c51      	adds	r1, r2, #1
 80219a4:	6221      	str	r1, [r4, #32]
 80219a6:	7812      	ldrb	r2, [r2, #0]
 80219a8:	605a      	str	r2, [r3, #4]
 80219aa:	e7ea      	b.n	8021982 <HAL_UART_IRQHandler+0x23e>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80219ac:	0650      	lsls	r0, r2, #25
 80219ae:	f57f af37 	bpl.w	8021820 <HAL_UART_IRQHandler+0xdc>
 80219b2:	064a      	lsls	r2, r1, #25
 80219b4:	f57f af34 	bpl.w	8021820 <HAL_UART_IRQHandler+0xdc>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80219b8:	68da      	ldr	r2, [r3, #12]
 80219ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80219be:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80219c0:	2320      	movs	r3, #32
 80219c2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 80219c6:	4620      	mov	r0, r4
 80219c8:	f7ff fe53 	bl	8021672 <HAL_UART_TxCpltCallback>
  return HAL_OK;
 80219cc:	e728      	b.n	8021820 <HAL_UART_IRQHandler+0xdc>
 80219ce:	bf00      	nop
 80219d0:	08021679 	.word	0x08021679

080219d4 <__errno>:
 80219d4:	4b01      	ldr	r3, [pc, #4]	; (80219dc <__errno+0x8>)
 80219d6:	6818      	ldr	r0, [r3, #0]
 80219d8:	4770      	bx	lr
 80219da:	bf00      	nop
 80219dc:	2000000c 	.word	0x2000000c

080219e0 <__libc_init_array>:
 80219e0:	b570      	push	{r4, r5, r6, lr}
 80219e2:	4d0d      	ldr	r5, [pc, #52]	; (8021a18 <__libc_init_array+0x38>)
 80219e4:	4c0d      	ldr	r4, [pc, #52]	; (8021a1c <__libc_init_array+0x3c>)
 80219e6:	1b64      	subs	r4, r4, r5
 80219e8:	10a4      	asrs	r4, r4, #2
 80219ea:	2600      	movs	r6, #0
 80219ec:	42a6      	cmp	r6, r4
 80219ee:	d109      	bne.n	8021a04 <__libc_init_array+0x24>
 80219f0:	4d0b      	ldr	r5, [pc, #44]	; (8021a20 <__libc_init_array+0x40>)
 80219f2:	4c0c      	ldr	r4, [pc, #48]	; (8021a24 <__libc_init_array+0x44>)
 80219f4:	f000 ff76 	bl	80228e4 <_init>
 80219f8:	1b64      	subs	r4, r4, r5
 80219fa:	10a4      	asrs	r4, r4, #2
 80219fc:	2600      	movs	r6, #0
 80219fe:	42a6      	cmp	r6, r4
 8021a00:	d105      	bne.n	8021a0e <__libc_init_array+0x2e>
 8021a02:	bd70      	pop	{r4, r5, r6, pc}
 8021a04:	f855 3b04 	ldr.w	r3, [r5], #4
 8021a08:	4798      	blx	r3
 8021a0a:	3601      	adds	r6, #1
 8021a0c:	e7ee      	b.n	80219ec <__libc_init_array+0xc>
 8021a0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8021a12:	4798      	blx	r3
 8021a14:	3601      	adds	r6, #1
 8021a16:	e7f2      	b.n	80219fe <__libc_init_array+0x1e>
 8021a18:	080229d8 	.word	0x080229d8
 8021a1c:	080229d8 	.word	0x080229d8
 8021a20:	080229d8 	.word	0x080229d8
 8021a24:	080229dc 	.word	0x080229dc

08021a28 <memset>:
 8021a28:	4402      	add	r2, r0
 8021a2a:	4603      	mov	r3, r0
 8021a2c:	4293      	cmp	r3, r2
 8021a2e:	d100      	bne.n	8021a32 <memset+0xa>
 8021a30:	4770      	bx	lr
 8021a32:	f803 1b01 	strb.w	r1, [r3], #1
 8021a36:	e7f9      	b.n	8021a2c <memset+0x4>

08021a38 <iprintf>:
 8021a38:	b40f      	push	{r0, r1, r2, r3}
 8021a3a:	4b0a      	ldr	r3, [pc, #40]	; (8021a64 <iprintf+0x2c>)
 8021a3c:	b513      	push	{r0, r1, r4, lr}
 8021a3e:	681c      	ldr	r4, [r3, #0]
 8021a40:	b124      	cbz	r4, 8021a4c <iprintf+0x14>
 8021a42:	69a3      	ldr	r3, [r4, #24]
 8021a44:	b913      	cbnz	r3, 8021a4c <iprintf+0x14>
 8021a46:	4620      	mov	r0, r4
 8021a48:	f000 f866 	bl	8021b18 <__sinit>
 8021a4c:	ab05      	add	r3, sp, #20
 8021a4e:	9a04      	ldr	r2, [sp, #16]
 8021a50:	68a1      	ldr	r1, [r4, #8]
 8021a52:	9301      	str	r3, [sp, #4]
 8021a54:	4620      	mov	r0, r4
 8021a56:	f000 f983 	bl	8021d60 <_vfiprintf_r>
 8021a5a:	b002      	add	sp, #8
 8021a5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021a60:	b004      	add	sp, #16
 8021a62:	4770      	bx	lr
 8021a64:	2000000c 	.word	0x2000000c

08021a68 <std>:
 8021a68:	2300      	movs	r3, #0
 8021a6a:	b510      	push	{r4, lr}
 8021a6c:	4604      	mov	r4, r0
 8021a6e:	e9c0 3300 	strd	r3, r3, [r0]
 8021a72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8021a76:	6083      	str	r3, [r0, #8]
 8021a78:	8181      	strh	r1, [r0, #12]
 8021a7a:	6643      	str	r3, [r0, #100]	; 0x64
 8021a7c:	81c2      	strh	r2, [r0, #14]
 8021a7e:	6183      	str	r3, [r0, #24]
 8021a80:	4619      	mov	r1, r3
 8021a82:	2208      	movs	r2, #8
 8021a84:	305c      	adds	r0, #92	; 0x5c
 8021a86:	f7ff ffcf 	bl	8021a28 <memset>
 8021a8a:	4b05      	ldr	r3, [pc, #20]	; (8021aa0 <std+0x38>)
 8021a8c:	6263      	str	r3, [r4, #36]	; 0x24
 8021a8e:	4b05      	ldr	r3, [pc, #20]	; (8021aa4 <std+0x3c>)
 8021a90:	62a3      	str	r3, [r4, #40]	; 0x28
 8021a92:	4b05      	ldr	r3, [pc, #20]	; (8021aa8 <std+0x40>)
 8021a94:	62e3      	str	r3, [r4, #44]	; 0x2c
 8021a96:	4b05      	ldr	r3, [pc, #20]	; (8021aac <std+0x44>)
 8021a98:	6224      	str	r4, [r4, #32]
 8021a9a:	6323      	str	r3, [r4, #48]	; 0x30
 8021a9c:	bd10      	pop	{r4, pc}
 8021a9e:	bf00      	nop
 8021aa0:	08022309 	.word	0x08022309
 8021aa4:	0802232b 	.word	0x0802232b
 8021aa8:	08022363 	.word	0x08022363
 8021aac:	08022387 	.word	0x08022387

08021ab0 <_cleanup_r>:
 8021ab0:	4901      	ldr	r1, [pc, #4]	; (8021ab8 <_cleanup_r+0x8>)
 8021ab2:	f000 b8af 	b.w	8021c14 <_fwalk_reent>
 8021ab6:	bf00      	nop
 8021ab8:	08022661 	.word	0x08022661

08021abc <__sfmoreglue>:
 8021abc:	b570      	push	{r4, r5, r6, lr}
 8021abe:	1e4a      	subs	r2, r1, #1
 8021ac0:	2568      	movs	r5, #104	; 0x68
 8021ac2:	4355      	muls	r5, r2
 8021ac4:	460e      	mov	r6, r1
 8021ac6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8021aca:	f000 f8c5 	bl	8021c58 <_malloc_r>
 8021ace:	4604      	mov	r4, r0
 8021ad0:	b140      	cbz	r0, 8021ae4 <__sfmoreglue+0x28>
 8021ad2:	2100      	movs	r1, #0
 8021ad4:	e9c0 1600 	strd	r1, r6, [r0]
 8021ad8:	300c      	adds	r0, #12
 8021ada:	60a0      	str	r0, [r4, #8]
 8021adc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8021ae0:	f7ff ffa2 	bl	8021a28 <memset>
 8021ae4:	4620      	mov	r0, r4
 8021ae6:	bd70      	pop	{r4, r5, r6, pc}

08021ae8 <__sfp_lock_acquire>:
 8021ae8:	4801      	ldr	r0, [pc, #4]	; (8021af0 <__sfp_lock_acquire+0x8>)
 8021aea:	f000 b8b3 	b.w	8021c54 <__retarget_lock_acquire_recursive>
 8021aee:	bf00      	nop
 8021af0:	2000012c 	.word	0x2000012c

08021af4 <__sfp_lock_release>:
 8021af4:	4801      	ldr	r0, [pc, #4]	; (8021afc <__sfp_lock_release+0x8>)
 8021af6:	f000 b8ae 	b.w	8021c56 <__retarget_lock_release_recursive>
 8021afa:	bf00      	nop
 8021afc:	2000012c 	.word	0x2000012c

08021b00 <__sinit_lock_acquire>:
 8021b00:	4801      	ldr	r0, [pc, #4]	; (8021b08 <__sinit_lock_acquire+0x8>)
 8021b02:	f000 b8a7 	b.w	8021c54 <__retarget_lock_acquire_recursive>
 8021b06:	bf00      	nop
 8021b08:	20000127 	.word	0x20000127

08021b0c <__sinit_lock_release>:
 8021b0c:	4801      	ldr	r0, [pc, #4]	; (8021b14 <__sinit_lock_release+0x8>)
 8021b0e:	f000 b8a2 	b.w	8021c56 <__retarget_lock_release_recursive>
 8021b12:	bf00      	nop
 8021b14:	20000127 	.word	0x20000127

08021b18 <__sinit>:
 8021b18:	b510      	push	{r4, lr}
 8021b1a:	4604      	mov	r4, r0
 8021b1c:	f7ff fff0 	bl	8021b00 <__sinit_lock_acquire>
 8021b20:	69a3      	ldr	r3, [r4, #24]
 8021b22:	b11b      	cbz	r3, 8021b2c <__sinit+0x14>
 8021b24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021b28:	f7ff bff0 	b.w	8021b0c <__sinit_lock_release>
 8021b2c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8021b30:	6523      	str	r3, [r4, #80]	; 0x50
 8021b32:	4b13      	ldr	r3, [pc, #76]	; (8021b80 <__sinit+0x68>)
 8021b34:	4a13      	ldr	r2, [pc, #76]	; (8021b84 <__sinit+0x6c>)
 8021b36:	681b      	ldr	r3, [r3, #0]
 8021b38:	62a2      	str	r2, [r4, #40]	; 0x28
 8021b3a:	42a3      	cmp	r3, r4
 8021b3c:	bf04      	itt	eq
 8021b3e:	2301      	moveq	r3, #1
 8021b40:	61a3      	streq	r3, [r4, #24]
 8021b42:	4620      	mov	r0, r4
 8021b44:	f000 f820 	bl	8021b88 <__sfp>
 8021b48:	6060      	str	r0, [r4, #4]
 8021b4a:	4620      	mov	r0, r4
 8021b4c:	f000 f81c 	bl	8021b88 <__sfp>
 8021b50:	60a0      	str	r0, [r4, #8]
 8021b52:	4620      	mov	r0, r4
 8021b54:	f000 f818 	bl	8021b88 <__sfp>
 8021b58:	2200      	movs	r2, #0
 8021b5a:	60e0      	str	r0, [r4, #12]
 8021b5c:	2104      	movs	r1, #4
 8021b5e:	6860      	ldr	r0, [r4, #4]
 8021b60:	f7ff ff82 	bl	8021a68 <std>
 8021b64:	68a0      	ldr	r0, [r4, #8]
 8021b66:	2201      	movs	r2, #1
 8021b68:	2109      	movs	r1, #9
 8021b6a:	f7ff ff7d 	bl	8021a68 <std>
 8021b6e:	68e0      	ldr	r0, [r4, #12]
 8021b70:	2202      	movs	r2, #2
 8021b72:	2112      	movs	r1, #18
 8021b74:	f7ff ff78 	bl	8021a68 <std>
 8021b78:	2301      	movs	r3, #1
 8021b7a:	61a3      	str	r3, [r4, #24]
 8021b7c:	e7d2      	b.n	8021b24 <__sinit+0xc>
 8021b7e:	bf00      	nop
 8021b80:	08022938 	.word	0x08022938
 8021b84:	08021ab1 	.word	0x08021ab1

08021b88 <__sfp>:
 8021b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021b8a:	4607      	mov	r7, r0
 8021b8c:	f7ff ffac 	bl	8021ae8 <__sfp_lock_acquire>
 8021b90:	4b1e      	ldr	r3, [pc, #120]	; (8021c0c <__sfp+0x84>)
 8021b92:	681e      	ldr	r6, [r3, #0]
 8021b94:	69b3      	ldr	r3, [r6, #24]
 8021b96:	b913      	cbnz	r3, 8021b9e <__sfp+0x16>
 8021b98:	4630      	mov	r0, r6
 8021b9a:	f7ff ffbd 	bl	8021b18 <__sinit>
 8021b9e:	3648      	adds	r6, #72	; 0x48
 8021ba0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8021ba4:	3b01      	subs	r3, #1
 8021ba6:	d503      	bpl.n	8021bb0 <__sfp+0x28>
 8021ba8:	6833      	ldr	r3, [r6, #0]
 8021baa:	b30b      	cbz	r3, 8021bf0 <__sfp+0x68>
 8021bac:	6836      	ldr	r6, [r6, #0]
 8021bae:	e7f7      	b.n	8021ba0 <__sfp+0x18>
 8021bb0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8021bb4:	b9d5      	cbnz	r5, 8021bec <__sfp+0x64>
 8021bb6:	4b16      	ldr	r3, [pc, #88]	; (8021c10 <__sfp+0x88>)
 8021bb8:	60e3      	str	r3, [r4, #12]
 8021bba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8021bbe:	6665      	str	r5, [r4, #100]	; 0x64
 8021bc0:	f000 f847 	bl	8021c52 <__retarget_lock_init_recursive>
 8021bc4:	f7ff ff96 	bl	8021af4 <__sfp_lock_release>
 8021bc8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8021bcc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8021bd0:	6025      	str	r5, [r4, #0]
 8021bd2:	61a5      	str	r5, [r4, #24]
 8021bd4:	2208      	movs	r2, #8
 8021bd6:	4629      	mov	r1, r5
 8021bd8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8021bdc:	f7ff ff24 	bl	8021a28 <memset>
 8021be0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8021be4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8021be8:	4620      	mov	r0, r4
 8021bea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021bec:	3468      	adds	r4, #104	; 0x68
 8021bee:	e7d9      	b.n	8021ba4 <__sfp+0x1c>
 8021bf0:	2104      	movs	r1, #4
 8021bf2:	4638      	mov	r0, r7
 8021bf4:	f7ff ff62 	bl	8021abc <__sfmoreglue>
 8021bf8:	4604      	mov	r4, r0
 8021bfa:	6030      	str	r0, [r6, #0]
 8021bfc:	2800      	cmp	r0, #0
 8021bfe:	d1d5      	bne.n	8021bac <__sfp+0x24>
 8021c00:	f7ff ff78 	bl	8021af4 <__sfp_lock_release>
 8021c04:	230c      	movs	r3, #12
 8021c06:	603b      	str	r3, [r7, #0]
 8021c08:	e7ee      	b.n	8021be8 <__sfp+0x60>
 8021c0a:	bf00      	nop
 8021c0c:	08022938 	.word	0x08022938
 8021c10:	ffff0001 	.word	0xffff0001

08021c14 <_fwalk_reent>:
 8021c14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021c18:	4606      	mov	r6, r0
 8021c1a:	4688      	mov	r8, r1
 8021c1c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8021c20:	2700      	movs	r7, #0
 8021c22:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8021c26:	f1b9 0901 	subs.w	r9, r9, #1
 8021c2a:	d505      	bpl.n	8021c38 <_fwalk_reent+0x24>
 8021c2c:	6824      	ldr	r4, [r4, #0]
 8021c2e:	2c00      	cmp	r4, #0
 8021c30:	d1f7      	bne.n	8021c22 <_fwalk_reent+0xe>
 8021c32:	4638      	mov	r0, r7
 8021c34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021c38:	89ab      	ldrh	r3, [r5, #12]
 8021c3a:	2b01      	cmp	r3, #1
 8021c3c:	d907      	bls.n	8021c4e <_fwalk_reent+0x3a>
 8021c3e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8021c42:	3301      	adds	r3, #1
 8021c44:	d003      	beq.n	8021c4e <_fwalk_reent+0x3a>
 8021c46:	4629      	mov	r1, r5
 8021c48:	4630      	mov	r0, r6
 8021c4a:	47c0      	blx	r8
 8021c4c:	4307      	orrs	r7, r0
 8021c4e:	3568      	adds	r5, #104	; 0x68
 8021c50:	e7e9      	b.n	8021c26 <_fwalk_reent+0x12>

08021c52 <__retarget_lock_init_recursive>:
 8021c52:	4770      	bx	lr

08021c54 <__retarget_lock_acquire_recursive>:
 8021c54:	4770      	bx	lr

08021c56 <__retarget_lock_release_recursive>:
 8021c56:	4770      	bx	lr

08021c58 <_malloc_r>:
 8021c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021c5a:	1ccd      	adds	r5, r1, #3
 8021c5c:	f025 0503 	bic.w	r5, r5, #3
 8021c60:	3508      	adds	r5, #8
 8021c62:	2d0c      	cmp	r5, #12
 8021c64:	bf38      	it	cc
 8021c66:	250c      	movcc	r5, #12
 8021c68:	2d00      	cmp	r5, #0
 8021c6a:	4606      	mov	r6, r0
 8021c6c:	db01      	blt.n	8021c72 <_malloc_r+0x1a>
 8021c6e:	42a9      	cmp	r1, r5
 8021c70:	d903      	bls.n	8021c7a <_malloc_r+0x22>
 8021c72:	230c      	movs	r3, #12
 8021c74:	6033      	str	r3, [r6, #0]
 8021c76:	2000      	movs	r0, #0
 8021c78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021c7a:	f000 fda3 	bl	80227c4 <__malloc_lock>
 8021c7e:	4921      	ldr	r1, [pc, #132]	; (8021d04 <_malloc_r+0xac>)
 8021c80:	680a      	ldr	r2, [r1, #0]
 8021c82:	4614      	mov	r4, r2
 8021c84:	b99c      	cbnz	r4, 8021cae <_malloc_r+0x56>
 8021c86:	4f20      	ldr	r7, [pc, #128]	; (8021d08 <_malloc_r+0xb0>)
 8021c88:	683b      	ldr	r3, [r7, #0]
 8021c8a:	b923      	cbnz	r3, 8021c96 <_malloc_r+0x3e>
 8021c8c:	4621      	mov	r1, r4
 8021c8e:	4630      	mov	r0, r6
 8021c90:	f000 fb2a 	bl	80222e8 <_sbrk_r>
 8021c94:	6038      	str	r0, [r7, #0]
 8021c96:	4629      	mov	r1, r5
 8021c98:	4630      	mov	r0, r6
 8021c9a:	f000 fb25 	bl	80222e8 <_sbrk_r>
 8021c9e:	1c43      	adds	r3, r0, #1
 8021ca0:	d123      	bne.n	8021cea <_malloc_r+0x92>
 8021ca2:	230c      	movs	r3, #12
 8021ca4:	6033      	str	r3, [r6, #0]
 8021ca6:	4630      	mov	r0, r6
 8021ca8:	f000 fd92 	bl	80227d0 <__malloc_unlock>
 8021cac:	e7e3      	b.n	8021c76 <_malloc_r+0x1e>
 8021cae:	6823      	ldr	r3, [r4, #0]
 8021cb0:	1b5b      	subs	r3, r3, r5
 8021cb2:	d417      	bmi.n	8021ce4 <_malloc_r+0x8c>
 8021cb4:	2b0b      	cmp	r3, #11
 8021cb6:	d903      	bls.n	8021cc0 <_malloc_r+0x68>
 8021cb8:	6023      	str	r3, [r4, #0]
 8021cba:	441c      	add	r4, r3
 8021cbc:	6025      	str	r5, [r4, #0]
 8021cbe:	e004      	b.n	8021cca <_malloc_r+0x72>
 8021cc0:	6863      	ldr	r3, [r4, #4]
 8021cc2:	42a2      	cmp	r2, r4
 8021cc4:	bf0c      	ite	eq
 8021cc6:	600b      	streq	r3, [r1, #0]
 8021cc8:	6053      	strne	r3, [r2, #4]
 8021cca:	4630      	mov	r0, r6
 8021ccc:	f000 fd80 	bl	80227d0 <__malloc_unlock>
 8021cd0:	f104 000b 	add.w	r0, r4, #11
 8021cd4:	1d23      	adds	r3, r4, #4
 8021cd6:	f020 0007 	bic.w	r0, r0, #7
 8021cda:	1ac2      	subs	r2, r0, r3
 8021cdc:	d0cc      	beq.n	8021c78 <_malloc_r+0x20>
 8021cde:	1a1b      	subs	r3, r3, r0
 8021ce0:	50a3      	str	r3, [r4, r2]
 8021ce2:	e7c9      	b.n	8021c78 <_malloc_r+0x20>
 8021ce4:	4622      	mov	r2, r4
 8021ce6:	6864      	ldr	r4, [r4, #4]
 8021ce8:	e7cc      	b.n	8021c84 <_malloc_r+0x2c>
 8021cea:	1cc4      	adds	r4, r0, #3
 8021cec:	f024 0403 	bic.w	r4, r4, #3
 8021cf0:	42a0      	cmp	r0, r4
 8021cf2:	d0e3      	beq.n	8021cbc <_malloc_r+0x64>
 8021cf4:	1a21      	subs	r1, r4, r0
 8021cf6:	4630      	mov	r0, r6
 8021cf8:	f000 faf6 	bl	80222e8 <_sbrk_r>
 8021cfc:	3001      	adds	r0, #1
 8021cfe:	d1dd      	bne.n	8021cbc <_malloc_r+0x64>
 8021d00:	e7cf      	b.n	8021ca2 <_malloc_r+0x4a>
 8021d02:	bf00      	nop
 8021d04:	20000090 	.word	0x20000090
 8021d08:	20000094 	.word	0x20000094

08021d0c <__sfputc_r>:
 8021d0c:	6893      	ldr	r3, [r2, #8]
 8021d0e:	3b01      	subs	r3, #1
 8021d10:	2b00      	cmp	r3, #0
 8021d12:	b410      	push	{r4}
 8021d14:	6093      	str	r3, [r2, #8]
 8021d16:	da08      	bge.n	8021d2a <__sfputc_r+0x1e>
 8021d18:	6994      	ldr	r4, [r2, #24]
 8021d1a:	42a3      	cmp	r3, r4
 8021d1c:	db01      	blt.n	8021d22 <__sfputc_r+0x16>
 8021d1e:	290a      	cmp	r1, #10
 8021d20:	d103      	bne.n	8021d2a <__sfputc_r+0x1e>
 8021d22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021d26:	f000 bb33 	b.w	8022390 <__swbuf_r>
 8021d2a:	6813      	ldr	r3, [r2, #0]
 8021d2c:	1c58      	adds	r0, r3, #1
 8021d2e:	6010      	str	r0, [r2, #0]
 8021d30:	7019      	strb	r1, [r3, #0]
 8021d32:	4608      	mov	r0, r1
 8021d34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021d38:	4770      	bx	lr

08021d3a <__sfputs_r>:
 8021d3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021d3c:	4606      	mov	r6, r0
 8021d3e:	460f      	mov	r7, r1
 8021d40:	4614      	mov	r4, r2
 8021d42:	18d5      	adds	r5, r2, r3
 8021d44:	42ac      	cmp	r4, r5
 8021d46:	d101      	bne.n	8021d4c <__sfputs_r+0x12>
 8021d48:	2000      	movs	r0, #0
 8021d4a:	e007      	b.n	8021d5c <__sfputs_r+0x22>
 8021d4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021d50:	463a      	mov	r2, r7
 8021d52:	4630      	mov	r0, r6
 8021d54:	f7ff ffda 	bl	8021d0c <__sfputc_r>
 8021d58:	1c43      	adds	r3, r0, #1
 8021d5a:	d1f3      	bne.n	8021d44 <__sfputs_r+0xa>
 8021d5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08021d60 <_vfiprintf_r>:
 8021d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021d64:	460d      	mov	r5, r1
 8021d66:	b09d      	sub	sp, #116	; 0x74
 8021d68:	4614      	mov	r4, r2
 8021d6a:	4698      	mov	r8, r3
 8021d6c:	4606      	mov	r6, r0
 8021d6e:	b118      	cbz	r0, 8021d78 <_vfiprintf_r+0x18>
 8021d70:	6983      	ldr	r3, [r0, #24]
 8021d72:	b90b      	cbnz	r3, 8021d78 <_vfiprintf_r+0x18>
 8021d74:	f7ff fed0 	bl	8021b18 <__sinit>
 8021d78:	4b89      	ldr	r3, [pc, #548]	; (8021fa0 <_vfiprintf_r+0x240>)
 8021d7a:	429d      	cmp	r5, r3
 8021d7c:	d11b      	bne.n	8021db6 <_vfiprintf_r+0x56>
 8021d7e:	6875      	ldr	r5, [r6, #4]
 8021d80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8021d82:	07d9      	lsls	r1, r3, #31
 8021d84:	d405      	bmi.n	8021d92 <_vfiprintf_r+0x32>
 8021d86:	89ab      	ldrh	r3, [r5, #12]
 8021d88:	059a      	lsls	r2, r3, #22
 8021d8a:	d402      	bmi.n	8021d92 <_vfiprintf_r+0x32>
 8021d8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8021d8e:	f7ff ff61 	bl	8021c54 <__retarget_lock_acquire_recursive>
 8021d92:	89ab      	ldrh	r3, [r5, #12]
 8021d94:	071b      	lsls	r3, r3, #28
 8021d96:	d501      	bpl.n	8021d9c <_vfiprintf_r+0x3c>
 8021d98:	692b      	ldr	r3, [r5, #16]
 8021d9a:	b9eb      	cbnz	r3, 8021dd8 <_vfiprintf_r+0x78>
 8021d9c:	4629      	mov	r1, r5
 8021d9e:	4630      	mov	r0, r6
 8021da0:	f000 fb5a 	bl	8022458 <__swsetup_r>
 8021da4:	b1c0      	cbz	r0, 8021dd8 <_vfiprintf_r+0x78>
 8021da6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8021da8:	07dc      	lsls	r4, r3, #31
 8021daa:	d50e      	bpl.n	8021dca <_vfiprintf_r+0x6a>
 8021dac:	f04f 30ff 	mov.w	r0, #4294967295
 8021db0:	b01d      	add	sp, #116	; 0x74
 8021db2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021db6:	4b7b      	ldr	r3, [pc, #492]	; (8021fa4 <_vfiprintf_r+0x244>)
 8021db8:	429d      	cmp	r5, r3
 8021dba:	d101      	bne.n	8021dc0 <_vfiprintf_r+0x60>
 8021dbc:	68b5      	ldr	r5, [r6, #8]
 8021dbe:	e7df      	b.n	8021d80 <_vfiprintf_r+0x20>
 8021dc0:	4b79      	ldr	r3, [pc, #484]	; (8021fa8 <_vfiprintf_r+0x248>)
 8021dc2:	429d      	cmp	r5, r3
 8021dc4:	bf08      	it	eq
 8021dc6:	68f5      	ldreq	r5, [r6, #12]
 8021dc8:	e7da      	b.n	8021d80 <_vfiprintf_r+0x20>
 8021dca:	89ab      	ldrh	r3, [r5, #12]
 8021dcc:	0598      	lsls	r0, r3, #22
 8021dce:	d4ed      	bmi.n	8021dac <_vfiprintf_r+0x4c>
 8021dd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8021dd2:	f7ff ff40 	bl	8021c56 <__retarget_lock_release_recursive>
 8021dd6:	e7e9      	b.n	8021dac <_vfiprintf_r+0x4c>
 8021dd8:	2300      	movs	r3, #0
 8021dda:	9309      	str	r3, [sp, #36]	; 0x24
 8021ddc:	2320      	movs	r3, #32
 8021dde:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8021de2:	f8cd 800c 	str.w	r8, [sp, #12]
 8021de6:	2330      	movs	r3, #48	; 0x30
 8021de8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8021fac <_vfiprintf_r+0x24c>
 8021dec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8021df0:	f04f 0901 	mov.w	r9, #1
 8021df4:	4623      	mov	r3, r4
 8021df6:	469a      	mov	sl, r3
 8021df8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021dfc:	b10a      	cbz	r2, 8021e02 <_vfiprintf_r+0xa2>
 8021dfe:	2a25      	cmp	r2, #37	; 0x25
 8021e00:	d1f9      	bne.n	8021df6 <_vfiprintf_r+0x96>
 8021e02:	ebba 0b04 	subs.w	fp, sl, r4
 8021e06:	d00b      	beq.n	8021e20 <_vfiprintf_r+0xc0>
 8021e08:	465b      	mov	r3, fp
 8021e0a:	4622      	mov	r2, r4
 8021e0c:	4629      	mov	r1, r5
 8021e0e:	4630      	mov	r0, r6
 8021e10:	f7ff ff93 	bl	8021d3a <__sfputs_r>
 8021e14:	3001      	adds	r0, #1
 8021e16:	f000 80aa 	beq.w	8021f6e <_vfiprintf_r+0x20e>
 8021e1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021e1c:	445a      	add	r2, fp
 8021e1e:	9209      	str	r2, [sp, #36]	; 0x24
 8021e20:	f89a 3000 	ldrb.w	r3, [sl]
 8021e24:	2b00      	cmp	r3, #0
 8021e26:	f000 80a2 	beq.w	8021f6e <_vfiprintf_r+0x20e>
 8021e2a:	2300      	movs	r3, #0
 8021e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8021e30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8021e34:	f10a 0a01 	add.w	sl, sl, #1
 8021e38:	9304      	str	r3, [sp, #16]
 8021e3a:	9307      	str	r3, [sp, #28]
 8021e3c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8021e40:	931a      	str	r3, [sp, #104]	; 0x68
 8021e42:	4654      	mov	r4, sl
 8021e44:	2205      	movs	r2, #5
 8021e46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021e4a:	4858      	ldr	r0, [pc, #352]	; (8021fac <_vfiprintf_r+0x24c>)
 8021e4c:	f7fe f9e0 	bl	8020210 <memchr>
 8021e50:	9a04      	ldr	r2, [sp, #16]
 8021e52:	b9d8      	cbnz	r0, 8021e8c <_vfiprintf_r+0x12c>
 8021e54:	06d1      	lsls	r1, r2, #27
 8021e56:	bf44      	itt	mi
 8021e58:	2320      	movmi	r3, #32
 8021e5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8021e5e:	0713      	lsls	r3, r2, #28
 8021e60:	bf44      	itt	mi
 8021e62:	232b      	movmi	r3, #43	; 0x2b
 8021e64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8021e68:	f89a 3000 	ldrb.w	r3, [sl]
 8021e6c:	2b2a      	cmp	r3, #42	; 0x2a
 8021e6e:	d015      	beq.n	8021e9c <_vfiprintf_r+0x13c>
 8021e70:	9a07      	ldr	r2, [sp, #28]
 8021e72:	4654      	mov	r4, sl
 8021e74:	2000      	movs	r0, #0
 8021e76:	f04f 0c0a 	mov.w	ip, #10
 8021e7a:	4621      	mov	r1, r4
 8021e7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021e80:	3b30      	subs	r3, #48	; 0x30
 8021e82:	2b09      	cmp	r3, #9
 8021e84:	d94e      	bls.n	8021f24 <_vfiprintf_r+0x1c4>
 8021e86:	b1b0      	cbz	r0, 8021eb6 <_vfiprintf_r+0x156>
 8021e88:	9207      	str	r2, [sp, #28]
 8021e8a:	e014      	b.n	8021eb6 <_vfiprintf_r+0x156>
 8021e8c:	eba0 0308 	sub.w	r3, r0, r8
 8021e90:	fa09 f303 	lsl.w	r3, r9, r3
 8021e94:	4313      	orrs	r3, r2
 8021e96:	9304      	str	r3, [sp, #16]
 8021e98:	46a2      	mov	sl, r4
 8021e9a:	e7d2      	b.n	8021e42 <_vfiprintf_r+0xe2>
 8021e9c:	9b03      	ldr	r3, [sp, #12]
 8021e9e:	1d19      	adds	r1, r3, #4
 8021ea0:	681b      	ldr	r3, [r3, #0]
 8021ea2:	9103      	str	r1, [sp, #12]
 8021ea4:	2b00      	cmp	r3, #0
 8021ea6:	bfbb      	ittet	lt
 8021ea8:	425b      	neglt	r3, r3
 8021eaa:	f042 0202 	orrlt.w	r2, r2, #2
 8021eae:	9307      	strge	r3, [sp, #28]
 8021eb0:	9307      	strlt	r3, [sp, #28]
 8021eb2:	bfb8      	it	lt
 8021eb4:	9204      	strlt	r2, [sp, #16]
 8021eb6:	7823      	ldrb	r3, [r4, #0]
 8021eb8:	2b2e      	cmp	r3, #46	; 0x2e
 8021eba:	d10c      	bne.n	8021ed6 <_vfiprintf_r+0x176>
 8021ebc:	7863      	ldrb	r3, [r4, #1]
 8021ebe:	2b2a      	cmp	r3, #42	; 0x2a
 8021ec0:	d135      	bne.n	8021f2e <_vfiprintf_r+0x1ce>
 8021ec2:	9b03      	ldr	r3, [sp, #12]
 8021ec4:	1d1a      	adds	r2, r3, #4
 8021ec6:	681b      	ldr	r3, [r3, #0]
 8021ec8:	9203      	str	r2, [sp, #12]
 8021eca:	2b00      	cmp	r3, #0
 8021ecc:	bfb8      	it	lt
 8021ece:	f04f 33ff 	movlt.w	r3, #4294967295
 8021ed2:	3402      	adds	r4, #2
 8021ed4:	9305      	str	r3, [sp, #20]
 8021ed6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8021fbc <_vfiprintf_r+0x25c>
 8021eda:	7821      	ldrb	r1, [r4, #0]
 8021edc:	2203      	movs	r2, #3
 8021ede:	4650      	mov	r0, sl
 8021ee0:	f7fe f996 	bl	8020210 <memchr>
 8021ee4:	b140      	cbz	r0, 8021ef8 <_vfiprintf_r+0x198>
 8021ee6:	2340      	movs	r3, #64	; 0x40
 8021ee8:	eba0 000a 	sub.w	r0, r0, sl
 8021eec:	fa03 f000 	lsl.w	r0, r3, r0
 8021ef0:	9b04      	ldr	r3, [sp, #16]
 8021ef2:	4303      	orrs	r3, r0
 8021ef4:	3401      	adds	r4, #1
 8021ef6:	9304      	str	r3, [sp, #16]
 8021ef8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021efc:	482c      	ldr	r0, [pc, #176]	; (8021fb0 <_vfiprintf_r+0x250>)
 8021efe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8021f02:	2206      	movs	r2, #6
 8021f04:	f7fe f984 	bl	8020210 <memchr>
 8021f08:	2800      	cmp	r0, #0
 8021f0a:	d03f      	beq.n	8021f8c <_vfiprintf_r+0x22c>
 8021f0c:	4b29      	ldr	r3, [pc, #164]	; (8021fb4 <_vfiprintf_r+0x254>)
 8021f0e:	bb1b      	cbnz	r3, 8021f58 <_vfiprintf_r+0x1f8>
 8021f10:	9b03      	ldr	r3, [sp, #12]
 8021f12:	3307      	adds	r3, #7
 8021f14:	f023 0307 	bic.w	r3, r3, #7
 8021f18:	3308      	adds	r3, #8
 8021f1a:	9303      	str	r3, [sp, #12]
 8021f1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021f1e:	443b      	add	r3, r7
 8021f20:	9309      	str	r3, [sp, #36]	; 0x24
 8021f22:	e767      	b.n	8021df4 <_vfiprintf_r+0x94>
 8021f24:	fb0c 3202 	mla	r2, ip, r2, r3
 8021f28:	460c      	mov	r4, r1
 8021f2a:	2001      	movs	r0, #1
 8021f2c:	e7a5      	b.n	8021e7a <_vfiprintf_r+0x11a>
 8021f2e:	2300      	movs	r3, #0
 8021f30:	3401      	adds	r4, #1
 8021f32:	9305      	str	r3, [sp, #20]
 8021f34:	4619      	mov	r1, r3
 8021f36:	f04f 0c0a 	mov.w	ip, #10
 8021f3a:	4620      	mov	r0, r4
 8021f3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8021f40:	3a30      	subs	r2, #48	; 0x30
 8021f42:	2a09      	cmp	r2, #9
 8021f44:	d903      	bls.n	8021f4e <_vfiprintf_r+0x1ee>
 8021f46:	2b00      	cmp	r3, #0
 8021f48:	d0c5      	beq.n	8021ed6 <_vfiprintf_r+0x176>
 8021f4a:	9105      	str	r1, [sp, #20]
 8021f4c:	e7c3      	b.n	8021ed6 <_vfiprintf_r+0x176>
 8021f4e:	fb0c 2101 	mla	r1, ip, r1, r2
 8021f52:	4604      	mov	r4, r0
 8021f54:	2301      	movs	r3, #1
 8021f56:	e7f0      	b.n	8021f3a <_vfiprintf_r+0x1da>
 8021f58:	ab03      	add	r3, sp, #12
 8021f5a:	9300      	str	r3, [sp, #0]
 8021f5c:	462a      	mov	r2, r5
 8021f5e:	4b16      	ldr	r3, [pc, #88]	; (8021fb8 <_vfiprintf_r+0x258>)
 8021f60:	a904      	add	r1, sp, #16
 8021f62:	4630      	mov	r0, r6
 8021f64:	f3af 8000 	nop.w
 8021f68:	4607      	mov	r7, r0
 8021f6a:	1c78      	adds	r0, r7, #1
 8021f6c:	d1d6      	bne.n	8021f1c <_vfiprintf_r+0x1bc>
 8021f6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8021f70:	07d9      	lsls	r1, r3, #31
 8021f72:	d405      	bmi.n	8021f80 <_vfiprintf_r+0x220>
 8021f74:	89ab      	ldrh	r3, [r5, #12]
 8021f76:	059a      	lsls	r2, r3, #22
 8021f78:	d402      	bmi.n	8021f80 <_vfiprintf_r+0x220>
 8021f7a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8021f7c:	f7ff fe6b 	bl	8021c56 <__retarget_lock_release_recursive>
 8021f80:	89ab      	ldrh	r3, [r5, #12]
 8021f82:	065b      	lsls	r3, r3, #25
 8021f84:	f53f af12 	bmi.w	8021dac <_vfiprintf_r+0x4c>
 8021f88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8021f8a:	e711      	b.n	8021db0 <_vfiprintf_r+0x50>
 8021f8c:	ab03      	add	r3, sp, #12
 8021f8e:	9300      	str	r3, [sp, #0]
 8021f90:	462a      	mov	r2, r5
 8021f92:	4b09      	ldr	r3, [pc, #36]	; (8021fb8 <_vfiprintf_r+0x258>)
 8021f94:	a904      	add	r1, sp, #16
 8021f96:	4630      	mov	r0, r6
 8021f98:	f000 f880 	bl	802209c <_printf_i>
 8021f9c:	e7e4      	b.n	8021f68 <_vfiprintf_r+0x208>
 8021f9e:	bf00      	nop
 8021fa0:	0802295c 	.word	0x0802295c
 8021fa4:	0802297c 	.word	0x0802297c
 8021fa8:	0802293c 	.word	0x0802293c
 8021fac:	0802299c 	.word	0x0802299c
 8021fb0:	080229a6 	.word	0x080229a6
 8021fb4:	00000000 	.word	0x00000000
 8021fb8:	08021d3b 	.word	0x08021d3b
 8021fbc:	080229a2 	.word	0x080229a2

08021fc0 <_printf_common>:
 8021fc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021fc4:	4616      	mov	r6, r2
 8021fc6:	4699      	mov	r9, r3
 8021fc8:	688a      	ldr	r2, [r1, #8]
 8021fca:	690b      	ldr	r3, [r1, #16]
 8021fcc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8021fd0:	4293      	cmp	r3, r2
 8021fd2:	bfb8      	it	lt
 8021fd4:	4613      	movlt	r3, r2
 8021fd6:	6033      	str	r3, [r6, #0]
 8021fd8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8021fdc:	4607      	mov	r7, r0
 8021fde:	460c      	mov	r4, r1
 8021fe0:	b10a      	cbz	r2, 8021fe6 <_printf_common+0x26>
 8021fe2:	3301      	adds	r3, #1
 8021fe4:	6033      	str	r3, [r6, #0]
 8021fe6:	6823      	ldr	r3, [r4, #0]
 8021fe8:	0699      	lsls	r1, r3, #26
 8021fea:	bf42      	ittt	mi
 8021fec:	6833      	ldrmi	r3, [r6, #0]
 8021fee:	3302      	addmi	r3, #2
 8021ff0:	6033      	strmi	r3, [r6, #0]
 8021ff2:	6825      	ldr	r5, [r4, #0]
 8021ff4:	f015 0506 	ands.w	r5, r5, #6
 8021ff8:	d106      	bne.n	8022008 <_printf_common+0x48>
 8021ffa:	f104 0a19 	add.w	sl, r4, #25
 8021ffe:	68e3      	ldr	r3, [r4, #12]
 8022000:	6832      	ldr	r2, [r6, #0]
 8022002:	1a9b      	subs	r3, r3, r2
 8022004:	42ab      	cmp	r3, r5
 8022006:	dc26      	bgt.n	8022056 <_printf_common+0x96>
 8022008:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802200c:	1e13      	subs	r3, r2, #0
 802200e:	6822      	ldr	r2, [r4, #0]
 8022010:	bf18      	it	ne
 8022012:	2301      	movne	r3, #1
 8022014:	0692      	lsls	r2, r2, #26
 8022016:	d42b      	bmi.n	8022070 <_printf_common+0xb0>
 8022018:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802201c:	4649      	mov	r1, r9
 802201e:	4638      	mov	r0, r7
 8022020:	47c0      	blx	r8
 8022022:	3001      	adds	r0, #1
 8022024:	d01e      	beq.n	8022064 <_printf_common+0xa4>
 8022026:	6823      	ldr	r3, [r4, #0]
 8022028:	68e5      	ldr	r5, [r4, #12]
 802202a:	6832      	ldr	r2, [r6, #0]
 802202c:	f003 0306 	and.w	r3, r3, #6
 8022030:	2b04      	cmp	r3, #4
 8022032:	bf08      	it	eq
 8022034:	1aad      	subeq	r5, r5, r2
 8022036:	68a3      	ldr	r3, [r4, #8]
 8022038:	6922      	ldr	r2, [r4, #16]
 802203a:	bf0c      	ite	eq
 802203c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8022040:	2500      	movne	r5, #0
 8022042:	4293      	cmp	r3, r2
 8022044:	bfc4      	itt	gt
 8022046:	1a9b      	subgt	r3, r3, r2
 8022048:	18ed      	addgt	r5, r5, r3
 802204a:	2600      	movs	r6, #0
 802204c:	341a      	adds	r4, #26
 802204e:	42b5      	cmp	r5, r6
 8022050:	d11a      	bne.n	8022088 <_printf_common+0xc8>
 8022052:	2000      	movs	r0, #0
 8022054:	e008      	b.n	8022068 <_printf_common+0xa8>
 8022056:	2301      	movs	r3, #1
 8022058:	4652      	mov	r2, sl
 802205a:	4649      	mov	r1, r9
 802205c:	4638      	mov	r0, r7
 802205e:	47c0      	blx	r8
 8022060:	3001      	adds	r0, #1
 8022062:	d103      	bne.n	802206c <_printf_common+0xac>
 8022064:	f04f 30ff 	mov.w	r0, #4294967295
 8022068:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802206c:	3501      	adds	r5, #1
 802206e:	e7c6      	b.n	8021ffe <_printf_common+0x3e>
 8022070:	18e1      	adds	r1, r4, r3
 8022072:	1c5a      	adds	r2, r3, #1
 8022074:	2030      	movs	r0, #48	; 0x30
 8022076:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802207a:	4422      	add	r2, r4
 802207c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8022080:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8022084:	3302      	adds	r3, #2
 8022086:	e7c7      	b.n	8022018 <_printf_common+0x58>
 8022088:	2301      	movs	r3, #1
 802208a:	4622      	mov	r2, r4
 802208c:	4649      	mov	r1, r9
 802208e:	4638      	mov	r0, r7
 8022090:	47c0      	blx	r8
 8022092:	3001      	adds	r0, #1
 8022094:	d0e6      	beq.n	8022064 <_printf_common+0xa4>
 8022096:	3601      	adds	r6, #1
 8022098:	e7d9      	b.n	802204e <_printf_common+0x8e>
	...

0802209c <_printf_i>:
 802209c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80220a0:	460c      	mov	r4, r1
 80220a2:	4691      	mov	r9, r2
 80220a4:	7e27      	ldrb	r7, [r4, #24]
 80220a6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80220a8:	2f78      	cmp	r7, #120	; 0x78
 80220aa:	4680      	mov	r8, r0
 80220ac:	469a      	mov	sl, r3
 80220ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80220b2:	d807      	bhi.n	80220c4 <_printf_i+0x28>
 80220b4:	2f62      	cmp	r7, #98	; 0x62
 80220b6:	d80a      	bhi.n	80220ce <_printf_i+0x32>
 80220b8:	2f00      	cmp	r7, #0
 80220ba:	f000 80d8 	beq.w	802226e <_printf_i+0x1d2>
 80220be:	2f58      	cmp	r7, #88	; 0x58
 80220c0:	f000 80a3 	beq.w	802220a <_printf_i+0x16e>
 80220c4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80220c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80220cc:	e03a      	b.n	8022144 <_printf_i+0xa8>
 80220ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80220d2:	2b15      	cmp	r3, #21
 80220d4:	d8f6      	bhi.n	80220c4 <_printf_i+0x28>
 80220d6:	a001      	add	r0, pc, #4	; (adr r0, 80220dc <_printf_i+0x40>)
 80220d8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80220dc:	08022135 	.word	0x08022135
 80220e0:	08022149 	.word	0x08022149
 80220e4:	080220c5 	.word	0x080220c5
 80220e8:	080220c5 	.word	0x080220c5
 80220ec:	080220c5 	.word	0x080220c5
 80220f0:	080220c5 	.word	0x080220c5
 80220f4:	08022149 	.word	0x08022149
 80220f8:	080220c5 	.word	0x080220c5
 80220fc:	080220c5 	.word	0x080220c5
 8022100:	080220c5 	.word	0x080220c5
 8022104:	080220c5 	.word	0x080220c5
 8022108:	08022255 	.word	0x08022255
 802210c:	08022179 	.word	0x08022179
 8022110:	08022237 	.word	0x08022237
 8022114:	080220c5 	.word	0x080220c5
 8022118:	080220c5 	.word	0x080220c5
 802211c:	08022277 	.word	0x08022277
 8022120:	080220c5 	.word	0x080220c5
 8022124:	08022179 	.word	0x08022179
 8022128:	080220c5 	.word	0x080220c5
 802212c:	080220c5 	.word	0x080220c5
 8022130:	0802223f 	.word	0x0802223f
 8022134:	680b      	ldr	r3, [r1, #0]
 8022136:	1d1a      	adds	r2, r3, #4
 8022138:	681b      	ldr	r3, [r3, #0]
 802213a:	600a      	str	r2, [r1, #0]
 802213c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8022140:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8022144:	2301      	movs	r3, #1
 8022146:	e0a3      	b.n	8022290 <_printf_i+0x1f4>
 8022148:	6825      	ldr	r5, [r4, #0]
 802214a:	6808      	ldr	r0, [r1, #0]
 802214c:	062e      	lsls	r6, r5, #24
 802214e:	f100 0304 	add.w	r3, r0, #4
 8022152:	d50a      	bpl.n	802216a <_printf_i+0xce>
 8022154:	6805      	ldr	r5, [r0, #0]
 8022156:	600b      	str	r3, [r1, #0]
 8022158:	2d00      	cmp	r5, #0
 802215a:	da03      	bge.n	8022164 <_printf_i+0xc8>
 802215c:	232d      	movs	r3, #45	; 0x2d
 802215e:	426d      	negs	r5, r5
 8022160:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8022164:	485e      	ldr	r0, [pc, #376]	; (80222e0 <_printf_i+0x244>)
 8022166:	230a      	movs	r3, #10
 8022168:	e019      	b.n	802219e <_printf_i+0x102>
 802216a:	f015 0f40 	tst.w	r5, #64	; 0x40
 802216e:	6805      	ldr	r5, [r0, #0]
 8022170:	600b      	str	r3, [r1, #0]
 8022172:	bf18      	it	ne
 8022174:	b22d      	sxthne	r5, r5
 8022176:	e7ef      	b.n	8022158 <_printf_i+0xbc>
 8022178:	680b      	ldr	r3, [r1, #0]
 802217a:	6825      	ldr	r5, [r4, #0]
 802217c:	1d18      	adds	r0, r3, #4
 802217e:	6008      	str	r0, [r1, #0]
 8022180:	0628      	lsls	r0, r5, #24
 8022182:	d501      	bpl.n	8022188 <_printf_i+0xec>
 8022184:	681d      	ldr	r5, [r3, #0]
 8022186:	e002      	b.n	802218e <_printf_i+0xf2>
 8022188:	0669      	lsls	r1, r5, #25
 802218a:	d5fb      	bpl.n	8022184 <_printf_i+0xe8>
 802218c:	881d      	ldrh	r5, [r3, #0]
 802218e:	4854      	ldr	r0, [pc, #336]	; (80222e0 <_printf_i+0x244>)
 8022190:	2f6f      	cmp	r7, #111	; 0x6f
 8022192:	bf0c      	ite	eq
 8022194:	2308      	moveq	r3, #8
 8022196:	230a      	movne	r3, #10
 8022198:	2100      	movs	r1, #0
 802219a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802219e:	6866      	ldr	r6, [r4, #4]
 80221a0:	60a6      	str	r6, [r4, #8]
 80221a2:	2e00      	cmp	r6, #0
 80221a4:	bfa2      	ittt	ge
 80221a6:	6821      	ldrge	r1, [r4, #0]
 80221a8:	f021 0104 	bicge.w	r1, r1, #4
 80221ac:	6021      	strge	r1, [r4, #0]
 80221ae:	b90d      	cbnz	r5, 80221b4 <_printf_i+0x118>
 80221b0:	2e00      	cmp	r6, #0
 80221b2:	d04d      	beq.n	8022250 <_printf_i+0x1b4>
 80221b4:	4616      	mov	r6, r2
 80221b6:	fbb5 f1f3 	udiv	r1, r5, r3
 80221ba:	fb03 5711 	mls	r7, r3, r1, r5
 80221be:	5dc7      	ldrb	r7, [r0, r7]
 80221c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80221c4:	462f      	mov	r7, r5
 80221c6:	42bb      	cmp	r3, r7
 80221c8:	460d      	mov	r5, r1
 80221ca:	d9f4      	bls.n	80221b6 <_printf_i+0x11a>
 80221cc:	2b08      	cmp	r3, #8
 80221ce:	d10b      	bne.n	80221e8 <_printf_i+0x14c>
 80221d0:	6823      	ldr	r3, [r4, #0]
 80221d2:	07df      	lsls	r7, r3, #31
 80221d4:	d508      	bpl.n	80221e8 <_printf_i+0x14c>
 80221d6:	6923      	ldr	r3, [r4, #16]
 80221d8:	6861      	ldr	r1, [r4, #4]
 80221da:	4299      	cmp	r1, r3
 80221dc:	bfde      	ittt	le
 80221de:	2330      	movle	r3, #48	; 0x30
 80221e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80221e4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80221e8:	1b92      	subs	r2, r2, r6
 80221ea:	6122      	str	r2, [r4, #16]
 80221ec:	f8cd a000 	str.w	sl, [sp]
 80221f0:	464b      	mov	r3, r9
 80221f2:	aa03      	add	r2, sp, #12
 80221f4:	4621      	mov	r1, r4
 80221f6:	4640      	mov	r0, r8
 80221f8:	f7ff fee2 	bl	8021fc0 <_printf_common>
 80221fc:	3001      	adds	r0, #1
 80221fe:	d14c      	bne.n	802229a <_printf_i+0x1fe>
 8022200:	f04f 30ff 	mov.w	r0, #4294967295
 8022204:	b004      	add	sp, #16
 8022206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802220a:	4835      	ldr	r0, [pc, #212]	; (80222e0 <_printf_i+0x244>)
 802220c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8022210:	6823      	ldr	r3, [r4, #0]
 8022212:	680e      	ldr	r6, [r1, #0]
 8022214:	061f      	lsls	r7, r3, #24
 8022216:	f856 5b04 	ldr.w	r5, [r6], #4
 802221a:	600e      	str	r6, [r1, #0]
 802221c:	d514      	bpl.n	8022248 <_printf_i+0x1ac>
 802221e:	07d9      	lsls	r1, r3, #31
 8022220:	bf44      	itt	mi
 8022222:	f043 0320 	orrmi.w	r3, r3, #32
 8022226:	6023      	strmi	r3, [r4, #0]
 8022228:	b91d      	cbnz	r5, 8022232 <_printf_i+0x196>
 802222a:	6823      	ldr	r3, [r4, #0]
 802222c:	f023 0320 	bic.w	r3, r3, #32
 8022230:	6023      	str	r3, [r4, #0]
 8022232:	2310      	movs	r3, #16
 8022234:	e7b0      	b.n	8022198 <_printf_i+0xfc>
 8022236:	6823      	ldr	r3, [r4, #0]
 8022238:	f043 0320 	orr.w	r3, r3, #32
 802223c:	6023      	str	r3, [r4, #0]
 802223e:	2378      	movs	r3, #120	; 0x78
 8022240:	4828      	ldr	r0, [pc, #160]	; (80222e4 <_printf_i+0x248>)
 8022242:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8022246:	e7e3      	b.n	8022210 <_printf_i+0x174>
 8022248:	065e      	lsls	r6, r3, #25
 802224a:	bf48      	it	mi
 802224c:	b2ad      	uxthmi	r5, r5
 802224e:	e7e6      	b.n	802221e <_printf_i+0x182>
 8022250:	4616      	mov	r6, r2
 8022252:	e7bb      	b.n	80221cc <_printf_i+0x130>
 8022254:	680b      	ldr	r3, [r1, #0]
 8022256:	6826      	ldr	r6, [r4, #0]
 8022258:	6960      	ldr	r0, [r4, #20]
 802225a:	1d1d      	adds	r5, r3, #4
 802225c:	600d      	str	r5, [r1, #0]
 802225e:	0635      	lsls	r5, r6, #24
 8022260:	681b      	ldr	r3, [r3, #0]
 8022262:	d501      	bpl.n	8022268 <_printf_i+0x1cc>
 8022264:	6018      	str	r0, [r3, #0]
 8022266:	e002      	b.n	802226e <_printf_i+0x1d2>
 8022268:	0671      	lsls	r1, r6, #25
 802226a:	d5fb      	bpl.n	8022264 <_printf_i+0x1c8>
 802226c:	8018      	strh	r0, [r3, #0]
 802226e:	2300      	movs	r3, #0
 8022270:	6123      	str	r3, [r4, #16]
 8022272:	4616      	mov	r6, r2
 8022274:	e7ba      	b.n	80221ec <_printf_i+0x150>
 8022276:	680b      	ldr	r3, [r1, #0]
 8022278:	1d1a      	adds	r2, r3, #4
 802227a:	600a      	str	r2, [r1, #0]
 802227c:	681e      	ldr	r6, [r3, #0]
 802227e:	6862      	ldr	r2, [r4, #4]
 8022280:	2100      	movs	r1, #0
 8022282:	4630      	mov	r0, r6
 8022284:	f7fd ffc4 	bl	8020210 <memchr>
 8022288:	b108      	cbz	r0, 802228e <_printf_i+0x1f2>
 802228a:	1b80      	subs	r0, r0, r6
 802228c:	6060      	str	r0, [r4, #4]
 802228e:	6863      	ldr	r3, [r4, #4]
 8022290:	6123      	str	r3, [r4, #16]
 8022292:	2300      	movs	r3, #0
 8022294:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8022298:	e7a8      	b.n	80221ec <_printf_i+0x150>
 802229a:	6923      	ldr	r3, [r4, #16]
 802229c:	4632      	mov	r2, r6
 802229e:	4649      	mov	r1, r9
 80222a0:	4640      	mov	r0, r8
 80222a2:	47d0      	blx	sl
 80222a4:	3001      	adds	r0, #1
 80222a6:	d0ab      	beq.n	8022200 <_printf_i+0x164>
 80222a8:	6823      	ldr	r3, [r4, #0]
 80222aa:	079b      	lsls	r3, r3, #30
 80222ac:	d413      	bmi.n	80222d6 <_printf_i+0x23a>
 80222ae:	68e0      	ldr	r0, [r4, #12]
 80222b0:	9b03      	ldr	r3, [sp, #12]
 80222b2:	4298      	cmp	r0, r3
 80222b4:	bfb8      	it	lt
 80222b6:	4618      	movlt	r0, r3
 80222b8:	e7a4      	b.n	8022204 <_printf_i+0x168>
 80222ba:	2301      	movs	r3, #1
 80222bc:	4632      	mov	r2, r6
 80222be:	4649      	mov	r1, r9
 80222c0:	4640      	mov	r0, r8
 80222c2:	47d0      	blx	sl
 80222c4:	3001      	adds	r0, #1
 80222c6:	d09b      	beq.n	8022200 <_printf_i+0x164>
 80222c8:	3501      	adds	r5, #1
 80222ca:	68e3      	ldr	r3, [r4, #12]
 80222cc:	9903      	ldr	r1, [sp, #12]
 80222ce:	1a5b      	subs	r3, r3, r1
 80222d0:	42ab      	cmp	r3, r5
 80222d2:	dcf2      	bgt.n	80222ba <_printf_i+0x21e>
 80222d4:	e7eb      	b.n	80222ae <_printf_i+0x212>
 80222d6:	2500      	movs	r5, #0
 80222d8:	f104 0619 	add.w	r6, r4, #25
 80222dc:	e7f5      	b.n	80222ca <_printf_i+0x22e>
 80222de:	bf00      	nop
 80222e0:	080229ad 	.word	0x080229ad
 80222e4:	080229be 	.word	0x080229be

080222e8 <_sbrk_r>:
 80222e8:	b538      	push	{r3, r4, r5, lr}
 80222ea:	4d06      	ldr	r5, [pc, #24]	; (8022304 <_sbrk_r+0x1c>)
 80222ec:	2300      	movs	r3, #0
 80222ee:	4604      	mov	r4, r0
 80222f0:	4608      	mov	r0, r1
 80222f2:	602b      	str	r3, [r5, #0]
 80222f4:	f7fe fb60 	bl	80209b8 <_sbrk>
 80222f8:	1c43      	adds	r3, r0, #1
 80222fa:	d102      	bne.n	8022302 <_sbrk_r+0x1a>
 80222fc:	682b      	ldr	r3, [r5, #0]
 80222fe:	b103      	cbz	r3, 8022302 <_sbrk_r+0x1a>
 8022300:	6023      	str	r3, [r4, #0]
 8022302:	bd38      	pop	{r3, r4, r5, pc}
 8022304:	20000130 	.word	0x20000130

08022308 <__sread>:
 8022308:	b510      	push	{r4, lr}
 802230a:	460c      	mov	r4, r1
 802230c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022310:	f000 fab4 	bl	802287c <_read_r>
 8022314:	2800      	cmp	r0, #0
 8022316:	bfab      	itete	ge
 8022318:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802231a:	89a3      	ldrhlt	r3, [r4, #12]
 802231c:	181b      	addge	r3, r3, r0
 802231e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8022322:	bfac      	ite	ge
 8022324:	6563      	strge	r3, [r4, #84]	; 0x54
 8022326:	81a3      	strhlt	r3, [r4, #12]
 8022328:	bd10      	pop	{r4, pc}

0802232a <__swrite>:
 802232a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802232e:	461f      	mov	r7, r3
 8022330:	898b      	ldrh	r3, [r1, #12]
 8022332:	05db      	lsls	r3, r3, #23
 8022334:	4605      	mov	r5, r0
 8022336:	460c      	mov	r4, r1
 8022338:	4616      	mov	r6, r2
 802233a:	d505      	bpl.n	8022348 <__swrite+0x1e>
 802233c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022340:	2302      	movs	r3, #2
 8022342:	2200      	movs	r2, #0
 8022344:	f000 f9c8 	bl	80226d8 <_lseek_r>
 8022348:	89a3      	ldrh	r3, [r4, #12]
 802234a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802234e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8022352:	81a3      	strh	r3, [r4, #12]
 8022354:	4632      	mov	r2, r6
 8022356:	463b      	mov	r3, r7
 8022358:	4628      	mov	r0, r5
 802235a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802235e:	f000 b869 	b.w	8022434 <_write_r>

08022362 <__sseek>:
 8022362:	b510      	push	{r4, lr}
 8022364:	460c      	mov	r4, r1
 8022366:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802236a:	f000 f9b5 	bl	80226d8 <_lseek_r>
 802236e:	1c43      	adds	r3, r0, #1
 8022370:	89a3      	ldrh	r3, [r4, #12]
 8022372:	bf15      	itete	ne
 8022374:	6560      	strne	r0, [r4, #84]	; 0x54
 8022376:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802237a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802237e:	81a3      	strheq	r3, [r4, #12]
 8022380:	bf18      	it	ne
 8022382:	81a3      	strhne	r3, [r4, #12]
 8022384:	bd10      	pop	{r4, pc}

08022386 <__sclose>:
 8022386:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802238a:	f000 b8d3 	b.w	8022534 <_close_r>
	...

08022390 <__swbuf_r>:
 8022390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022392:	460e      	mov	r6, r1
 8022394:	4614      	mov	r4, r2
 8022396:	4605      	mov	r5, r0
 8022398:	b118      	cbz	r0, 80223a2 <__swbuf_r+0x12>
 802239a:	6983      	ldr	r3, [r0, #24]
 802239c:	b90b      	cbnz	r3, 80223a2 <__swbuf_r+0x12>
 802239e:	f7ff fbbb 	bl	8021b18 <__sinit>
 80223a2:	4b21      	ldr	r3, [pc, #132]	; (8022428 <__swbuf_r+0x98>)
 80223a4:	429c      	cmp	r4, r3
 80223a6:	d12b      	bne.n	8022400 <__swbuf_r+0x70>
 80223a8:	686c      	ldr	r4, [r5, #4]
 80223aa:	69a3      	ldr	r3, [r4, #24]
 80223ac:	60a3      	str	r3, [r4, #8]
 80223ae:	89a3      	ldrh	r3, [r4, #12]
 80223b0:	071a      	lsls	r2, r3, #28
 80223b2:	d52f      	bpl.n	8022414 <__swbuf_r+0x84>
 80223b4:	6923      	ldr	r3, [r4, #16]
 80223b6:	b36b      	cbz	r3, 8022414 <__swbuf_r+0x84>
 80223b8:	6923      	ldr	r3, [r4, #16]
 80223ba:	6820      	ldr	r0, [r4, #0]
 80223bc:	1ac0      	subs	r0, r0, r3
 80223be:	6963      	ldr	r3, [r4, #20]
 80223c0:	b2f6      	uxtb	r6, r6
 80223c2:	4283      	cmp	r3, r0
 80223c4:	4637      	mov	r7, r6
 80223c6:	dc04      	bgt.n	80223d2 <__swbuf_r+0x42>
 80223c8:	4621      	mov	r1, r4
 80223ca:	4628      	mov	r0, r5
 80223cc:	f000 f948 	bl	8022660 <_fflush_r>
 80223d0:	bb30      	cbnz	r0, 8022420 <__swbuf_r+0x90>
 80223d2:	68a3      	ldr	r3, [r4, #8]
 80223d4:	3b01      	subs	r3, #1
 80223d6:	60a3      	str	r3, [r4, #8]
 80223d8:	6823      	ldr	r3, [r4, #0]
 80223da:	1c5a      	adds	r2, r3, #1
 80223dc:	6022      	str	r2, [r4, #0]
 80223de:	701e      	strb	r6, [r3, #0]
 80223e0:	6963      	ldr	r3, [r4, #20]
 80223e2:	3001      	adds	r0, #1
 80223e4:	4283      	cmp	r3, r0
 80223e6:	d004      	beq.n	80223f2 <__swbuf_r+0x62>
 80223e8:	89a3      	ldrh	r3, [r4, #12]
 80223ea:	07db      	lsls	r3, r3, #31
 80223ec:	d506      	bpl.n	80223fc <__swbuf_r+0x6c>
 80223ee:	2e0a      	cmp	r6, #10
 80223f0:	d104      	bne.n	80223fc <__swbuf_r+0x6c>
 80223f2:	4621      	mov	r1, r4
 80223f4:	4628      	mov	r0, r5
 80223f6:	f000 f933 	bl	8022660 <_fflush_r>
 80223fa:	b988      	cbnz	r0, 8022420 <__swbuf_r+0x90>
 80223fc:	4638      	mov	r0, r7
 80223fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022400:	4b0a      	ldr	r3, [pc, #40]	; (802242c <__swbuf_r+0x9c>)
 8022402:	429c      	cmp	r4, r3
 8022404:	d101      	bne.n	802240a <__swbuf_r+0x7a>
 8022406:	68ac      	ldr	r4, [r5, #8]
 8022408:	e7cf      	b.n	80223aa <__swbuf_r+0x1a>
 802240a:	4b09      	ldr	r3, [pc, #36]	; (8022430 <__swbuf_r+0xa0>)
 802240c:	429c      	cmp	r4, r3
 802240e:	bf08      	it	eq
 8022410:	68ec      	ldreq	r4, [r5, #12]
 8022412:	e7ca      	b.n	80223aa <__swbuf_r+0x1a>
 8022414:	4621      	mov	r1, r4
 8022416:	4628      	mov	r0, r5
 8022418:	f000 f81e 	bl	8022458 <__swsetup_r>
 802241c:	2800      	cmp	r0, #0
 802241e:	d0cb      	beq.n	80223b8 <__swbuf_r+0x28>
 8022420:	f04f 37ff 	mov.w	r7, #4294967295
 8022424:	e7ea      	b.n	80223fc <__swbuf_r+0x6c>
 8022426:	bf00      	nop
 8022428:	0802295c 	.word	0x0802295c
 802242c:	0802297c 	.word	0x0802297c
 8022430:	0802293c 	.word	0x0802293c

08022434 <_write_r>:
 8022434:	b538      	push	{r3, r4, r5, lr}
 8022436:	4d07      	ldr	r5, [pc, #28]	; (8022454 <_write_r+0x20>)
 8022438:	4604      	mov	r4, r0
 802243a:	4608      	mov	r0, r1
 802243c:	4611      	mov	r1, r2
 802243e:	2200      	movs	r2, #0
 8022440:	602a      	str	r2, [r5, #0]
 8022442:	461a      	mov	r2, r3
 8022444:	f7fe fa9f 	bl	8020986 <_write>
 8022448:	1c43      	adds	r3, r0, #1
 802244a:	d102      	bne.n	8022452 <_write_r+0x1e>
 802244c:	682b      	ldr	r3, [r5, #0]
 802244e:	b103      	cbz	r3, 8022452 <_write_r+0x1e>
 8022450:	6023      	str	r3, [r4, #0]
 8022452:	bd38      	pop	{r3, r4, r5, pc}
 8022454:	20000130 	.word	0x20000130

08022458 <__swsetup_r>:
 8022458:	4b32      	ldr	r3, [pc, #200]	; (8022524 <__swsetup_r+0xcc>)
 802245a:	b570      	push	{r4, r5, r6, lr}
 802245c:	681d      	ldr	r5, [r3, #0]
 802245e:	4606      	mov	r6, r0
 8022460:	460c      	mov	r4, r1
 8022462:	b125      	cbz	r5, 802246e <__swsetup_r+0x16>
 8022464:	69ab      	ldr	r3, [r5, #24]
 8022466:	b913      	cbnz	r3, 802246e <__swsetup_r+0x16>
 8022468:	4628      	mov	r0, r5
 802246a:	f7ff fb55 	bl	8021b18 <__sinit>
 802246e:	4b2e      	ldr	r3, [pc, #184]	; (8022528 <__swsetup_r+0xd0>)
 8022470:	429c      	cmp	r4, r3
 8022472:	d10f      	bne.n	8022494 <__swsetup_r+0x3c>
 8022474:	686c      	ldr	r4, [r5, #4]
 8022476:	89a3      	ldrh	r3, [r4, #12]
 8022478:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802247c:	0719      	lsls	r1, r3, #28
 802247e:	d42c      	bmi.n	80224da <__swsetup_r+0x82>
 8022480:	06dd      	lsls	r5, r3, #27
 8022482:	d411      	bmi.n	80224a8 <__swsetup_r+0x50>
 8022484:	2309      	movs	r3, #9
 8022486:	6033      	str	r3, [r6, #0]
 8022488:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802248c:	81a3      	strh	r3, [r4, #12]
 802248e:	f04f 30ff 	mov.w	r0, #4294967295
 8022492:	e03e      	b.n	8022512 <__swsetup_r+0xba>
 8022494:	4b25      	ldr	r3, [pc, #148]	; (802252c <__swsetup_r+0xd4>)
 8022496:	429c      	cmp	r4, r3
 8022498:	d101      	bne.n	802249e <__swsetup_r+0x46>
 802249a:	68ac      	ldr	r4, [r5, #8]
 802249c:	e7eb      	b.n	8022476 <__swsetup_r+0x1e>
 802249e:	4b24      	ldr	r3, [pc, #144]	; (8022530 <__swsetup_r+0xd8>)
 80224a0:	429c      	cmp	r4, r3
 80224a2:	bf08      	it	eq
 80224a4:	68ec      	ldreq	r4, [r5, #12]
 80224a6:	e7e6      	b.n	8022476 <__swsetup_r+0x1e>
 80224a8:	0758      	lsls	r0, r3, #29
 80224aa:	d512      	bpl.n	80224d2 <__swsetup_r+0x7a>
 80224ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80224ae:	b141      	cbz	r1, 80224c2 <__swsetup_r+0x6a>
 80224b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80224b4:	4299      	cmp	r1, r3
 80224b6:	d002      	beq.n	80224be <__swsetup_r+0x66>
 80224b8:	4630      	mov	r0, r6
 80224ba:	f000 f98f 	bl	80227dc <_free_r>
 80224be:	2300      	movs	r3, #0
 80224c0:	6363      	str	r3, [r4, #52]	; 0x34
 80224c2:	89a3      	ldrh	r3, [r4, #12]
 80224c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80224c8:	81a3      	strh	r3, [r4, #12]
 80224ca:	2300      	movs	r3, #0
 80224cc:	6063      	str	r3, [r4, #4]
 80224ce:	6923      	ldr	r3, [r4, #16]
 80224d0:	6023      	str	r3, [r4, #0]
 80224d2:	89a3      	ldrh	r3, [r4, #12]
 80224d4:	f043 0308 	orr.w	r3, r3, #8
 80224d8:	81a3      	strh	r3, [r4, #12]
 80224da:	6923      	ldr	r3, [r4, #16]
 80224dc:	b94b      	cbnz	r3, 80224f2 <__swsetup_r+0x9a>
 80224de:	89a3      	ldrh	r3, [r4, #12]
 80224e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80224e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80224e8:	d003      	beq.n	80224f2 <__swsetup_r+0x9a>
 80224ea:	4621      	mov	r1, r4
 80224ec:	4630      	mov	r0, r6
 80224ee:	f000 f929 	bl	8022744 <__smakebuf_r>
 80224f2:	89a0      	ldrh	r0, [r4, #12]
 80224f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80224f8:	f010 0301 	ands.w	r3, r0, #1
 80224fc:	d00a      	beq.n	8022514 <__swsetup_r+0xbc>
 80224fe:	2300      	movs	r3, #0
 8022500:	60a3      	str	r3, [r4, #8]
 8022502:	6963      	ldr	r3, [r4, #20]
 8022504:	425b      	negs	r3, r3
 8022506:	61a3      	str	r3, [r4, #24]
 8022508:	6923      	ldr	r3, [r4, #16]
 802250a:	b943      	cbnz	r3, 802251e <__swsetup_r+0xc6>
 802250c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8022510:	d1ba      	bne.n	8022488 <__swsetup_r+0x30>
 8022512:	bd70      	pop	{r4, r5, r6, pc}
 8022514:	0781      	lsls	r1, r0, #30
 8022516:	bf58      	it	pl
 8022518:	6963      	ldrpl	r3, [r4, #20]
 802251a:	60a3      	str	r3, [r4, #8]
 802251c:	e7f4      	b.n	8022508 <__swsetup_r+0xb0>
 802251e:	2000      	movs	r0, #0
 8022520:	e7f7      	b.n	8022512 <__swsetup_r+0xba>
 8022522:	bf00      	nop
 8022524:	2000000c 	.word	0x2000000c
 8022528:	0802295c 	.word	0x0802295c
 802252c:	0802297c 	.word	0x0802297c
 8022530:	0802293c 	.word	0x0802293c

08022534 <_close_r>:
 8022534:	b538      	push	{r3, r4, r5, lr}
 8022536:	4d06      	ldr	r5, [pc, #24]	; (8022550 <_close_r+0x1c>)
 8022538:	2300      	movs	r3, #0
 802253a:	4604      	mov	r4, r0
 802253c:	4608      	mov	r0, r1
 802253e:	602b      	str	r3, [r5, #0]
 8022540:	f7fe fa2e 	bl	80209a0 <_close>
 8022544:	1c43      	adds	r3, r0, #1
 8022546:	d102      	bne.n	802254e <_close_r+0x1a>
 8022548:	682b      	ldr	r3, [r5, #0]
 802254a:	b103      	cbz	r3, 802254e <_close_r+0x1a>
 802254c:	6023      	str	r3, [r4, #0]
 802254e:	bd38      	pop	{r3, r4, r5, pc}
 8022550:	20000130 	.word	0x20000130

08022554 <__sflush_r>:
 8022554:	898a      	ldrh	r2, [r1, #12]
 8022556:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802255a:	4605      	mov	r5, r0
 802255c:	0710      	lsls	r0, r2, #28
 802255e:	460c      	mov	r4, r1
 8022560:	d458      	bmi.n	8022614 <__sflush_r+0xc0>
 8022562:	684b      	ldr	r3, [r1, #4]
 8022564:	2b00      	cmp	r3, #0
 8022566:	dc05      	bgt.n	8022574 <__sflush_r+0x20>
 8022568:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802256a:	2b00      	cmp	r3, #0
 802256c:	dc02      	bgt.n	8022574 <__sflush_r+0x20>
 802256e:	2000      	movs	r0, #0
 8022570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022574:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8022576:	2e00      	cmp	r6, #0
 8022578:	d0f9      	beq.n	802256e <__sflush_r+0x1a>
 802257a:	2300      	movs	r3, #0
 802257c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8022580:	682f      	ldr	r7, [r5, #0]
 8022582:	602b      	str	r3, [r5, #0]
 8022584:	d032      	beq.n	80225ec <__sflush_r+0x98>
 8022586:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8022588:	89a3      	ldrh	r3, [r4, #12]
 802258a:	075a      	lsls	r2, r3, #29
 802258c:	d505      	bpl.n	802259a <__sflush_r+0x46>
 802258e:	6863      	ldr	r3, [r4, #4]
 8022590:	1ac0      	subs	r0, r0, r3
 8022592:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8022594:	b10b      	cbz	r3, 802259a <__sflush_r+0x46>
 8022596:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8022598:	1ac0      	subs	r0, r0, r3
 802259a:	2300      	movs	r3, #0
 802259c:	4602      	mov	r2, r0
 802259e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80225a0:	6a21      	ldr	r1, [r4, #32]
 80225a2:	4628      	mov	r0, r5
 80225a4:	47b0      	blx	r6
 80225a6:	1c43      	adds	r3, r0, #1
 80225a8:	89a3      	ldrh	r3, [r4, #12]
 80225aa:	d106      	bne.n	80225ba <__sflush_r+0x66>
 80225ac:	6829      	ldr	r1, [r5, #0]
 80225ae:	291d      	cmp	r1, #29
 80225b0:	d82c      	bhi.n	802260c <__sflush_r+0xb8>
 80225b2:	4a2a      	ldr	r2, [pc, #168]	; (802265c <__sflush_r+0x108>)
 80225b4:	40ca      	lsrs	r2, r1
 80225b6:	07d6      	lsls	r6, r2, #31
 80225b8:	d528      	bpl.n	802260c <__sflush_r+0xb8>
 80225ba:	2200      	movs	r2, #0
 80225bc:	6062      	str	r2, [r4, #4]
 80225be:	04d9      	lsls	r1, r3, #19
 80225c0:	6922      	ldr	r2, [r4, #16]
 80225c2:	6022      	str	r2, [r4, #0]
 80225c4:	d504      	bpl.n	80225d0 <__sflush_r+0x7c>
 80225c6:	1c42      	adds	r2, r0, #1
 80225c8:	d101      	bne.n	80225ce <__sflush_r+0x7a>
 80225ca:	682b      	ldr	r3, [r5, #0]
 80225cc:	b903      	cbnz	r3, 80225d0 <__sflush_r+0x7c>
 80225ce:	6560      	str	r0, [r4, #84]	; 0x54
 80225d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80225d2:	602f      	str	r7, [r5, #0]
 80225d4:	2900      	cmp	r1, #0
 80225d6:	d0ca      	beq.n	802256e <__sflush_r+0x1a>
 80225d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80225dc:	4299      	cmp	r1, r3
 80225de:	d002      	beq.n	80225e6 <__sflush_r+0x92>
 80225e0:	4628      	mov	r0, r5
 80225e2:	f000 f8fb 	bl	80227dc <_free_r>
 80225e6:	2000      	movs	r0, #0
 80225e8:	6360      	str	r0, [r4, #52]	; 0x34
 80225ea:	e7c1      	b.n	8022570 <__sflush_r+0x1c>
 80225ec:	6a21      	ldr	r1, [r4, #32]
 80225ee:	2301      	movs	r3, #1
 80225f0:	4628      	mov	r0, r5
 80225f2:	47b0      	blx	r6
 80225f4:	1c41      	adds	r1, r0, #1
 80225f6:	d1c7      	bne.n	8022588 <__sflush_r+0x34>
 80225f8:	682b      	ldr	r3, [r5, #0]
 80225fa:	2b00      	cmp	r3, #0
 80225fc:	d0c4      	beq.n	8022588 <__sflush_r+0x34>
 80225fe:	2b1d      	cmp	r3, #29
 8022600:	d001      	beq.n	8022606 <__sflush_r+0xb2>
 8022602:	2b16      	cmp	r3, #22
 8022604:	d101      	bne.n	802260a <__sflush_r+0xb6>
 8022606:	602f      	str	r7, [r5, #0]
 8022608:	e7b1      	b.n	802256e <__sflush_r+0x1a>
 802260a:	89a3      	ldrh	r3, [r4, #12]
 802260c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022610:	81a3      	strh	r3, [r4, #12]
 8022612:	e7ad      	b.n	8022570 <__sflush_r+0x1c>
 8022614:	690f      	ldr	r7, [r1, #16]
 8022616:	2f00      	cmp	r7, #0
 8022618:	d0a9      	beq.n	802256e <__sflush_r+0x1a>
 802261a:	0793      	lsls	r3, r2, #30
 802261c:	680e      	ldr	r6, [r1, #0]
 802261e:	bf08      	it	eq
 8022620:	694b      	ldreq	r3, [r1, #20]
 8022622:	600f      	str	r7, [r1, #0]
 8022624:	bf18      	it	ne
 8022626:	2300      	movne	r3, #0
 8022628:	eba6 0807 	sub.w	r8, r6, r7
 802262c:	608b      	str	r3, [r1, #8]
 802262e:	f1b8 0f00 	cmp.w	r8, #0
 8022632:	dd9c      	ble.n	802256e <__sflush_r+0x1a>
 8022634:	6a21      	ldr	r1, [r4, #32]
 8022636:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8022638:	4643      	mov	r3, r8
 802263a:	463a      	mov	r2, r7
 802263c:	4628      	mov	r0, r5
 802263e:	47b0      	blx	r6
 8022640:	2800      	cmp	r0, #0
 8022642:	dc06      	bgt.n	8022652 <__sflush_r+0xfe>
 8022644:	89a3      	ldrh	r3, [r4, #12]
 8022646:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802264a:	81a3      	strh	r3, [r4, #12]
 802264c:	f04f 30ff 	mov.w	r0, #4294967295
 8022650:	e78e      	b.n	8022570 <__sflush_r+0x1c>
 8022652:	4407      	add	r7, r0
 8022654:	eba8 0800 	sub.w	r8, r8, r0
 8022658:	e7e9      	b.n	802262e <__sflush_r+0xda>
 802265a:	bf00      	nop
 802265c:	20400001 	.word	0x20400001

08022660 <_fflush_r>:
 8022660:	b538      	push	{r3, r4, r5, lr}
 8022662:	690b      	ldr	r3, [r1, #16]
 8022664:	4605      	mov	r5, r0
 8022666:	460c      	mov	r4, r1
 8022668:	b913      	cbnz	r3, 8022670 <_fflush_r+0x10>
 802266a:	2500      	movs	r5, #0
 802266c:	4628      	mov	r0, r5
 802266e:	bd38      	pop	{r3, r4, r5, pc}
 8022670:	b118      	cbz	r0, 802267a <_fflush_r+0x1a>
 8022672:	6983      	ldr	r3, [r0, #24]
 8022674:	b90b      	cbnz	r3, 802267a <_fflush_r+0x1a>
 8022676:	f7ff fa4f 	bl	8021b18 <__sinit>
 802267a:	4b14      	ldr	r3, [pc, #80]	; (80226cc <_fflush_r+0x6c>)
 802267c:	429c      	cmp	r4, r3
 802267e:	d11b      	bne.n	80226b8 <_fflush_r+0x58>
 8022680:	686c      	ldr	r4, [r5, #4]
 8022682:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022686:	2b00      	cmp	r3, #0
 8022688:	d0ef      	beq.n	802266a <_fflush_r+0xa>
 802268a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802268c:	07d0      	lsls	r0, r2, #31
 802268e:	d404      	bmi.n	802269a <_fflush_r+0x3a>
 8022690:	0599      	lsls	r1, r3, #22
 8022692:	d402      	bmi.n	802269a <_fflush_r+0x3a>
 8022694:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022696:	f7ff fadd 	bl	8021c54 <__retarget_lock_acquire_recursive>
 802269a:	4628      	mov	r0, r5
 802269c:	4621      	mov	r1, r4
 802269e:	f7ff ff59 	bl	8022554 <__sflush_r>
 80226a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80226a4:	07da      	lsls	r2, r3, #31
 80226a6:	4605      	mov	r5, r0
 80226a8:	d4e0      	bmi.n	802266c <_fflush_r+0xc>
 80226aa:	89a3      	ldrh	r3, [r4, #12]
 80226ac:	059b      	lsls	r3, r3, #22
 80226ae:	d4dd      	bmi.n	802266c <_fflush_r+0xc>
 80226b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80226b2:	f7ff fad0 	bl	8021c56 <__retarget_lock_release_recursive>
 80226b6:	e7d9      	b.n	802266c <_fflush_r+0xc>
 80226b8:	4b05      	ldr	r3, [pc, #20]	; (80226d0 <_fflush_r+0x70>)
 80226ba:	429c      	cmp	r4, r3
 80226bc:	d101      	bne.n	80226c2 <_fflush_r+0x62>
 80226be:	68ac      	ldr	r4, [r5, #8]
 80226c0:	e7df      	b.n	8022682 <_fflush_r+0x22>
 80226c2:	4b04      	ldr	r3, [pc, #16]	; (80226d4 <_fflush_r+0x74>)
 80226c4:	429c      	cmp	r4, r3
 80226c6:	bf08      	it	eq
 80226c8:	68ec      	ldreq	r4, [r5, #12]
 80226ca:	e7da      	b.n	8022682 <_fflush_r+0x22>
 80226cc:	0802295c 	.word	0x0802295c
 80226d0:	0802297c 	.word	0x0802297c
 80226d4:	0802293c 	.word	0x0802293c

080226d8 <_lseek_r>:
 80226d8:	b538      	push	{r3, r4, r5, lr}
 80226da:	4d07      	ldr	r5, [pc, #28]	; (80226f8 <_lseek_r+0x20>)
 80226dc:	4604      	mov	r4, r0
 80226de:	4608      	mov	r0, r1
 80226e0:	4611      	mov	r1, r2
 80226e2:	2200      	movs	r2, #0
 80226e4:	602a      	str	r2, [r5, #0]
 80226e6:	461a      	mov	r2, r3
 80226e8:	f7fe f964 	bl	80209b4 <_lseek>
 80226ec:	1c43      	adds	r3, r0, #1
 80226ee:	d102      	bne.n	80226f6 <_lseek_r+0x1e>
 80226f0:	682b      	ldr	r3, [r5, #0]
 80226f2:	b103      	cbz	r3, 80226f6 <_lseek_r+0x1e>
 80226f4:	6023      	str	r3, [r4, #0]
 80226f6:	bd38      	pop	{r3, r4, r5, pc}
 80226f8:	20000130 	.word	0x20000130

080226fc <__swhatbuf_r>:
 80226fc:	b570      	push	{r4, r5, r6, lr}
 80226fe:	460e      	mov	r6, r1
 8022700:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022704:	2900      	cmp	r1, #0
 8022706:	b096      	sub	sp, #88	; 0x58
 8022708:	4614      	mov	r4, r2
 802270a:	461d      	mov	r5, r3
 802270c:	da07      	bge.n	802271e <__swhatbuf_r+0x22>
 802270e:	2300      	movs	r3, #0
 8022710:	602b      	str	r3, [r5, #0]
 8022712:	89b3      	ldrh	r3, [r6, #12]
 8022714:	061a      	lsls	r2, r3, #24
 8022716:	d410      	bmi.n	802273a <__swhatbuf_r+0x3e>
 8022718:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802271c:	e00e      	b.n	802273c <__swhatbuf_r+0x40>
 802271e:	466a      	mov	r2, sp
 8022720:	f000 f8be 	bl	80228a0 <_fstat_r>
 8022724:	2800      	cmp	r0, #0
 8022726:	dbf2      	blt.n	802270e <__swhatbuf_r+0x12>
 8022728:	9a01      	ldr	r2, [sp, #4]
 802272a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802272e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8022732:	425a      	negs	r2, r3
 8022734:	415a      	adcs	r2, r3
 8022736:	602a      	str	r2, [r5, #0]
 8022738:	e7ee      	b.n	8022718 <__swhatbuf_r+0x1c>
 802273a:	2340      	movs	r3, #64	; 0x40
 802273c:	2000      	movs	r0, #0
 802273e:	6023      	str	r3, [r4, #0]
 8022740:	b016      	add	sp, #88	; 0x58
 8022742:	bd70      	pop	{r4, r5, r6, pc}

08022744 <__smakebuf_r>:
 8022744:	898b      	ldrh	r3, [r1, #12]
 8022746:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8022748:	079d      	lsls	r5, r3, #30
 802274a:	4606      	mov	r6, r0
 802274c:	460c      	mov	r4, r1
 802274e:	d507      	bpl.n	8022760 <__smakebuf_r+0x1c>
 8022750:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8022754:	6023      	str	r3, [r4, #0]
 8022756:	6123      	str	r3, [r4, #16]
 8022758:	2301      	movs	r3, #1
 802275a:	6163      	str	r3, [r4, #20]
 802275c:	b002      	add	sp, #8
 802275e:	bd70      	pop	{r4, r5, r6, pc}
 8022760:	ab01      	add	r3, sp, #4
 8022762:	466a      	mov	r2, sp
 8022764:	f7ff ffca 	bl	80226fc <__swhatbuf_r>
 8022768:	9900      	ldr	r1, [sp, #0]
 802276a:	4605      	mov	r5, r0
 802276c:	4630      	mov	r0, r6
 802276e:	f7ff fa73 	bl	8021c58 <_malloc_r>
 8022772:	b948      	cbnz	r0, 8022788 <__smakebuf_r+0x44>
 8022774:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022778:	059a      	lsls	r2, r3, #22
 802277a:	d4ef      	bmi.n	802275c <__smakebuf_r+0x18>
 802277c:	f023 0303 	bic.w	r3, r3, #3
 8022780:	f043 0302 	orr.w	r3, r3, #2
 8022784:	81a3      	strh	r3, [r4, #12]
 8022786:	e7e3      	b.n	8022750 <__smakebuf_r+0xc>
 8022788:	4b0d      	ldr	r3, [pc, #52]	; (80227c0 <__smakebuf_r+0x7c>)
 802278a:	62b3      	str	r3, [r6, #40]	; 0x28
 802278c:	89a3      	ldrh	r3, [r4, #12]
 802278e:	6020      	str	r0, [r4, #0]
 8022790:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8022794:	81a3      	strh	r3, [r4, #12]
 8022796:	9b00      	ldr	r3, [sp, #0]
 8022798:	6163      	str	r3, [r4, #20]
 802279a:	9b01      	ldr	r3, [sp, #4]
 802279c:	6120      	str	r0, [r4, #16]
 802279e:	b15b      	cbz	r3, 80227b8 <__smakebuf_r+0x74>
 80227a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80227a4:	4630      	mov	r0, r6
 80227a6:	f000 f88d 	bl	80228c4 <_isatty_r>
 80227aa:	b128      	cbz	r0, 80227b8 <__smakebuf_r+0x74>
 80227ac:	89a3      	ldrh	r3, [r4, #12]
 80227ae:	f023 0303 	bic.w	r3, r3, #3
 80227b2:	f043 0301 	orr.w	r3, r3, #1
 80227b6:	81a3      	strh	r3, [r4, #12]
 80227b8:	89a0      	ldrh	r0, [r4, #12]
 80227ba:	4305      	orrs	r5, r0
 80227bc:	81a5      	strh	r5, [r4, #12]
 80227be:	e7cd      	b.n	802275c <__smakebuf_r+0x18>
 80227c0:	08021ab1 	.word	0x08021ab1

080227c4 <__malloc_lock>:
 80227c4:	4801      	ldr	r0, [pc, #4]	; (80227cc <__malloc_lock+0x8>)
 80227c6:	f7ff ba45 	b.w	8021c54 <__retarget_lock_acquire_recursive>
 80227ca:	bf00      	nop
 80227cc:	20000128 	.word	0x20000128

080227d0 <__malloc_unlock>:
 80227d0:	4801      	ldr	r0, [pc, #4]	; (80227d8 <__malloc_unlock+0x8>)
 80227d2:	f7ff ba40 	b.w	8021c56 <__retarget_lock_release_recursive>
 80227d6:	bf00      	nop
 80227d8:	20000128 	.word	0x20000128

080227dc <_free_r>:
 80227dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80227de:	2900      	cmp	r1, #0
 80227e0:	d048      	beq.n	8022874 <_free_r+0x98>
 80227e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80227e6:	9001      	str	r0, [sp, #4]
 80227e8:	2b00      	cmp	r3, #0
 80227ea:	f1a1 0404 	sub.w	r4, r1, #4
 80227ee:	bfb8      	it	lt
 80227f0:	18e4      	addlt	r4, r4, r3
 80227f2:	f7ff ffe7 	bl	80227c4 <__malloc_lock>
 80227f6:	4a20      	ldr	r2, [pc, #128]	; (8022878 <_free_r+0x9c>)
 80227f8:	9801      	ldr	r0, [sp, #4]
 80227fa:	6813      	ldr	r3, [r2, #0]
 80227fc:	4615      	mov	r5, r2
 80227fe:	b933      	cbnz	r3, 802280e <_free_r+0x32>
 8022800:	6063      	str	r3, [r4, #4]
 8022802:	6014      	str	r4, [r2, #0]
 8022804:	b003      	add	sp, #12
 8022806:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802280a:	f7ff bfe1 	b.w	80227d0 <__malloc_unlock>
 802280e:	42a3      	cmp	r3, r4
 8022810:	d90b      	bls.n	802282a <_free_r+0x4e>
 8022812:	6821      	ldr	r1, [r4, #0]
 8022814:	1862      	adds	r2, r4, r1
 8022816:	4293      	cmp	r3, r2
 8022818:	bf04      	itt	eq
 802281a:	681a      	ldreq	r2, [r3, #0]
 802281c:	685b      	ldreq	r3, [r3, #4]
 802281e:	6063      	str	r3, [r4, #4]
 8022820:	bf04      	itt	eq
 8022822:	1852      	addeq	r2, r2, r1
 8022824:	6022      	streq	r2, [r4, #0]
 8022826:	602c      	str	r4, [r5, #0]
 8022828:	e7ec      	b.n	8022804 <_free_r+0x28>
 802282a:	461a      	mov	r2, r3
 802282c:	685b      	ldr	r3, [r3, #4]
 802282e:	b10b      	cbz	r3, 8022834 <_free_r+0x58>
 8022830:	42a3      	cmp	r3, r4
 8022832:	d9fa      	bls.n	802282a <_free_r+0x4e>
 8022834:	6811      	ldr	r1, [r2, #0]
 8022836:	1855      	adds	r5, r2, r1
 8022838:	42a5      	cmp	r5, r4
 802283a:	d10b      	bne.n	8022854 <_free_r+0x78>
 802283c:	6824      	ldr	r4, [r4, #0]
 802283e:	4421      	add	r1, r4
 8022840:	1854      	adds	r4, r2, r1
 8022842:	42a3      	cmp	r3, r4
 8022844:	6011      	str	r1, [r2, #0]
 8022846:	d1dd      	bne.n	8022804 <_free_r+0x28>
 8022848:	681c      	ldr	r4, [r3, #0]
 802284a:	685b      	ldr	r3, [r3, #4]
 802284c:	6053      	str	r3, [r2, #4]
 802284e:	4421      	add	r1, r4
 8022850:	6011      	str	r1, [r2, #0]
 8022852:	e7d7      	b.n	8022804 <_free_r+0x28>
 8022854:	d902      	bls.n	802285c <_free_r+0x80>
 8022856:	230c      	movs	r3, #12
 8022858:	6003      	str	r3, [r0, #0]
 802285a:	e7d3      	b.n	8022804 <_free_r+0x28>
 802285c:	6825      	ldr	r5, [r4, #0]
 802285e:	1961      	adds	r1, r4, r5
 8022860:	428b      	cmp	r3, r1
 8022862:	bf04      	itt	eq
 8022864:	6819      	ldreq	r1, [r3, #0]
 8022866:	685b      	ldreq	r3, [r3, #4]
 8022868:	6063      	str	r3, [r4, #4]
 802286a:	bf04      	itt	eq
 802286c:	1949      	addeq	r1, r1, r5
 802286e:	6021      	streq	r1, [r4, #0]
 8022870:	6054      	str	r4, [r2, #4]
 8022872:	e7c7      	b.n	8022804 <_free_r+0x28>
 8022874:	b003      	add	sp, #12
 8022876:	bd30      	pop	{r4, r5, pc}
 8022878:	20000090 	.word	0x20000090

0802287c <_read_r>:
 802287c:	b538      	push	{r3, r4, r5, lr}
 802287e:	4d07      	ldr	r5, [pc, #28]	; (802289c <_read_r+0x20>)
 8022880:	4604      	mov	r4, r0
 8022882:	4608      	mov	r0, r1
 8022884:	4611      	mov	r1, r2
 8022886:	2200      	movs	r2, #0
 8022888:	602a      	str	r2, [r5, #0]
 802288a:	461a      	mov	r2, r3
 802288c:	f7fe f86e 	bl	802096c <_read>
 8022890:	1c43      	adds	r3, r0, #1
 8022892:	d102      	bne.n	802289a <_read_r+0x1e>
 8022894:	682b      	ldr	r3, [r5, #0]
 8022896:	b103      	cbz	r3, 802289a <_read_r+0x1e>
 8022898:	6023      	str	r3, [r4, #0]
 802289a:	bd38      	pop	{r3, r4, r5, pc}
 802289c:	20000130 	.word	0x20000130

080228a0 <_fstat_r>:
 80228a0:	b538      	push	{r3, r4, r5, lr}
 80228a2:	4d07      	ldr	r5, [pc, #28]	; (80228c0 <_fstat_r+0x20>)
 80228a4:	2300      	movs	r3, #0
 80228a6:	4604      	mov	r4, r0
 80228a8:	4608      	mov	r0, r1
 80228aa:	4611      	mov	r1, r2
 80228ac:	602b      	str	r3, [r5, #0]
 80228ae:	f7fe f87a 	bl	80209a6 <_fstat>
 80228b2:	1c43      	adds	r3, r0, #1
 80228b4:	d102      	bne.n	80228bc <_fstat_r+0x1c>
 80228b6:	682b      	ldr	r3, [r5, #0]
 80228b8:	b103      	cbz	r3, 80228bc <_fstat_r+0x1c>
 80228ba:	6023      	str	r3, [r4, #0]
 80228bc:	bd38      	pop	{r3, r4, r5, pc}
 80228be:	bf00      	nop
 80228c0:	20000130 	.word	0x20000130

080228c4 <_isatty_r>:
 80228c4:	b538      	push	{r3, r4, r5, lr}
 80228c6:	4d06      	ldr	r5, [pc, #24]	; (80228e0 <_isatty_r+0x1c>)
 80228c8:	2300      	movs	r3, #0
 80228ca:	4604      	mov	r4, r0
 80228cc:	4608      	mov	r0, r1
 80228ce:	602b      	str	r3, [r5, #0]
 80228d0:	f7fe f86e 	bl	80209b0 <_isatty>
 80228d4:	1c43      	adds	r3, r0, #1
 80228d6:	d102      	bne.n	80228de <_isatty_r+0x1a>
 80228d8:	682b      	ldr	r3, [r5, #0]
 80228da:	b103      	cbz	r3, 80228de <_isatty_r+0x1a>
 80228dc:	6023      	str	r3, [r4, #0]
 80228de:	bd38      	pop	{r3, r4, r5, pc}
 80228e0:	20000130 	.word	0x20000130

080228e4 <_init>:
 80228e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80228e6:	bf00      	nop
 80228e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80228ea:	bc08      	pop	{r3}
 80228ec:	469e      	mov	lr, r3
 80228ee:	4770      	bx	lr

080228f0 <_fini>:
 80228f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80228f2:	bf00      	nop
 80228f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80228f6:	bc08      	pop	{r3}
 80228f8:	469e      	mov	lr, r3
 80228fa:	4770      	bx	lr
