
BootlloaderCode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003018  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000290  080031e8  080031e8  000131e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003478  08003478  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08003478  08003478  00013478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003480  08003480  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003480  08003480  00013480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003484  08003484  00013484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003488  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f8  20000074  080034fc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000056c  080034fc  0002056c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010bc1  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c77  00000000  00000000  00030c65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00007e20  00000000  00000000  000338dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000808  00000000  00000000  0003b700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000bf0  00000000  00000000  0003bf08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022a2c  00000000  00000000  0003caf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f68a  00000000  00000000  0005f524  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ca935  00000000  00000000  0006ebae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001394e3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001c58  00000000  00000000  00139538  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080031d0 	.word	0x080031d0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	080031d0 	.word	0x080031d0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <OTA_ReceiveAndFlashTheCode>:
static OTA_Error_t   OTA_EraseFlash         (void);     
static OTA_Error_t   OTA_FlashData          (uint32_t data_len);


OTA_Error_t OTA_ReceiveAndFlashTheCode      (void)
{
 80005a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	OTA_Error_t error=OTA_ERROR_OK;
	
	while(ReceivingFlag)
	{
		switch(CurrentState)
 80005ac:	f8df 8320 	ldr.w	r8, [pc, #800]	; 80008d0 <OTA_ReceiveAndFlashTheCode+0x328>
	while(ReceivingFlag)
 80005b0:	4fb0      	ldr	r7, [pc, #704]	; (8000874 <OTA_ReceiveAndFlashTheCode+0x2cc>)
{
 80005b2:	b087      	sub	sp, #28
	OTA_Error_t error=OTA_ERROR_OK;
 80005b4:	2400      	movs	r4, #0
 80005b6:	4645      	mov	r5, r8
	while(ReceivingFlag)
 80005b8:	783b      	ldrb	r3, [r7, #0]
		switch(CurrentState)
 80005ba:	f898 9000 	ldrb.w	r9, [r8]
	while(ReceivingFlag)
 80005be:	b91b      	cbnz	r3, 80005c8 <OTA_ReceiveAndFlashTheCode+0x20>
		}

	}

	return error;
}
 80005c0:	4620      	mov	r0, r4
 80005c2:	b007      	add	sp, #28
 80005c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		switch(CurrentState)
 80005c8:	f1b9 0f04 	cmp.w	r9, #4
 80005cc:	d8f7      	bhi.n	80005be <OTA_ReceiveAndFlashTheCode+0x16>
 80005ce:	e8df f019 	tbh	[pc, r9, lsl #1]
 80005d2:	0005      	.short	0x0005
 80005d4:	00b20046 	.word	0x00b20046
 80005d8:	018300e3 	.word	0x018300e3
 80005dc:	4aa6      	ldr	r2, [pc, #664]	; (8000878 <OTA_ReceiveAndFlashTheCode+0x2d0>)

static void   OTA_ReInitializePacket        (void)
{
	uint32_t iterator=0;

	for(iterator=0;iterator<OTA_MAX_PACKET;iterator++)
 80005de:	2300      	movs	r3, #0
 80005e0:	4616      	mov	r6, r2
	 {
		Packet[iterator]=0;
 80005e2:	4618      	mov	r0, r3
	for(iterator=0;iterator<OTA_MAX_PACKET;iterator++)
 80005e4:	f240 4109 	movw	r1, #1033	; 0x409
 80005e8:	3301      	adds	r3, #1
 80005ea:	428b      	cmp	r3, r1
		Packet[iterator]=0;
 80005ec:	f802 0b01 	strb.w	r0, [r2], #1
	for(iterator=0;iterator<OTA_MAX_PACKET;iterator++)
 80005f0:	d1fa      	bne.n	80005e8 <OTA_ReceiveAndFlashTheCode+0x40>
*/
static OTA_Error_t   OTA_Idle               (void)
{   
	OTA_Error_t error=OTA_ERROR_OK;

    if (HAL_UART_Receive( &BLUETOOTH_UART,& Packet[OTA_INDEX_SOF],OTA_SOF_SIZE, HAL_MAX_DELAY )!=HAL_OK)
 80005f2:	49a1      	ldr	r1, [pc, #644]	; (8000878 <OTA_ReceiveAndFlashTheCode+0x2d0>)
 80005f4:	48a1      	ldr	r0, [pc, #644]	; (800087c <OTA_ReceiveAndFlashTheCode+0x2d4>)
 80005f6:	f04f 33ff 	mov.w	r3, #4294967295
 80005fa:	2201      	movs	r2, #1
 80005fc:	f001 fbdd 	bl	8001dba <HAL_UART_Receive>
 8000600:	bb18      	cbnz	r0, 800064a <OTA_ReceiveAndFlashTheCode+0xa2>
     	error=OTA_ERROR_IDLE;
     }

    if(OTA_ERROR_OK==error)
    {
    	if(Packet[OTA_INDEX_SOF]!=OTA_SOF)
 8000602:	7833      	ldrb	r3, [r6, #0]
 8000604:	2baa      	cmp	r3, #170	; 0xaa
 8000606:	d120      	bne.n	800064a <OTA_ReceiveAndFlashTheCode+0xa2>
     	}
    }
    if(OTA_ERROR_OK==error)
    {    
	     //the received data is in little endian 
         if ((HAL_UART_Receive( &BLUETOOTH_UART,& Packet[OTA_INDEX_TYPE],OTA_PACKET_TYPE_SIZE, HAL_MAX_DELAY )!=HAL_OK)||
 8000608:	499d      	ldr	r1, [pc, #628]	; (8000880 <OTA_ReceiveAndFlashTheCode+0x2d8>)
 800060a:	489c      	ldr	r0, [pc, #624]	; (800087c <OTA_ReceiveAndFlashTheCode+0x2d4>)
 800060c:	f04f 33ff 	mov.w	r3, #4294967295
 8000610:	2201      	movs	r2, #1
 8000612:	f001 fbd2 	bl	8001dba <HAL_UART_Receive>
 8000616:	b9c0      	cbnz	r0, 800064a <OTA_ReceiveAndFlashTheCode+0xa2>
		     (HAL_UART_Receive( &BLUETOOTH_UART,& Packet[OTA_INDEX_LENGTH],OTA_LENGTH_SIZE, HAL_MAX_DELAY )   !=HAL_OK)   )
 8000618:	499a      	ldr	r1, [pc, #616]	; (8000884 <OTA_ReceiveAndFlashTheCode+0x2dc>)
 800061a:	4898      	ldr	r0, [pc, #608]	; (800087c <OTA_ReceiveAndFlashTheCode+0x2d4>)
 800061c:	f04f 33ff 	mov.w	r3, #4294967295
 8000620:	2202      	movs	r2, #2
 8000622:	f001 fbca 	bl	8001dba <HAL_UART_Receive>
         if ((HAL_UART_Receive( &BLUETOOTH_UART,& Packet[OTA_INDEX_TYPE],OTA_PACKET_TYPE_SIZE, HAL_MAX_DELAY )!=HAL_OK)||
 8000626:	4604      	mov	r4, r0
 8000628:	b978      	cbnz	r0, 800064a <OTA_ReceiveAndFlashTheCode+0xa2>
          {
     	  	error=OTA_ERROR_IDLE;
          }
          else
          {
          	switch(Packet[OTA_INDEX_TYPE])
 800062a:	7873      	ldrb	r3, [r6, #1]
 800062c:	2b03      	cmp	r3, #3
 800062e:	d809      	bhi.n	8000644 <OTA_ReceiveAndFlashTheCode+0x9c>
 8000630:	2b01      	cmp	r3, #1
 8000632:	d805      	bhi.n	8000640 <OTA_ReceiveAndFlashTheCode+0x98>
 8000634:	b913      	cbnz	r3, 800063c <OTA_ReceiveAndFlashTheCode+0x94>
          	{
          	 	case OTA_PACKET_TYPE_CMD:     CurrentState=OTA_STATE_CMD;
 8000636:	2301      	movs	r3, #1
	        	CurrentState=OTA_STATE_IDLE;
 8000638:	702b      	strb	r3, [r5, #0]
	        break;
 800063a:	e7bd      	b.n	80005b8 <OTA_ReceiveAndFlashTheCode+0x10>
          	 		break;
          	 	case OTA_PACKET_TYPE_HEADER:  CurrentState=OTA_STATE_HEADER;
 800063c:	2302      	movs	r3, #2
 800063e:	e7fb      	b.n	8000638 <OTA_ReceiveAndFlashTheCode+0x90>
          	 		break;
          	 	case OTA_PACKET_TYPE_DATA:    CurrentState=OTA_STATE_DATA;
 8000640:	2303      	movs	r3, #3
 8000642:	e7f9      	b.n	8000638 <OTA_ReceiveAndFlashTheCode+0x90>
          	 		break;
          	 	case OTA_PACKET_TYPE_RESPONSE: CurrentState=OTA_STATE_DATA;  //can't happen
          	 		break;
          	 	default:error=OTA_ERROR_IDLE;
          	 	        printf("Not A Type\r\n");
 8000644:	4890      	ldr	r0, [pc, #576]	; (8000888 <OTA_ReceiveAndFlashTheCode+0x2e0>)
 8000646:	f001 fe7d 	bl	8002344 <puts>
                	Response=OTA_RESPONSE_NACK;
 800064a:	4b90      	ldr	r3, [pc, #576]	; (800088c <OTA_ReceiveAndFlashTheCode+0x2e4>)
                	printf("Error in IDLE state\r\n");
 800064c:	4890      	ldr	r0, [pc, #576]	; (8000890 <OTA_ReceiveAndFlashTheCode+0x2e8>)
                	Response=OTA_RESPONSE_NACK;
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]
                	CurrentState=OTA_STATE_RESPONSE;
 8000652:	2304      	movs	r3, #4
 8000654:	702b      	strb	r3, [r5, #0]
                	printf("Error in IDLE state\r\n");
 8000656:	2406      	movs	r4, #6
 8000658:	f001 fe74 	bl	8002344 <puts>
 800065c:	e7ac      	b.n	80005b8 <OTA_ReceiveAndFlashTheCode+0x10>
}

static OTA_Error_t   OTA_Cmd                (void)
{
	OTA_Error_t error=OTA_ERROR_OK;
    uint16_t length=*((uint16_t *)&Packet[OTA_INDEX_LENGTH]);
 800065e:	4e86      	ldr	r6, [pc, #536]	; (8000878 <OTA_ReceiveAndFlashTheCode+0x2d0>)
    //not a CMD
    if(OTA_CMD_SIZE!=length)
 8000660:	f8b6 a002 	ldrh.w	sl, [r6, #2]
 8000664:	f1ba 0f01 	cmp.w	sl, #1
 8000668:	d001      	beq.n	800066e <OTA_ReceiveAndFlashTheCode+0xc6>
	        }
	        break;
	        default:
	        {
	        	printf("Wrong CMD\r\n");
	        	error=OTA_ERROR_CMD;
 800066a:	2402      	movs	r4, #2
	        }
	        break;
 800066c:	e042      	b.n	80006f4 <OTA_ReceiveAndFlashTheCode+0x14c>
    	if ((HAL_UART_Receive( &BLUETOOTH_UART,& Packet[OTA_INDEX_CMD],OTA_CMD_SIZE, HAL_MAX_DELAY )!=HAL_OK)               ||
 800066e:	4883      	ldr	r0, [pc, #524]	; (800087c <OTA_ReceiveAndFlashTheCode+0x2d4>)
 8000670:	f04f 33ff 	mov.w	r3, #4294967295
 8000674:	4652      	mov	r2, sl
 8000676:	1d31      	adds	r1, r6, #4
 8000678:	f001 fb9f 	bl	8001dba <HAL_UART_Receive>
 800067c:	2800      	cmp	r0, #0
 800067e:	d1f4      	bne.n	800066a <OTA_ReceiveAndFlashTheCode+0xc2>
    	    (HAL_UART_Receive( &BLUETOOTH_UART,& Packet[OTA_INDEX_CRC+OTA_CMD_SIZE-1],OTA_CRC_SIZE, HAL_MAX_DELAY )!=HAL_OK)||
 8000680:	487e      	ldr	r0, [pc, #504]	; (800087c <OTA_ReceiveAndFlashTheCode+0x2d4>)
 8000682:	f04f 33ff 	mov.w	r3, #4294967295
 8000686:	2204      	movs	r2, #4
 8000688:	1d71      	adds	r1, r6, #5
 800068a:	f001 fb96 	bl	8001dba <HAL_UART_Receive>
    	if ((HAL_UART_Receive( &BLUETOOTH_UART,& Packet[OTA_INDEX_CMD],OTA_CMD_SIZE, HAL_MAX_DELAY )!=HAL_OK)               ||
 800068e:	2800      	cmp	r0, #0
 8000690:	d1eb      	bne.n	800066a <OTA_ReceiveAndFlashTheCode+0xc2>
            (HAL_UART_Receive( &BLUETOOTH_UART,& Packet[OTA_INDEX_EOF+OTA_CMD_SIZE-1],OTA_EOF_SIZE, HAL_MAX_DELAY )!=HAL_OK)  )
 8000692:	487a      	ldr	r0, [pc, #488]	; (800087c <OTA_ReceiveAndFlashTheCode+0x2d4>)
 8000694:	f04f 33ff 	mov.w	r3, #4294967295
 8000698:	4652      	mov	r2, sl
 800069a:	f106 0109 	add.w	r1, r6, #9
 800069e:	f001 fb8c 	bl	8001dba <HAL_UART_Receive>
    	    (HAL_UART_Receive( &BLUETOOTH_UART,& Packet[OTA_INDEX_CRC+OTA_CMD_SIZE-1],OTA_CRC_SIZE, HAL_MAX_DELAY )!=HAL_OK)||
 80006a2:	4604      	mov	r4, r0
 80006a4:	2800      	cmp	r0, #0
 80006a6:	d1e0      	bne.n	800066a <OTA_ReceiveAndFlashTheCode+0xc2>
		if(Packet[OTA_INDEX_EOF+OTA_CMD_SIZE-1]!=OTA_EOF)
 80006a8:	7a73      	ldrb	r3, [r6, #9]
 80006aa:	2bee      	cmp	r3, #238	; 0xee
 80006ac:	d1dd      	bne.n	800066a <OTA_ReceiveAndFlashTheCode+0xc2>
    	switch(Packet[OTA_INDEX_CMD])
 80006ae:	7936      	ldrb	r6, [r6, #4]
 80006b0:	2e01      	cmp	r6, #1
 80006b2:	d028      	beq.n	8000706 <OTA_ReceiveAndFlashTheCode+0x15e>
 80006b4:	2e02      	cmp	r6, #2
 80006b6:	d035      	beq.n	8000724 <OTA_ReceiveAndFlashTheCode+0x17c>
 80006b8:	2e00      	cmp	r6, #0
 80006ba:	d13a      	bne.n	8000732 <OTA_ReceiveAndFlashTheCode+0x18a>
    			printf("Start CMD\r\n");
 80006bc:	4875      	ldr	r0, [pc, #468]	; (8000894 <OTA_ReceiveAndFlashTheCode+0x2ec>)
 80006be:	f001 fe41 	bl	8002344 <puts>
}

static OTA_Error_t   OTA_EraseFlash         (void)
{
      OTA_Error_t error=OTA_ERROR_OK;
	  printf("Erasing the Flash memory...\r\n");
 80006c2:	4875      	ldr	r0, [pc, #468]	; (8000898 <OTA_ReceiveAndFlashTheCode+0x2f0>)
 80006c4:	f001 fe3e 	bl	8002344 <puts>
	  
	  if(HAL_FLASH_Unlock()!=HAL_OK)
 80006c8:	f000 fd4a 	bl	8001160 <HAL_FLASH_Unlock>
      FLASH_EraseInitTypeDef EraseInitStruct;
      uint32_t SectorError;

      EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
      EraseInitStruct.Sector        = FLASH_SECTOR_5;
      EraseInitStruct.NbSectors     = 3;                    //erase 3 sectors(5,6,7)
 80006cc:	2303      	movs	r3, #3
 80006ce:	2205      	movs	r2, #5
 80006d0:	e9cd 2303 	strd	r2, r3, [sp, #12]
      EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 80006d4:	2302      	movs	r3, #2
      EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 80006d6:	9401      	str	r4, [sp, #4]
      EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 80006d8:	9305      	str	r3, [sp, #20]
      if(OTA_ERROR_OK==error)
 80006da:	b990      	cbnz	r0, 8000702 <OTA_ReceiveAndFlashTheCode+0x15a>
      {
      	if (HAL_FLASHEx_Erase( &EraseInitStruct, &SectorError )!= HAL_OK )
 80006dc:	4669      	mov	r1, sp
 80006de:	a801      	add	r0, sp, #4
 80006e0:	f000 fe2e 	bl	8001340 <HAL_FLASHEx_Erase>
      	{
      		error=OTA_ERROR_FLASH;
 80006e4:	1e04      	subs	r4, r0, #0
 80006e6:	bf18      	it	ne
 80006e8:	2401      	movne	r4, #1
      	}
      }
      if(HAL_FLASH_Lock()!=HAL_OK)
 80006ea:	f000 fd4b 	bl	8001184 <HAL_FLASH_Lock>
	  {
      	  error=OTA_ERROR_FLASH;      
 80006ee:	2800      	cmp	r0, #0
 80006f0:	bf18      	it	ne
 80006f2:	464c      	movne	r4, r9
	        	Response=(OTA_ERROR_OK==error)?OTA_RESPONSE_ACK:OTA_RESPONSE_NACK;
 80006f4:	4a65      	ldr	r2, [pc, #404]	; (800088c <OTA_ReceiveAndFlashTheCode+0x2e4>)
 80006f6:	fab4 f384 	clz	r3, r4
 80006fa:	095b      	lsrs	r3, r3, #5
 80006fc:	7013      	strb	r3, [r2, #0]
	        	CurrentState=OTA_STATE_RESPONSE;
 80006fe:	2304      	movs	r3, #4
 8000700:	e79a      	b.n	8000638 <OTA_ReceiveAndFlashTheCode+0x90>
 8000702:	464c      	mov	r4, r9
 8000704:	e7f1      	b.n	80006ea <OTA_ReceiveAndFlashTheCode+0x142>
	        	printf("End CMD\r\n");
 8000706:	4865      	ldr	r0, [pc, #404]	; (800089c <OTA_ReceiveAndFlashTheCode+0x2f4>)
 8000708:	f001 fe1c 	bl	8002344 <puts>
	        	LastPacketFlag=1;
 800070c:	4b64      	ldr	r3, [pc, #400]	; (80008a0 <OTA_ReceiveAndFlashTheCode+0x2f8>)
 800070e:	701e      	strb	r6, [r3, #0]
	        	if(ReseivedCodeSize!=TotalCodeSize)
 8000710:	4b64      	ldr	r3, [pc, #400]	; (80008a4 <OTA_ReceiveAndFlashTheCode+0x2fc>)
 8000712:	681a      	ldr	r2, [r3, #0]
 8000714:	4b64      	ldr	r3, [pc, #400]	; (80008a8 <OTA_ReceiveAndFlashTheCode+0x300>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	429a      	cmp	r2, r3
 800071a:	d0eb      	beq.n	80006f4 <OTA_ReceiveAndFlashTheCode+0x14c>
	        		printf("Error,ReseivedCodeSize!=TotalCodeSize\r\n");
 800071c:	4863      	ldr	r0, [pc, #396]	; (80008ac <OTA_ReceiveAndFlashTheCode+0x304>)
	        	printf("Wrong CMD\r\n");
 800071e:	f001 fe11 	bl	8002344 <puts>
 8000722:	e7a2      	b.n	800066a <OTA_ReceiveAndFlashTheCode+0xc2>
	        	printf("Abort CMD\r\n");
 8000724:	4862      	ldr	r0, [pc, #392]	; (80008b0 <OTA_ReceiveAndFlashTheCode+0x308>)
 8000726:	f001 fe0d 	bl	8002344 <puts>
				LastPacketFlag=1;
 800072a:	4b5d      	ldr	r3, [pc, #372]	; (80008a0 <OTA_ReceiveAndFlashTheCode+0x2f8>)
 800072c:	f883 a000 	strb.w	sl, [r3]
	        break;
 8000730:	e79b      	b.n	800066a <OTA_ReceiveAndFlashTheCode+0xc2>
	        	printf("Wrong CMD\r\n");
 8000732:	4860      	ldr	r0, [pc, #384]	; (80008b4 <OTA_ReceiveAndFlashTheCode+0x30c>)
 8000734:	e7f3      	b.n	800071e <OTA_ReceiveAndFlashTheCode+0x176>
}

static OTA_Error_t   OTA_Header             (void)
{
	OTA_Error_t error=OTA_ERROR_OK;
    uint16_t length=*((uint16_t *)&Packet[OTA_INDEX_LENGTH]);
 8000736:	4e50      	ldr	r6, [pc, #320]	; (8000878 <OTA_ReceiveAndFlashTheCode+0x2d0>)
 8000738:	f8df 916c 	ldr.w	r9, [pc, #364]	; 80008a8 <OTA_ReceiveAndFlashTheCode+0x300>
    
    //not a Header
    if(OTA_HEADER_SIZE!=length)
 800073c:	8872      	ldrh	r2, [r6, #2]
 800073e:	2a08      	cmp	r2, #8
 8000740:	d006      	beq.n	8000750 <OTA_ReceiveAndFlashTheCode+0x1a8>
	        		error=OTA_ERROR_CMD;
 8000742:	2403      	movs	r4, #3
    TotalCodeSize=*((uint32_t*)&Packet[OTA_INDEX_HEADER+OTA_HEADER_CODE_SIZE]);
    //the second 4bytes contains the total code CRC
    TotalCodeCRC =*((uint32_t*)&Packet[OTA_INDEX_HEADER+OTA_HEADER_CODE_CRC ]);
    }

    printf("TotalCodeSize=%ld \r\n",TotalCodeSize);
 8000744:	f8d9 1000 	ldr.w	r1, [r9]
 8000748:	485b      	ldr	r0, [pc, #364]	; (80008b8 <OTA_ReceiveAndFlashTheCode+0x310>)
 800074a:	f001 fd75 	bl	8002238 <iprintf>
            	Response=(OTA_ERROR_OK==error)?OTA_RESPONSE_ACK:OTA_RESPONSE_NACK;
 800074e:	e7d1      	b.n	80006f4 <OTA_ReceiveAndFlashTheCode+0x14c>
    	if ((HAL_UART_Receive( &BLUETOOTH_UART,& Packet[OTA_INDEX_HEADER],OTA_HEADER_SIZE, HAL_MAX_DELAY )!=HAL_OK)            ||
 8000750:	484a      	ldr	r0, [pc, #296]	; (800087c <OTA_ReceiveAndFlashTheCode+0x2d4>)
 8000752:	f04f 33ff 	mov.w	r3, #4294967295
 8000756:	1d31      	adds	r1, r6, #4
 8000758:	f001 fb2f 	bl	8001dba <HAL_UART_Receive>
 800075c:	2800      	cmp	r0, #0
 800075e:	d1f0      	bne.n	8000742 <OTA_ReceiveAndFlashTheCode+0x19a>
    	    (HAL_UART_Receive( &BLUETOOTH_UART,& Packet[OTA_INDEX_CRC+OTA_HEADER_SIZE-1],OTA_CRC_SIZE, HAL_MAX_DELAY )!=HAL_OK)||
 8000760:	4846      	ldr	r0, [pc, #280]	; (800087c <OTA_ReceiveAndFlashTheCode+0x2d4>)
 8000762:	f04f 33ff 	mov.w	r3, #4294967295
 8000766:	2204      	movs	r2, #4
 8000768:	f106 010c 	add.w	r1, r6, #12
 800076c:	f001 fb25 	bl	8001dba <HAL_UART_Receive>
    	if ((HAL_UART_Receive( &BLUETOOTH_UART,& Packet[OTA_INDEX_HEADER],OTA_HEADER_SIZE, HAL_MAX_DELAY )!=HAL_OK)            ||
 8000770:	2800      	cmp	r0, #0
 8000772:	d1e6      	bne.n	8000742 <OTA_ReceiveAndFlashTheCode+0x19a>
            (HAL_UART_Receive( &BLUETOOTH_UART,& Packet[OTA_INDEX_EOF+OTA_HEADER_SIZE-1],OTA_EOF_SIZE, HAL_MAX_DELAY )!=HAL_OK)  )
 8000774:	4841      	ldr	r0, [pc, #260]	; (800087c <OTA_ReceiveAndFlashTheCode+0x2d4>)
 8000776:	f04f 33ff 	mov.w	r3, #4294967295
 800077a:	2201      	movs	r2, #1
 800077c:	f106 0110 	add.w	r1, r6, #16
 8000780:	f001 fb1b 	bl	8001dba <HAL_UART_Receive>
    	    (HAL_UART_Receive( &BLUETOOTH_UART,& Packet[OTA_INDEX_CRC+OTA_HEADER_SIZE-1],OTA_CRC_SIZE, HAL_MAX_DELAY )!=HAL_OK)||
 8000784:	4604      	mov	r4, r0
 8000786:	2800      	cmp	r0, #0
 8000788:	d1db      	bne.n	8000742 <OTA_ReceiveAndFlashTheCode+0x19a>
		if(Packet[OTA_INDEX_EOF+OTA_HEADER_SIZE-1]!=OTA_EOF)
 800078a:	7c33      	ldrb	r3, [r6, #16]
 800078c:	2bee      	cmp	r3, #238	; 0xee
 800078e:	d1d8      	bne.n	8000742 <OTA_ReceiveAndFlashTheCode+0x19a>
    TotalCodeSize=*((uint32_t*)&Packet[OTA_INDEX_HEADER+OTA_HEADER_CODE_SIZE]);
 8000790:	6873      	ldr	r3, [r6, #4]
 8000792:	f8c9 3000 	str.w	r3, [r9]
    TotalCodeCRC =*((uint32_t*)&Packet[OTA_INDEX_HEADER+OTA_HEADER_CODE_CRC ]);
 8000796:	e7d5      	b.n	8000744 <OTA_ReceiveAndFlashTheCode+0x19c>
}

static OTA_Error_t   OTA_Data               (void)
{
	OTA_Error_t error=OTA_ERROR_OK;
    uint16_t length=*((uint16_t *)&Packet[OTA_INDEX_LENGTH]);
 8000798:	4c37      	ldr	r4, [pc, #220]	; (8000878 <OTA_ReceiveAndFlashTheCode+0x2d0>)
 800079a:	8866      	ldrh	r6, [r4, #2]
    //can't receive data more than the max data
    if(length>OTA_MAX_DATA)
 800079c:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80007a0:	d901      	bls.n	80007a6 <OTA_ReceiveAndFlashTheCode+0x1fe>
      }
    }
    if(HAL_FLASH_Lock()!=HAL_OK)
	{
    	printf("Cant lock flash");
   		 error=OTA_ERROR_FLASH;      
 80007a2:	2404      	movs	r4, #4
 80007a4:	e7a6      	b.n	80006f4 <OTA_ReceiveAndFlashTheCode+0x14c>
    	if ((HAL_UART_Receive( &BLUETOOTH_UART,& Packet[OTA_INDEX_DATA],length, HAL_MAX_DELAY )!=HAL_OK)              ||
 80007a6:	4835      	ldr	r0, [pc, #212]	; (800087c <OTA_ReceiveAndFlashTheCode+0x2d4>)
 80007a8:	f04f 33ff 	mov.w	r3, #4294967295
 80007ac:	4632      	mov	r2, r6
 80007ae:	1d21      	adds	r1, r4, #4
 80007b0:	f001 fb03 	bl	8001dba <HAL_UART_Receive>
 80007b4:	2800      	cmp	r0, #0
 80007b6:	d1f4      	bne.n	80007a2 <OTA_ReceiveAndFlashTheCode+0x1fa>
    	    (HAL_UART_Receive( &BLUETOOTH_UART,& Packet[OTA_INDEX_CRC+length-1],OTA_CRC_SIZE, HAL_MAX_DELAY )!=HAL_OK)||
 80007b8:	1d31      	adds	r1, r6, #4
 80007ba:	4830      	ldr	r0, [pc, #192]	; (800087c <OTA_ReceiveAndFlashTheCode+0x2d4>)
 80007bc:	f04f 33ff 	mov.w	r3, #4294967295
 80007c0:	2204      	movs	r2, #4
 80007c2:	4421      	add	r1, r4
 80007c4:	f001 faf9 	bl	8001dba <HAL_UART_Receive>
    	if ((HAL_UART_Receive( &BLUETOOTH_UART,& Packet[OTA_INDEX_DATA],length, HAL_MAX_DELAY )!=HAL_OK)              ||
 80007c8:	2800      	cmp	r0, #0
 80007ca:	d1ea      	bne.n	80007a2 <OTA_ReceiveAndFlashTheCode+0x1fa>
    	    (HAL_UART_Receive( &BLUETOOTH_UART,& Packet[OTA_INDEX_EOF+length-1],OTA_EOF_SIZE, HAL_MAX_DELAY )!=HAL_OK)  )
 80007cc:	f106 0908 	add.w	r9, r6, #8
 80007d0:	482a      	ldr	r0, [pc, #168]	; (800087c <OTA_ReceiveAndFlashTheCode+0x2d4>)
 80007d2:	f04f 33ff 	mov.w	r3, #4294967295
 80007d6:	2201      	movs	r2, #1
 80007d8:	eb04 0109 	add.w	r1, r4, r9
 80007dc:	f001 faed 	bl	8001dba <HAL_UART_Receive>
    	    (HAL_UART_Receive( &BLUETOOTH_UART,& Packet[OTA_INDEX_CRC+length-1],OTA_CRC_SIZE, HAL_MAX_DELAY )!=HAL_OK)||
 80007e0:	2800      	cmp	r0, #0
 80007e2:	d1de      	bne.n	80007a2 <OTA_ReceiveAndFlashTheCode+0x1fa>
    	if(Packet[OTA_INDEX_EOF+length-1]!=OTA_EOF)
 80007e4:	f814 3009 	ldrb.w	r3, [r4, r9]
 80007e8:	2bee      	cmp	r3, #238	; 0xee
 80007ea:	d1da      	bne.n	80007a2 <OTA_ReceiveAndFlashTheCode+0x1fa>
    	printf("DataSize=%d\r\n",length);
 80007ec:	4631      	mov	r1, r6
 80007ee:	4833      	ldr	r0, [pc, #204]	; (80008bc <OTA_ReceiveAndFlashTheCode+0x314>)
 80007f0:	f001 fd22 	bl	8002238 <iprintf>
	printf("Flashing %ld[Bytes]\r\n",data_len);
 80007f4:	4631      	mov	r1, r6
 80007f6:	4832      	ldr	r0, [pc, #200]	; (80008c0 <OTA_ReceiveAndFlashTheCode+0x318>)
 80007f8:	f001 fd1e 	bl	8002238 <iprintf>
	if(HAL_FLASH_Unlock()!=HAL_OK)
 80007fc:	f000 fcb0 	bl	8001160 <HAL_FLASH_Unlock>
 8000800:	4604      	mov	r4, r0
 8000802:	b118      	cbz	r0, 800080c <OTA_ReceiveAndFlashTheCode+0x264>
	{    printf("Cant unlock flash");
 8000804:	482f      	ldr	r0, [pc, #188]	; (80008c4 <OTA_ReceiveAndFlashTheCode+0x31c>)
 8000806:	f001 fd17 	bl	8002238 <iprintf>
   		 error=OTA_ERROR_FLASH;      
 800080a:	2401      	movs	r4, #1
    for(i = 0;i < data_len; i++ )
 800080c:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 80008d4 <OTA_ReceiveAndFlashTheCode+0x32c>
      if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,(OTA_APP_ADDRESS+ReseivedCodeSize),Packet[OTA_INDEX_DATA+i])==HAL_OK)
 8000810:	f8df a090 	ldr.w	sl, [pc, #144]	; 80008a4 <OTA_ReceiveAndFlashTheCode+0x2fc>
    for(i = 0;i < data_len; i++ )
 8000814:	f04f 0900 	mov.w	r9, #0
 8000818:	454e      	cmp	r6, r9
 800081a:	d807      	bhi.n	800082c <OTA_ReceiveAndFlashTheCode+0x284>
    if(HAL_FLASH_Lock()!=HAL_OK)
 800081c:	f000 fcb2 	bl	8001184 <HAL_FLASH_Lock>
 8000820:	b1d8      	cbz	r0, 800085a <OTA_ReceiveAndFlashTheCode+0x2b2>
    	printf("Cant lock flash");
 8000822:	4829      	ldr	r0, [pc, #164]	; (80008c8 <OTA_ReceiveAndFlashTheCode+0x320>)
 8000824:	f001 fd08 	bl	8002238 <iprintf>
   		 error=OTA_ERROR_FLASH;      
 8000828:	2401      	movs	r4, #1
 800082a:	e763      	b.n	80006f4 <OTA_ReceiveAndFlashTheCode+0x14c>
      if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,(OTA_APP_ADDRESS+ReseivedCodeSize),Packet[OTA_INDEX_DATA+i])==HAL_OK)
 800082c:	f8da 1000 	ldr.w	r1, [sl]
 8000830:	f81b 2b01 	ldrb.w	r2, [fp], #1
 8000834:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 8000838:	2300      	movs	r3, #0
 800083a:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
 800083e:	2000      	movs	r0, #0
 8000840:	f000 fcd4 	bl	80011ec <HAL_FLASH_Program>
 8000844:	b938      	cbnz	r0, 8000856 <OTA_ReceiveAndFlashTheCode+0x2ae>
        ReseivedCodeSize += 1;
 8000846:	f8da 3000 	ldr.w	r3, [sl]
 800084a:	3301      	adds	r3, #1
 800084c:	f8ca 3000 	str.w	r3, [sl]
    for(i = 0;i < data_len; i++ )
 8000850:	f109 0901 	add.w	r9, r9, #1
 8000854:	e7e0      	b.n	8000818 <OTA_ReceiveAndFlashTheCode+0x270>
        error=OTA_ERROR_FLASH;
 8000856:	2401      	movs	r4, #1
 8000858:	e7e0      	b.n	800081c <OTA_ReceiveAndFlashTheCode+0x274>
	}

    if(OTA_ERROR_OK==error)
 800085a:	2c00      	cmp	r4, #0
 800085c:	f47f af4a 	bne.w	80006f4 <OTA_ReceiveAndFlashTheCode+0x14c>
    {
    	printf("[%ld/%ld]\r\n",ReseivedCodeSize/OTA_MAX_DATA,TotalCodeSize/OTA_MAX_DATA);
 8000860:	4b11      	ldr	r3, [pc, #68]	; (80008a8 <OTA_ReceiveAndFlashTheCode+0x300>)
 8000862:	481a      	ldr	r0, [pc, #104]	; (80008cc <OTA_ReceiveAndFlashTheCode+0x324>)
 8000864:	681a      	ldr	r2, [r3, #0]
 8000866:	4b0f      	ldr	r3, [pc, #60]	; (80008a4 <OTA_ReceiveAndFlashTheCode+0x2fc>)
 8000868:	6819      	ldr	r1, [r3, #0]
 800086a:	0a92      	lsrs	r2, r2, #10
 800086c:	0a89      	lsrs	r1, r1, #10
 800086e:	f001 fce3 	bl	8002238 <iprintf>
 8000872:	e73f      	b.n	80006f4 <OTA_ReceiveAndFlashTheCode+0x14c>
 8000874:	20000000 	.word	0x20000000
 8000878:	20000092 	.word	0x20000092
 800087c:	200004b0 	.word	0x200004b0
 8000880:	20000093 	.word	0x20000093
 8000884:	20000094 	.word	0x20000094
 8000888:	080031e8 	.word	0x080031e8
 800088c:	20000001 	.word	0x20000001
 8000890:	080031f4 	.word	0x080031f4
 8000894:	08003209 	.word	0x08003209
 8000898:	08003214 	.word	0x08003214
 800089c:	08003231 	.word	0x08003231
 80008a0:	20000091 	.word	0x20000091
 80008a4:	2000049c 	.word	0x2000049c
 80008a8:	200004a0 	.word	0x200004a0
 80008ac:	0800323a 	.word	0x0800323a
 80008b0:	08003261 	.word	0x08003261
 80008b4:	0800326c 	.word	0x0800326c
 80008b8:	08003277 	.word	0x08003277
 80008bc:	0800328c 	.word	0x0800328c
 80008c0:	0800329a 	.word	0x0800329a
 80008c4:	080032b0 	.word	0x080032b0
 80008c8:	080032c2 	.word	0x080032c2
 80008cc:	080032d2 	.word	0x080032d2
 80008d0:	20000090 	.word	0x20000090
 80008d4:	20000096 	.word	0x20000096
 80008d8:	491a      	ldr	r1, [pc, #104]	; (8000944 <OTA_ReceiveAndFlashTheCode+0x39c>)
	for(iterator=0;iterator<OTA_MAX_PACKET;iterator++)
 80008da:	2200      	movs	r2, #0
 80008dc:	460b      	mov	r3, r1
		Packet[iterator]=0;
 80008de:	4694      	mov	ip, r2
	for(iterator=0;iterator<OTA_MAX_PACKET;iterator++)
 80008e0:	f240 4009 	movw	r0, #1033	; 0x409
 80008e4:	3201      	adds	r2, #1
 80008e6:	4282      	cmp	r2, r0
		Packet[iterator]=0;
 80008e8:	f801 cb01 	strb.w	ip, [r1], #1
	for(iterator=0;iterator<OTA_MAX_PACKET;iterator++)
 80008ec:	d1fa      	bne.n	80008e4 <OTA_ReceiveAndFlashTheCode+0x33c>
}

static OTA_Error_t   OTA_Response           (void)
{   
    OTA_Error_t error=OTA_ERROR_OK;
	Packet[OTA_INDEX_SOF] =OTA_SOF;
 80008ee:	22aa      	movs	r2, #170	; 0xaa
	Packet[OTA_INDEX_TYPE]=OTA_PACKET_TYPE_RESPONSE;
	
	uint16_t* LengthPtr=(uint16_t*)&Packet[OTA_INDEX_LENGTH];
	*LengthPtr =OTA_RESPONSE_SIZE;
	
	Packet[OTA_INDEX_RESPONSE]=Response;
 80008f0:	4e15      	ldr	r6, [pc, #84]	; (8000948 <OTA_ReceiveAndFlashTheCode+0x3a0>)
	Packet[OTA_INDEX_SOF] =OTA_SOF;
 80008f2:	701a      	strb	r2, [r3, #0]
	*LengthPtr =OTA_RESPONSE_SIZE;
 80008f4:	f04f 0201 	mov.w	r2, #1
 80008f8:	805a      	strh	r2, [r3, #2]
	Packet[OTA_INDEX_RESPONSE]=Response;
 80008fa:	7832      	ldrb	r2, [r6, #0]
 80008fc:	711a      	strb	r2, [r3, #4]
	Packet[OTA_INDEX_TYPE]=OTA_PACKET_TYPE_RESPONSE;
 80008fe:	2003      	movs	r0, #3
	
	uint32_t* CRCPtr=(uint32_t*)&Packet[OTA_INDEX_CRC+OTA_RESPONSE_SIZE-1];
	*CRCPtr=0x00000000; //you should calculate the real CRC here
	
	Packet[OTA_INDEX_EOF+OTA_RESPONSE_SIZE-1]=OTA_EOF;
 8000900:	22ee      	movs	r2, #238	; 0xee
	*CRCPtr=0x00000000; //you should calculate the real CRC here
 8000902:	f8c3 c005 	str.w	ip, [r3, #5]
	Packet[OTA_INDEX_TYPE]=OTA_PACKET_TYPE_RESPONSE;
 8000906:	7058      	strb	r0, [r3, #1]
	Packet[OTA_INDEX_EOF+OTA_RESPONSE_SIZE-1]=OTA_EOF;
 8000908:	725a      	strb	r2, [r3, #9]
	HAL_Delay(3);
 800090a:	f000 fac5 	bl	8000e98 <HAL_Delay>
	if(HAL_UART_Transmit(&BLUETOOTH_UART,Packet,OTA_RESPONSE_SIZE+OTA_PACKET_INFO_BYTES, HAL_MAX_DELAY)!=HAL_OK)
 800090e:	490d      	ldr	r1, [pc, #52]	; (8000944 <OTA_ReceiveAndFlashTheCode+0x39c>)
 8000910:	480e      	ldr	r0, [pc, #56]	; (800094c <OTA_ReceiveAndFlashTheCode+0x3a4>)
 8000912:	f04f 33ff 	mov.w	r3, #4294967295
 8000916:	220a      	movs	r2, #10
 8000918:	f001 f9fa 	bl	8001d10 <HAL_UART_Transmit>
 800091c:	b118      	cbz	r0, 8000926 <OTA_ReceiveAndFlashTheCode+0x37e>
	        		ReceivingFlag=0;
 800091e:	2300      	movs	r3, #0
 8000920:	703b      	strb	r3, [r7, #0]
	        	CurrentState=OTA_STATE_IDLE;
 8000922:	2300      	movs	r3, #0
 8000924:	e688      	b.n	8000638 <OTA_ReceiveAndFlashTheCode+0x90>
	{
		error=OTA_ERROR_RESPONSE;
	}
    if(OTA_ERROR_OK==error)
	{
		Response?printf("Response ACK\r\n"):printf("Response NACK\r\n");
 8000926:	7833      	ldrb	r3, [r6, #0]
 8000928:	b153      	cbz	r3, 8000940 <OTA_ReceiveAndFlashTheCode+0x398>
 800092a:	4809      	ldr	r0, [pc, #36]	; (8000950 <OTA_ReceiveAndFlashTheCode+0x3a8>)
 800092c:	f001 fd0a 	bl	8002344 <puts>
	        	if((error!=OTA_ERROR_OK)||(1==LastPacketFlag)||(OTA_RESPONSE_NACK==Response))
 8000930:	4b08      	ldr	r3, [pc, #32]	; (8000954 <OTA_ReceiveAndFlashTheCode+0x3ac>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	2b01      	cmp	r3, #1
 8000936:	d0f2      	beq.n	800091e <OTA_ReceiveAndFlashTheCode+0x376>
 8000938:	7833      	ldrb	r3, [r6, #0]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d0ef      	beq.n	800091e <OTA_ReceiveAndFlashTheCode+0x376>
 800093e:	e7f0      	b.n	8000922 <OTA_ReceiveAndFlashTheCode+0x37a>
		Response?printf("Response ACK\r\n"):printf("Response NACK\r\n");
 8000940:	4805      	ldr	r0, [pc, #20]	; (8000958 <OTA_ReceiveAndFlashTheCode+0x3b0>)
 8000942:	e7f3      	b.n	800092c <OTA_ReceiveAndFlashTheCode+0x384>
 8000944:	20000092 	.word	0x20000092
 8000948:	20000001 	.word	0x20000001
 800094c:	200004b0 	.word	0x200004b0
 8000950:	080032de 	.word	0x080032de
 8000954:	20000091 	.word	0x20000091
 8000958:	080032ec 	.word	0x080032ec

0800095c <__io_putchar>:

}

//Consider it as an implementation for printf() to use UART
int __io_putchar(int ch)
{
 800095c:	b507      	push	{r0, r1, r2, lr}
  /* e.g. write a character to the PC_UART and Loop until the end of transmission */
  HAL_UART_Transmit(&PC_UART, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800095e:	f04f 33ff 	mov.w	r3, #4294967295
{
 8000962:	9001      	str	r0, [sp, #4]
  HAL_UART_Transmit(&PC_UART, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000964:	2201      	movs	r2, #1
 8000966:	a901      	add	r1, sp, #4
 8000968:	4803      	ldr	r0, [pc, #12]	; (8000978 <__io_putchar+0x1c>)
 800096a:	f001 f9d1 	bl	8001d10 <HAL_UART_Transmit>
  return ch;
}
 800096e:	9801      	ldr	r0, [sp, #4]
 8000970:	b003      	add	sp, #12
 8000972:	f85d fb04 	ldr.w	pc, [sp], #4
 8000976:	bf00      	nop
 8000978:	200004f4 	.word	0x200004f4

0800097c <SystemClock_Config>:

void SystemClock_Config(void)
{
 800097c:	b510      	push	{r4, lr}
 800097e:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000980:	2214      	movs	r2, #20
 8000982:	2100      	movs	r1, #0
 8000984:	a808      	add	r0, sp, #32
 8000986:	f001 fc4f 	bl	8002228 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800098a:	2214      	movs	r2, #20
 800098c:	2100      	movs	r1, #0
 800098e:	a802      	add	r0, sp, #8
 8000990:	f001 fc4a 	bl	8002228 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000994:	4b1f      	ldr	r3, [pc, #124]	; (8000a14 <SystemClock_Config+0x98>)
 8000996:	2200      	movs	r2, #0
 8000998:	9200      	str	r2, [sp, #0]
 800099a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800099c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80009a0:	6419      	str	r1, [r3, #64]	; 0x40
 80009a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009a4:	491c      	ldr	r1, [pc, #112]	; (8000a18 <SystemClock_Config+0x9c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009aa:	9300      	str	r3, [sp, #0]
 80009ac:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009ae:	9201      	str	r2, [sp, #4]
 80009b0:	680b      	ldr	r3, [r1, #0]
 80009b2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ba:	600b      	str	r3, [r1, #0]
 80009bc:	680b      	ldr	r3, [r1, #0]
 80009be:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009c2:	9301      	str	r3, [sp, #4]
 80009c4:	9b01      	ldr	r3, [sp, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009c6:	2101      	movs	r1, #1
 80009c8:	2310      	movs	r3, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 90;
 80009ca:	2008      	movs	r0, #8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009cc:	e9cd 130a 	strd	r1, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 90;
 80009d0:	235a      	movs	r3, #90	; 0x5a
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009d2:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLN = 90;
 80009d4:	e9cd 030f 	strd	r0, r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009d8:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009da:	e9cd 420d 	strd	r4, r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009de:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009e2:	9407      	str	r4, [sp, #28]
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009e4:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009e6:	f000 fedd 	bl	80017a4 <HAL_RCC_OscConfig>
 80009ea:	b108      	cbz	r0, 80009f0 <SystemClock_Config+0x74>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009ec:	b672      	cpsid	i


void Error_Handler(void)
{
  __disable_irq();
  while (1)
 80009ee:	e7fe      	b.n	80009ee <SystemClock_Config+0x72>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009f0:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009f2:	e9cd 3402 	strd	r3, r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009fa:	e9cd 3005 	strd	r3, r0, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009fe:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a00:	4621      	mov	r1, r4
 8000a02:	a802      	add	r0, sp, #8
 8000a04:	f000 fdca 	bl	800159c <HAL_RCC_ClockConfig>
 8000a08:	b108      	cbz	r0, 8000a0e <SystemClock_Config+0x92>
 8000a0a:	b672      	cpsid	i
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <SystemClock_Config+0x90>
}
 8000a0e:	b014      	add	sp, #80	; 0x50
 8000a10:	bd10      	pop	{r4, pc}
 8000a12:	bf00      	nop
 8000a14:	40023800 	.word	0x40023800
 8000a18:	40007000 	.word	0x40007000

08000a1c <main>:
{
 8000a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a1e:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 8000a20:	f000 fa0e 	bl	8000e40 <HAL_Init>
  SystemClock_Config();
 8000a24:	f7ff ffaa 	bl	800097c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a28:	2214      	movs	r2, #20
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	eb0d 0002 	add.w	r0, sp, r2
 8000a30:	f001 fbfa 	bl	8002228 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a34:	2400      	movs	r4, #0
 8000a36:	4b51      	ldr	r3, [pc, #324]	; (8000b7c <main+0x160>)
 8000a38:	9401      	str	r4, [sp, #4]
 8000a3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a3c:	4850      	ldr	r0, [pc, #320]	; (8000b80 <main+0x164>)
  huart1.Init.BaudRate = 9600;
 8000a3e:	4f51      	ldr	r7, [pc, #324]	; (8000b84 <main+0x168>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a40:	f042 0204 	orr.w	r2, r2, #4
 8000a44:	631a      	str	r2, [r3, #48]	; 0x30
 8000a46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a48:	f002 0204 	and.w	r2, r2, #4
 8000a4c:	9201      	str	r2, [sp, #4]
 8000a4e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a50:	9402      	str	r4, [sp, #8]
 8000a52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a54:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000a58:	631a      	str	r2, [r3, #48]	; 0x30
 8000a5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a5c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000a60:	9202      	str	r2, [sp, #8]
 8000a62:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a64:	9403      	str	r4, [sp, #12]
 8000a66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a68:	f042 0201 	orr.w	r2, r2, #1
 8000a6c:	631a      	str	r2, [r3, #48]	; 0x30
 8000a6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a70:	f002 0201 	and.w	r2, r2, #1
 8000a74:	9203      	str	r2, [sp, #12]
 8000a76:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a78:	9404      	str	r4, [sp, #16]
 8000a7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a7c:	f042 0202 	orr.w	r2, r2, #2
 8000a80:	631a      	str	r2, [r3, #48]	; 0x30
 8000a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a84:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a88:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a8a:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a8c:	2120      	movs	r1, #32
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a8e:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a90:	f000 fd7e 	bl	8001590 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a98:	483b      	ldr	r0, [pc, #236]	; (8000b88 <main+0x16c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a9c:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a9e:	e9cd 3405 	strd	r3, r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa2:	2520      	movs	r5, #32
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aa4:	f000 fc9a 	bl	80013dc <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa8:	2601      	movs	r6, #1
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000aaa:	4835      	ldr	r0, [pc, #212]	; (8000b80 <main+0x164>)
 8000aac:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aae:	e9cd 5605 	strd	r5, r6, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab2:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ab6:	f000 fc91 	bl	80013dc <HAL_GPIO_Init>
  huart1.Instance = USART1;
 8000aba:	4834      	ldr	r0, [pc, #208]	; (8000b8c <main+0x170>)
  huart1.Init.BaudRate = 9600;
 8000abc:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000ac0:	e9c0 7300 	strd	r7, r3, [r0]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ac4:	270c      	movs	r7, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ac6:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aca:	e9c0 7405 	strd	r7, r4, [r0, #20]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ace:	6104      	str	r4, [r0, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ad0:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ad2:	f001 f8ef 	bl	8001cb4 <HAL_UART_Init>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	b108      	cbz	r0, 8000ade <main+0xc2>
 8000ada:	b672      	cpsid	i
  while (1)
 8000adc:	e7fe      	b.n	8000adc <main+0xc0>
  huart2.Instance = USART2;
 8000ade:	482c      	ldr	r0, [pc, #176]	; (8000b90 <main+0x174>)
  huart2.Init.BaudRate = 115200;
 8000ae0:	492c      	ldr	r1, [pc, #176]	; (8000b94 <main+0x178>)
 8000ae2:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ae6:	e9c0 1200 	strd	r1, r2, [r0]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000aea:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000aee:	e9c0 3704 	strd	r3, r7, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000af2:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000af6:	f001 f8dd 	bl	8001cb4 <HAL_UART_Init>
 8000afa:	b108      	cbz	r0, 8000b00 <main+0xe4>
 8000afc:	b672      	cpsid	i
  while (1)
 8000afe:	e7fe      	b.n	8000afe <main+0xe2>
  printf("Starting BootLoader %s\r\n",VERSION);
 8000b00:	4925      	ldr	r1, [pc, #148]	; (8000b98 <main+0x17c>)
 8000b02:	4826      	ldr	r0, [pc, #152]	; (8000b9c <main+0x180>)
 8000b04:	f001 fb98 	bl	8002238 <iprintf>
  HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin, GPIO_PIN_SET );
 8000b08:	4632      	mov	r2, r6
 8000b0a:	4629      	mov	r1, r5
 8000b0c:	481c      	ldr	r0, [pc, #112]	; (8000b80 <main+0x164>)
	OTAButtonState=HAL_GPIO_ReadPin( GPIOC, GPIO_PIN_13 );
 8000b0e:	4e1e      	ldr	r6, [pc, #120]	; (8000b88 <main+0x16c>)
  HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin, GPIO_PIN_SET );
 8000b10:	f000 fd3e 	bl	8001590 <HAL_GPIO_WritePin>
  printf("Press The BootLoader Button to Trigger OTA Update...\r\n");
 8000b14:	4822      	ldr	r0, [pc, #136]	; (8000ba0 <main+0x184>)
 8000b16:	f001 fc15 	bl	8002344 <puts>
  uint32_t CurrentTick = HAL_GetTick();
 8000b1a:	f000 f9b7 	bl	8000e8c <HAL_GetTick>
 8000b1e:	4604      	mov	r4, r0
  uint32_t EndTick     = HAL_GetTick() + 3000;   // from now to 3 Seconds
 8000b20:	f000 f9b4 	bl	8000e8c <HAL_GetTick>
 8000b24:	f600 35b8 	addw	r5, r0, #3000	; 0xbb8
  while(CurrentTick < EndTick)
 8000b28:	42ac      	cmp	r4, r5
 8000b2a:	d30b      	bcc.n	8000b44 <main+0x128>
  printf("Jump to Application\r\n");
 8000b2c:	481d      	ldr	r0, [pc, #116]	; (8000ba4 <main+0x188>)
 8000b2e:	f001 fc09 	bl	8002344 <puts>
  HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin, GPIO_PIN_RESET );
 8000b32:	4813      	ldr	r0, [pc, #76]	; (8000b80 <main+0x164>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	2120      	movs	r1, #32
 8000b38:	f000 fd2a 	bl	8001590 <HAL_GPIO_WritePin>
  void (*APP_ResetHandler)(void) = (void*)(*((volatile uint32_t*) (OTA_APP_ADDRESS + 4U)));
 8000b3c:	4b1a      	ldr	r3, [pc, #104]	; (8000ba8 <main+0x18c>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
  APP_ResetHandler();
 8000b40:	4798      	blx	r3
  while (1)
 8000b42:	e7fe      	b.n	8000b42 <main+0x126>
	OTAButtonState=HAL_GPIO_ReadPin( GPIOC, GPIO_PIN_13 );
 8000b44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b48:	4630      	mov	r0, r6
 8000b4a:	f000 fd1b 	bl	8001584 <HAL_GPIO_ReadPin>
    if(OTAButtonState== PRESSED )
 8000b4e:	b138      	cbz	r0, 8000b60 <main+0x144>
    CurrentTick = HAL_GetTick();
 8000b50:	f000 f99c 	bl	8000e8c <HAL_GetTick>
 8000b54:	4604      	mov	r4, r0
 8000b56:	e7e7      	b.n	8000b28 <main+0x10c>
      printf("OTA Update : ERROR!!! HALT!!!\r\n");
 8000b58:	4814      	ldr	r0, [pc, #80]	; (8000bac <main+0x190>)
 8000b5a:	f001 fbf3 	bl	8002344 <puts>
      while( 1 );
 8000b5e:	e7fe      	b.n	8000b5e <main+0x142>
    printf("Starting Firmware Download...\r\n");
 8000b60:	4813      	ldr	r0, [pc, #76]	; (8000bb0 <main+0x194>)
 8000b62:	f001 fbef 	bl	8002344 <puts>
    if( OTA_ReceiveAndFlashTheCode () != OTA_ERROR_OK )
 8000b66:	f7ff fd1f 	bl	80005a8 <OTA_ReceiveAndFlashTheCode>
 8000b6a:	2800      	cmp	r0, #0
 8000b6c:	d1f4      	bne.n	8000b58 <main+0x13c>
      printf("Firmware Update Done Rebooting...\r\n");
 8000b6e:	4811      	ldr	r0, [pc, #68]	; (8000bb4 <main+0x198>)
 8000b70:	f001 fbe8 	bl	8002344 <puts>
      HAL_NVIC_SystemReset();
 8000b74:	f000 f9f6 	bl	8000f64 <HAL_NVIC_SystemReset>
 8000b78:	e7d8      	b.n	8000b2c <main+0x110>
 8000b7a:	bf00      	nop
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	40020000 	.word	0x40020000
 8000b84:	40011000 	.word	0x40011000
 8000b88:	40020800 	.word	0x40020800
 8000b8c:	200004b0 	.word	0x200004b0
 8000b90:	200004f4 	.word	0x200004f4
 8000b94:	40004400 	.word	0x40004400
 8000b98:	080032fb 	.word	0x080032fb
 8000b9c:	08003301 	.word	0x08003301
 8000ba0:	0800331a 	.word	0x0800331a
 8000ba4:	08003392 	.word	0x08003392
 8000ba8:	08020004 	.word	0x08020004
 8000bac:	08003350 	.word	0x08003350
 8000bb0:	080033a7 	.word	0x080033a7
 8000bb4:	0800336f 	.word	0x0800336f

08000bb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb8:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bba:	4b0d      	ldr	r3, [pc, #52]	; (8000bf0 <HAL_MspInit+0x38>)
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	9100      	str	r1, [sp, #0]
 8000bc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000bc2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000bc6:	645a      	str	r2, [r3, #68]	; 0x44
 8000bc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000bca:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000bce:	9200      	str	r2, [sp, #0]
 8000bd0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bd2:	9101      	str	r1, [sp, #4]
 8000bd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bd6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000bda:	641a      	str	r2, [r3, #64]	; 0x40
 8000bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000be2:	9301      	str	r3, [sp, #4]
 8000be4:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000be6:	2007      	movs	r0, #7
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000be8:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000bea:	f000 b969 	b.w	8000ec0 <HAL_NVIC_SetPriorityGrouping>
 8000bee:	bf00      	nop
 8000bf0:	40023800 	.word	0x40023800

08000bf4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bf4:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf6:	2214      	movs	r2, #20
{
 8000bf8:	b08a      	sub	sp, #40	; 0x28
 8000bfa:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	eb0d 0002 	add.w	r0, sp, r2
 8000c02:	f001 fb11 	bl	8002228 <memset>
  if(huart->Instance==USART1)
 8000c06:	6823      	ldr	r3, [r4, #0]
 8000c08:	4a2f      	ldr	r2, [pc, #188]	; (8000cc8 <HAL_UART_MspInit+0xd4>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d12e      	bne.n	8000c6c <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c0e:	4b2f      	ldr	r3, [pc, #188]	; (8000ccc <HAL_UART_MspInit+0xd8>)
 8000c10:	2400      	movs	r4, #0
 8000c12:	9401      	str	r4, [sp, #4]
 8000c14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000c16:	f042 0210 	orr.w	r2, r2, #16
 8000c1a:	645a      	str	r2, [r3, #68]	; 0x44
 8000c1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000c1e:	f002 0210 	and.w	r2, r2, #16
 8000c22:	9201      	str	r2, [sp, #4]
 8000c24:	9a01      	ldr	r2, [sp, #4]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c26:	9402      	str	r4, [sp, #8]
 8000c28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c2a:	f042 0201 	orr.w	r2, r2, #1
 8000c2e:	631a      	str	r2, [r3, #48]	; 0x30
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	9407      	str	r4, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c34:	f003 0301 	and.w	r3, r3, #1
 8000c38:	9302      	str	r3, [sp, #8]
 8000c3a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3c:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8000c40:	2302      	movs	r3, #2
 8000c42:	e9cd 0305 	strd	r0, r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c46:	f04f 0c03 	mov.w	ip, #3
 8000c4a:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4c:	4820      	ldr	r0, [pc, #128]	; (8000cd0 <HAL_UART_MspInit+0xdc>)
 8000c4e:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c50:	e9cd c308 	strd	ip, r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c54:	f000 fbc2 	bl	80013dc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c58:	2025      	movs	r0, #37	; 0x25
 8000c5a:	4622      	mov	r2, r4
 8000c5c:	4621      	mov	r1, r4
 8000c5e:	f000 f941 	bl	8000ee4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c62:	2025      	movs	r0, #37	; 0x25
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c64:	f000 f970 	bl	8000f48 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c68:	b00a      	add	sp, #40	; 0x28
 8000c6a:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART2)
 8000c6c:	4a19      	ldr	r2, [pc, #100]	; (8000cd4 <HAL_UART_MspInit+0xe0>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d1fa      	bne.n	8000c68 <HAL_UART_MspInit+0x74>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c72:	4b16      	ldr	r3, [pc, #88]	; (8000ccc <HAL_UART_MspInit+0xd8>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c74:	4816      	ldr	r0, [pc, #88]	; (8000cd0 <HAL_UART_MspInit+0xdc>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c76:	2400      	movs	r4, #0
 8000c78:	9403      	str	r4, [sp, #12]
 8000c7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c7c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000c80:	641a      	str	r2, [r3, #64]	; 0x40
 8000c82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c84:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000c88:	9203      	str	r2, [sp, #12]
 8000c8a:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8c:	9404      	str	r4, [sp, #16]
 8000c8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c90:	f042 0201 	orr.w	r2, r2, #1
 8000c94:	631a      	str	r2, [r3, #48]	; 0x30
 8000c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	9407      	str	r4, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9a:	f003 0301 	and.w	r3, r3, #1
 8000c9e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca0:	220c      	movs	r2, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca2:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	e9cd 2305 	strd	r2, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000caa:	2103      	movs	r1, #3
 8000cac:	2307      	movs	r3, #7
 8000cae:	e9cd 1308 	strd	r1, r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb2:	a905      	add	r1, sp, #20
 8000cb4:	f000 fb92 	bl	80013dc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000cb8:	2026      	movs	r0, #38	; 0x26
 8000cba:	4622      	mov	r2, r4
 8000cbc:	4621      	mov	r1, r4
 8000cbe:	f000 f911 	bl	8000ee4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000cc2:	2026      	movs	r0, #38	; 0x26
 8000cc4:	e7ce      	b.n	8000c64 <HAL_UART_MspInit+0x70>
 8000cc6:	bf00      	nop
 8000cc8:	40011000 	.word	0x40011000
 8000ccc:	40023800 	.word	0x40023800
 8000cd0:	40020000 	.word	0x40020000
 8000cd4:	40004400 	.word	0x40004400

08000cd8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cd8:	e7fe      	b.n	8000cd8 <NMI_Handler>

08000cda <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cda:	e7fe      	b.n	8000cda <HardFault_Handler>

08000cdc <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cdc:	e7fe      	b.n	8000cdc <MemManage_Handler>

08000cde <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cde:	e7fe      	b.n	8000cde <BusFault_Handler>

08000ce0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ce0:	e7fe      	b.n	8000ce0 <UsageFault_Handler>

08000ce2 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ce2:	4770      	bx	lr

08000ce4 <DebugMon_Handler>:
 8000ce4:	4770      	bx	lr

08000ce6 <PendSV_Handler>:
 8000ce6:	4770      	bx	lr

08000ce8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ce8:	f000 b8c4 	b.w	8000e74 <HAL_IncTick>

08000cec <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000cec:	4801      	ldr	r0, [pc, #4]	; (8000cf4 <USART1_IRQHandler+0x8>)
 8000cee:	f001 b929 	b.w	8001f44 <HAL_UART_IRQHandler>
 8000cf2:	bf00      	nop
 8000cf4:	200004b0 	.word	0x200004b0

08000cf8 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000cf8:	4801      	ldr	r0, [pc, #4]	; (8000d00 <USART2_IRQHandler+0x8>)
 8000cfa:	f001 b923 	b.w	8001f44 <HAL_UART_IRQHandler>
 8000cfe:	bf00      	nop
 8000d00:	200004f4 	.word	0x200004f4

08000d04 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d04:	b570      	push	{r4, r5, r6, lr}
 8000d06:	460e      	mov	r6, r1
 8000d08:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d0a:	2500      	movs	r5, #0
 8000d0c:	42a5      	cmp	r5, r4
 8000d0e:	db01      	blt.n	8000d14 <_read+0x10>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8000d10:	4620      	mov	r0, r4
 8000d12:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8000d14:	f3af 8000 	nop.w
 8000d18:	5570      	strb	r0, [r6, r5]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d1a:	3501      	adds	r5, #1
 8000d1c:	e7f6      	b.n	8000d0c <_read+0x8>

08000d1e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d1e:	b570      	push	{r4, r5, r6, lr}
 8000d20:	460e      	mov	r6, r1
 8000d22:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d24:	2500      	movs	r5, #0
 8000d26:	42a5      	cmp	r5, r4
 8000d28:	db01      	blt.n	8000d2e <_write+0x10>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8000d2a:	4620      	mov	r0, r4
 8000d2c:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8000d2e:	5d70      	ldrb	r0, [r6, r5]
 8000d30:	f7ff fe14 	bl	800095c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d34:	3501      	adds	r5, #1
 8000d36:	e7f6      	b.n	8000d26 <_write+0x8>

08000d38 <_close>:

int _close(int file)
{
	return -1;
}
 8000d38:	f04f 30ff 	mov.w	r0, #4294967295
 8000d3c:	4770      	bx	lr

08000d3e <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8000d3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d42:	604b      	str	r3, [r1, #4]
	return 0;
}
 8000d44:	2000      	movs	r0, #0
 8000d46:	4770      	bx	lr

08000d48 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8000d48:	2001      	movs	r0, #1
 8000d4a:	4770      	bx	lr

08000d4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8000d4c:	2000      	movs	r0, #0
 8000d4e:	4770      	bx	lr

08000d50 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d50:	4b0b      	ldr	r3, [pc, #44]	; (8000d80 <_sbrk+0x30>)
 8000d52:	6819      	ldr	r1, [r3, #0]
{
 8000d54:	b510      	push	{r4, lr}
 8000d56:	4602      	mov	r2, r0
  if (NULL == __sbrk_heap_end)
 8000d58:	b909      	cbnz	r1, 8000d5e <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8000d5a:	490a      	ldr	r1, [pc, #40]	; (8000d84 <_sbrk+0x34>)
 8000d5c:	6019      	str	r1, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d5e:	6818      	ldr	r0, [r3, #0]
 8000d60:	4909      	ldr	r1, [pc, #36]	; (8000d88 <_sbrk+0x38>)
 8000d62:	4c0a      	ldr	r4, [pc, #40]	; (8000d8c <_sbrk+0x3c>)
 8000d64:	4402      	add	r2, r0
 8000d66:	1b09      	subs	r1, r1, r4
 8000d68:	428a      	cmp	r2, r1
 8000d6a:	d906      	bls.n	8000d7a <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8000d6c:	f001 fa32 	bl	80021d4 <__errno>
 8000d70:	230c      	movs	r3, #12
 8000d72:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000d74:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8000d78:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8000d7a:	601a      	str	r2, [r3, #0]
  return (void *)prev_heap_end;
 8000d7c:	e7fc      	b.n	8000d78 <_sbrk+0x28>
 8000d7e:	bf00      	nop
 8000d80:	200004a4 	.word	0x200004a4
 8000d84:	20000570 	.word	0x20000570
 8000d88:	20020000 	.word	0x20020000
 8000d8c:	00000400 	.word	0x00000400

08000d90 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d90:	4a03      	ldr	r2, [pc, #12]	; (8000da0 <SystemInit+0x10>)
 8000d92:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8000d96:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d9a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d9e:	4770      	bx	lr
 8000da0:	e000ed00 	.word	0xe000ed00

08000da4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000da4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ddc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000da8:	480d      	ldr	r0, [pc, #52]	; (8000de0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000daa:	490e      	ldr	r1, [pc, #56]	; (8000de4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000dac:	4a0e      	ldr	r2, [pc, #56]	; (8000de8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000db0:	e002      	b.n	8000db8 <LoopCopyDataInit>

08000db2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000db2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000db4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000db6:	3304      	adds	r3, #4

08000db8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000db8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dbc:	d3f9      	bcc.n	8000db2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dbe:	4a0b      	ldr	r2, [pc, #44]	; (8000dec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000dc0:	4c0b      	ldr	r4, [pc, #44]	; (8000df0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dc4:	e001      	b.n	8000dca <LoopFillZerobss>

08000dc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dc8:	3204      	adds	r2, #4

08000dca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dcc:	d3fb      	bcc.n	8000dc6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000dce:	f7ff ffdf 	bl	8000d90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dd2:	f001 fa05 	bl	80021e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dd6:	f7ff fe21 	bl	8000a1c <main>
  bx  lr    
 8000dda:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ddc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000de0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000de4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000de8:	08003488 	.word	0x08003488
  ldr r2, =_sbss
 8000dec:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000df0:	2000056c 	.word	0x2000056c

08000df4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000df4:	e7fe      	b.n	8000df4 <ADC_IRQHandler>
	...

08000df8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000df8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dfa:	4a0e      	ldr	r2, [pc, #56]	; (8000e34 <HAL_InitTick+0x3c>)
 8000dfc:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <HAL_InitTick+0x40>)
{
 8000dfe:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e00:	7818      	ldrb	r0, [r3, #0]
 8000e02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e06:	fbb3 f3f0 	udiv	r3, r3, r0
 8000e0a:	6810      	ldr	r0, [r2, #0]
 8000e0c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000e10:	f000 f8ba 	bl	8000f88 <HAL_SYSTICK_Config>
 8000e14:	4604      	mov	r4, r0
 8000e16:	b958      	cbnz	r0, 8000e30 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e18:	2d0f      	cmp	r5, #15
 8000e1a:	d809      	bhi.n	8000e30 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	4629      	mov	r1, r5
 8000e20:	f04f 30ff 	mov.w	r0, #4294967295
 8000e24:	f000 f85e 	bl	8000ee4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e28:	4b04      	ldr	r3, [pc, #16]	; (8000e3c <HAL_InitTick+0x44>)
 8000e2a:	4620      	mov	r0, r4
 8000e2c:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000e2e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000e30:	2001      	movs	r0, #1
 8000e32:	e7fc      	b.n	8000e2e <HAL_InitTick+0x36>
 8000e34:	20000004 	.word	0x20000004
 8000e38:	20000008 	.word	0x20000008
 8000e3c:	2000000c 	.word	0x2000000c

08000e40 <HAL_Init>:
{
 8000e40:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e42:	4b0b      	ldr	r3, [pc, #44]	; (8000e70 <HAL_Init+0x30>)
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000e4a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000e52:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000e5a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e5c:	2003      	movs	r0, #3
 8000e5e:	f000 f82f 	bl	8000ec0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e62:	2000      	movs	r0, #0
 8000e64:	f7ff ffc8 	bl	8000df8 <HAL_InitTick>
  HAL_MspInit();
 8000e68:	f7ff fea6 	bl	8000bb8 <HAL_MspInit>
}
 8000e6c:	2000      	movs	r0, #0
 8000e6e:	bd08      	pop	{r3, pc}
 8000e70:	40023c00 	.word	0x40023c00

08000e74 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000e74:	4a03      	ldr	r2, [pc, #12]	; (8000e84 <HAL_IncTick+0x10>)
 8000e76:	4b04      	ldr	r3, [pc, #16]	; (8000e88 <HAL_IncTick+0x14>)
 8000e78:	6811      	ldr	r1, [r2, #0]
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	440b      	add	r3, r1
 8000e7e:	6013      	str	r3, [r2, #0]
}
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	20000538 	.word	0x20000538
 8000e88:	20000008 	.word	0x20000008

08000e8c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000e8c:	4b01      	ldr	r3, [pc, #4]	; (8000e94 <HAL_GetTick+0x8>)
 8000e8e:	6818      	ldr	r0, [r3, #0]
}
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	20000538 	.word	0x20000538

08000e98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e98:	b538      	push	{r3, r4, r5, lr}
 8000e9a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000e9c:	f7ff fff6 	bl	8000e8c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ea0:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000ea2:	bf1c      	itt	ne
 8000ea4:	4b05      	ldrne	r3, [pc, #20]	; (8000ebc <HAL_Delay+0x24>)
 8000ea6:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000ea8:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000eaa:	bf18      	it	ne
 8000eac:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000eae:	f7ff ffed 	bl	8000e8c <HAL_GetTick>
 8000eb2:	1b43      	subs	r3, r0, r5
 8000eb4:	42a3      	cmp	r3, r4
 8000eb6:	d3fa      	bcc.n	8000eae <HAL_Delay+0x16>
  {
  }
}
 8000eb8:	bd38      	pop	{r3, r4, r5, pc}
 8000eba:	bf00      	nop
 8000ebc:	20000008 	.word	0x20000008

08000ec0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ec0:	4907      	ldr	r1, [pc, #28]	; (8000ee0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000ec2:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ec4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ec8:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eca:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ecc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ed0:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ed2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ed4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ed8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000edc:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000ede:	4770      	bx	lr
 8000ee0:	e000ed00 	.word	0xe000ed00

08000ee4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ee4:	4b16      	ldr	r3, [pc, #88]	; (8000f40 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ee6:	b530      	push	{r4, r5, lr}
 8000ee8:	68dc      	ldr	r4, [r3, #12]
 8000eea:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eee:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ef2:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ef4:	2d04      	cmp	r5, #4
 8000ef6:	bf28      	it	cs
 8000ef8:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000efa:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000efc:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f00:	bf8c      	ite	hi
 8000f02:	3c03      	subhi	r4, #3
 8000f04:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f06:	fa03 f505 	lsl.w	r5, r3, r5
 8000f0a:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f0e:	40a3      	lsls	r3, r4
 8000f10:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f14:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 8000f16:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f18:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f1c:	bfac      	ite	ge
 8000f1e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f22:	4a08      	ldrlt	r2, [pc, #32]	; (8000f44 <HAL_NVIC_SetPriority+0x60>)
 8000f24:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8000f28:	bfb8      	it	lt
 8000f2a:	f000 000f 	andlt.w	r0, r0, #15
 8000f2e:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f30:	bfaa      	itet	ge
 8000f32:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f36:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f38:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000f3c:	bd30      	pop	{r4, r5, pc}
 8000f3e:	bf00      	nop
 8000f40:	e000ed00 	.word	0xe000ed00
 8000f44:	e000ed14 	.word	0xe000ed14

08000f48 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000f48:	2800      	cmp	r0, #0
 8000f4a:	db08      	blt.n	8000f5e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f4c:	0942      	lsrs	r2, r0, #5
 8000f4e:	2301      	movs	r3, #1
 8000f50:	f000 001f 	and.w	r0, r0, #31
 8000f54:	fa03 f000 	lsl.w	r0, r3, r0
 8000f58:	4b01      	ldr	r3, [pc, #4]	; (8000f60 <HAL_NVIC_EnableIRQ+0x18>)
 8000f5a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000f5e:	4770      	bx	lr
 8000f60:	e000e100 	.word	0xe000e100

08000f64 <HAL_NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000f64:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000f68:	4905      	ldr	r1, [pc, #20]	; (8000f80 <HAL_NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000f6a:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <HAL_NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000f6c:	68ca      	ldr	r2, [r1, #12]
 8000f6e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000f72:	4313      	orrs	r3, r2
 8000f74:	60cb      	str	r3, [r1, #12]
 8000f76:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000f7a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8000f7c:	e7fd      	b.n	8000f7a <HAL_NVIC_SystemReset+0x16>
 8000f7e:	bf00      	nop
 8000f80:	e000ed00 	.word	0xe000ed00
 8000f84:	05fa0004 	.word	0x05fa0004

08000f88 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f88:	3801      	subs	r0, #1
 8000f8a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000f8e:	d20a      	bcs.n	8000fa6 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f90:	4b06      	ldr	r3, [pc, #24]	; (8000fac <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f92:	4a07      	ldr	r2, [pc, #28]	; (8000fb0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f94:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f96:	21f0      	movs	r1, #240	; 0xf0
 8000f98:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f9c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f9e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fa0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fa2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fa4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000fa6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	e000e010 	.word	0xe000e010
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000fb4:	b570      	push	{r4, r5, r6, lr}
 8000fb6:	4604      	mov	r4, r0
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000fb8:	6d86      	ldr	r6, [r0, #88]	; 0x58
  
  uint32_t tickstart = HAL_GetTick();
 8000fba:	f7ff ff67 	bl	8000e8c <HAL_GetTick>
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fbe:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8000fc2:	2b02      	cmp	r3, #2
  uint32_t tickstart = HAL_GetTick();
 8000fc4:	4605      	mov	r5, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fc6:	d006      	beq.n	8000fd6 <HAL_DMA_Abort+0x22>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fc8:	2380      	movs	r3, #128	; 0x80
 8000fca:	6563      	str	r3, [r4, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fcc:	2300      	movs	r3, #0
 8000fce:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    
    return HAL_ERROR;
 8000fd2:	2001      	movs	r0, #1
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
  }
  return HAL_OK;
}
 8000fd4:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000fd6:	6823      	ldr	r3, [r4, #0]
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	f022 0216 	bic.w	r2, r2, #22
 8000fde:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000fe0:	695a      	ldr	r2, [r3, #20]
 8000fe2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000fe6:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000fe8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000fea:	b90a      	cbnz	r2, 8000ff0 <HAL_DMA_Abort+0x3c>
 8000fec:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000fee:	b11a      	cbz	r2, 8000ff8 <HAL_DMA_Abort+0x44>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	f022 0208 	bic.w	r2, r2, #8
 8000ff6:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	f022 0201 	bic.w	r2, r2, #1
 8000ffe:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001000:	6823      	ldr	r3, [r4, #0]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f013 0301 	ands.w	r3, r3, #1
 8001008:	d10a      	bne.n	8001020 <HAL_DMA_Abort+0x6c>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800100a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800100c:	223f      	movs	r2, #63	; 0x3f
 800100e:	408a      	lsls	r2, r1
 8001010:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8001012:	2201      	movs	r2, #1
 8001014:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8001018:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 800101c:	4618      	mov	r0, r3
 800101e:	e7d9      	b.n	8000fd4 <HAL_DMA_Abort+0x20>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001020:	f7ff ff34 	bl	8000e8c <HAL_GetTick>
 8001024:	1b40      	subs	r0, r0, r5
 8001026:	2805      	cmp	r0, #5
 8001028:	d9ea      	bls.n	8001000 <HAL_DMA_Abort+0x4c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800102a:	2320      	movs	r3, #32
 800102c:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800102e:	2003      	movs	r0, #3
        __HAL_UNLOCK(hdma);
 8001030:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001032:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8001036:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 800103a:	e7cb      	b.n	8000fd4 <HAL_DMA_Abort+0x20>

0800103c <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800103c:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001040:	2b02      	cmp	r3, #2
 8001042:	d003      	beq.n	800104c <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001044:	2380      	movs	r3, #128	; 0x80
 8001046:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8001048:	2001      	movs	r0, #1
 800104a:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800104c:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 800104e:	2305      	movs	r3, #5
 8001050:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8001054:	6813      	ldr	r3, [r2, #0]
 8001056:	f023 0301 	bic.w	r3, r3, #1
 800105a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800105c:	2000      	movs	r0, #0
}
 800105e:	4770      	bx	lr

08001060 <FLASH_Program_DoubleWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001060:	4909      	ldr	r1, [pc, #36]	; (8001088 <FLASH_Program_DoubleWord+0x28>)
{
 8001062:	b510      	push	{r4, lr}
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001064:	690c      	ldr	r4, [r1, #16]
 8001066:	f424 7440 	bic.w	r4, r4, #768	; 0x300
 800106a:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800106c:	690c      	ldr	r4, [r1, #16]
 800106e:	f444 7440 	orr.w	r4, r4, #768	; 0x300
 8001072:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001074:	690c      	ldr	r4, [r1, #16]
 8001076:	f044 0401 	orr.w	r4, r4, #1
 800107a:	610c      	str	r4, [r1, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800107c:	6002      	str	r2, [r0, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800107e:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001082:	6043      	str	r3, [r0, #4]
}
 8001084:	bd10      	pop	{r4, pc}
 8001086:	bf00      	nop
 8001088:	40023c00 	.word	0x40023c00

0800108c <FLASH_Program_Word>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800108c:	4b07      	ldr	r3, [pc, #28]	; (80010ac <FLASH_Program_Word+0x20>)
 800108e:	691a      	ldr	r2, [r3, #16]
 8001090:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001094:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001096:	691a      	ldr	r2, [r3, #16]
 8001098:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800109c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 800109e:	691a      	ldr	r2, [r3, #16]
 80010a0:	f042 0201 	orr.w	r2, r2, #1
 80010a4:	611a      	str	r2, [r3, #16]

  *(__IO uint32_t*)Address = Data;
 80010a6:	6001      	str	r1, [r0, #0]
}
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	40023c00 	.word	0x40023c00

080010b0 <FLASH_Program_HalfWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80010b0:	4b07      	ldr	r3, [pc, #28]	; (80010d0 <FLASH_Program_HalfWord+0x20>)
 80010b2:	691a      	ldr	r2, [r3, #16]
 80010b4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80010b8:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80010ba:	691a      	ldr	r2, [r3, #16]
 80010bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80010c0:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 80010c2:	691a      	ldr	r2, [r3, #16]
 80010c4:	f042 0201 	orr.w	r2, r2, #1
 80010c8:	611a      	str	r2, [r3, #16]

  *(__IO uint16_t*)Address = Data;
 80010ca:	8001      	strh	r1, [r0, #0]
}
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	40023c00 	.word	0x40023c00

080010d4 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80010d4:	4b20      	ldr	r3, [pc, #128]	; (8001158 <FLASH_SetErrorCode+0x84>)
 80010d6:	68da      	ldr	r2, [r3, #12]
 80010d8:	06d0      	lsls	r0, r2, #27
 80010da:	d506      	bpl.n	80010ea <FLASH_SetErrorCode+0x16>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80010dc:	491f      	ldr	r1, [pc, #124]	; (800115c <FLASH_SetErrorCode+0x88>)
 80010de:	69ca      	ldr	r2, [r1, #28]
 80010e0:	f042 0210 	orr.w	r2, r2, #16
 80010e4:	61ca      	str	r2, [r1, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80010e6:	2210      	movs	r2, #16
 80010e8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80010ea:	68da      	ldr	r2, [r3, #12]
 80010ec:	0691      	lsls	r1, r2, #26
 80010ee:	d506      	bpl.n	80010fe <FLASH_SetErrorCode+0x2a>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80010f0:	491a      	ldr	r1, [pc, #104]	; (800115c <FLASH_SetErrorCode+0x88>)
 80010f2:	69ca      	ldr	r2, [r1, #28]
 80010f4:	f042 0208 	orr.w	r2, r2, #8
 80010f8:	61ca      	str	r2, [r1, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80010fa:	2220      	movs	r2, #32
 80010fc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80010fe:	4b16      	ldr	r3, [pc, #88]	; (8001158 <FLASH_SetErrorCode+0x84>)
 8001100:	68da      	ldr	r2, [r3, #12]
 8001102:	0652      	lsls	r2, r2, #25
 8001104:	d506      	bpl.n	8001114 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001106:	4915      	ldr	r1, [pc, #84]	; (800115c <FLASH_SetErrorCode+0x88>)
 8001108:	69ca      	ldr	r2, [r1, #28]
 800110a:	f042 0204 	orr.w	r2, r2, #4
 800110e:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001110:	2240      	movs	r2, #64	; 0x40
 8001112:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001114:	68da      	ldr	r2, [r3, #12]
 8001116:	0610      	lsls	r0, r2, #24
 8001118:	d506      	bpl.n	8001128 <FLASH_SetErrorCode+0x54>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800111a:	4910      	ldr	r1, [pc, #64]	; (800115c <FLASH_SetErrorCode+0x88>)
 800111c:	69ca      	ldr	r2, [r1, #28]
 800111e:	f042 0202 	orr.w	r2, r2, #2
 8001122:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001124:	2280      	movs	r2, #128	; 0x80
 8001126:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8001128:	4b0b      	ldr	r3, [pc, #44]	; (8001158 <FLASH_SetErrorCode+0x84>)
 800112a:	68da      	ldr	r2, [r3, #12]
 800112c:	05d1      	lsls	r1, r2, #23
 800112e:	d507      	bpl.n	8001140 <FLASH_SetErrorCode+0x6c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8001130:	490a      	ldr	r1, [pc, #40]	; (800115c <FLASH_SetErrorCode+0x88>)
 8001132:	69ca      	ldr	r2, [r1, #28]
 8001134:	f042 0201 	orr.w	r2, r2, #1
 8001138:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 800113a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800113e:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001140:	68da      	ldr	r2, [r3, #12]
 8001142:	0792      	lsls	r2, r2, #30
 8001144:	d506      	bpl.n	8001154 <FLASH_SetErrorCode+0x80>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001146:	4905      	ldr	r1, [pc, #20]	; (800115c <FLASH_SetErrorCode+0x88>)
 8001148:	69ca      	ldr	r2, [r1, #28]
 800114a:	f042 0220 	orr.w	r2, r2, #32
 800114e:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001150:	2202      	movs	r2, #2
 8001152:	60da      	str	r2, [r3, #12]
  }
}
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	40023c00 	.word	0x40023c00
 800115c:	2000053c 	.word	0x2000053c

08001160 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001160:	4b06      	ldr	r3, [pc, #24]	; (800117c <HAL_FLASH_Unlock+0x1c>)
 8001162:	691a      	ldr	r2, [r3, #16]
 8001164:	2a00      	cmp	r2, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001166:	bfbf      	itttt	lt
 8001168:	4a05      	ldrlt	r2, [pc, #20]	; (8001180 <HAL_FLASH_Unlock+0x20>)
 800116a:	605a      	strlt	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800116c:	f102 3288 	addlt.w	r2, r2, #2290649224	; 0x88888888
 8001170:	605a      	strlt	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001172:	bfba      	itte	lt
 8001174:	6918      	ldrlt	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 8001176:	0fc0      	lsrlt	r0, r0, #31
 8001178:	2000      	movge	r0, #0
}
 800117a:	4770      	bx	lr
 800117c:	40023c00 	.word	0x40023c00
 8001180:	45670123 	.word	0x45670123

08001184 <HAL_FLASH_Lock>:
  FLASH->CR |= FLASH_CR_LOCK;
 8001184:	4a03      	ldr	r2, [pc, #12]	; (8001194 <HAL_FLASH_Lock+0x10>)
 8001186:	6913      	ldr	r3, [r2, #16]
 8001188:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800118c:	6113      	str	r3, [r2, #16]
}
 800118e:	2000      	movs	r0, #0
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	40023c00 	.word	0x40023c00

08001198 <FLASH_WaitForLastOperation>:
{ 
 8001198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800119a:	4b12      	ldr	r3, [pc, #72]	; (80011e4 <FLASH_WaitForLastOperation+0x4c>)
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800119c:	4d12      	ldr	r5, [pc, #72]	; (80011e8 <FLASH_WaitForLastOperation+0x50>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800119e:	2200      	movs	r2, #0
{ 
 80011a0:	4604      	mov	r4, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80011a2:	61da      	str	r2, [r3, #28]
  tickstart = HAL_GetTick();
 80011a4:	f7ff fe72 	bl	8000e8c <HAL_GetTick>
 80011a8:	462f      	mov	r7, r5
 80011aa:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80011ac:	68eb      	ldr	r3, [r5, #12]
 80011ae:	03da      	lsls	r2, r3, #15
 80011b0:	d40c      	bmi.n	80011cc <FLASH_WaitForLastOperation+0x34>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80011b2:	68eb      	ldr	r3, [r5, #12]
 80011b4:	07db      	lsls	r3, r3, #31
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80011b6:	bf44      	itt	mi
 80011b8:	2301      	movmi	r3, #1
 80011ba:	60eb      	strmi	r3, [r5, #12]
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80011bc:	68f8      	ldr	r0, [r7, #12]
 80011be:	f410 70f9 	ands.w	r0, r0, #498	; 0x1f2
 80011c2:	d007      	beq.n	80011d4 <FLASH_WaitForLastOperation+0x3c>
    FLASH_SetErrorCode();
 80011c4:	f7ff ff86 	bl	80010d4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80011c8:	2001      	movs	r0, #1
 80011ca:	e003      	b.n	80011d4 <FLASH_WaitForLastOperation+0x3c>
    if(Timeout != HAL_MAX_DELAY)
 80011cc:	1c61      	adds	r1, r4, #1
 80011ce:	d0ed      	beq.n	80011ac <FLASH_WaitForLastOperation+0x14>
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80011d0:	b90c      	cbnz	r4, 80011d6 <FLASH_WaitForLastOperation+0x3e>
        return HAL_TIMEOUT;
 80011d2:	2003      	movs	r0, #3
}  
 80011d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80011d6:	f7ff fe59 	bl	8000e8c <HAL_GetTick>
 80011da:	1b80      	subs	r0, r0, r6
 80011dc:	42a0      	cmp	r0, r4
 80011de:	d9e5      	bls.n	80011ac <FLASH_WaitForLastOperation+0x14>
 80011e0:	e7f7      	b.n	80011d2 <FLASH_WaitForLastOperation+0x3a>
 80011e2:	bf00      	nop
 80011e4:	2000053c 	.word	0x2000053c
 80011e8:	40023c00 	.word	0x40023c00

080011ec <HAL_FLASH_Program>:
{
 80011ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 80011ee:	4e20      	ldr	r6, [pc, #128]	; (8001270 <HAL_FLASH_Program+0x84>)
{
 80011f0:	9301      	str	r3, [sp, #4]
 80011f2:	4614      	mov	r4, r2
  __HAL_LOCK(&pFlash);
 80011f4:	7e32      	ldrb	r2, [r6, #24]
 80011f6:	2a01      	cmp	r2, #1
{
 80011f8:	4607      	mov	r7, r0
 80011fa:	460d      	mov	r5, r1
  __HAL_LOCK(&pFlash);
 80011fc:	d035      	beq.n	800126a <HAL_FLASH_Program+0x7e>
 80011fe:	2201      	movs	r2, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001200:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 8001204:	7632      	strb	r2, [r6, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001206:	f7ff ffc7 	bl	8001198 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800120a:	b9b8      	cbnz	r0, 800123c <HAL_FLASH_Program+0x50>
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800120c:	9b01      	ldr	r3, [sp, #4]
 800120e:	b9cf      	cbnz	r7, 8001244 <HAL_FLASH_Program+0x58>
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001210:	4b18      	ldr	r3, [pc, #96]	; (8001274 <HAL_FLASH_Program+0x88>)
 8001212:	6918      	ldr	r0, [r3, #16]
 8001214:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8001218:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800121a:	691a      	ldr	r2, [r3, #16]
 800121c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 800121e:	6918      	ldr	r0, [r3, #16]
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001220:	b2e4      	uxtb	r4, r4
  FLASH->CR |= FLASH_CR_PG;
 8001222:	f040 0001 	orr.w	r0, r0, #1
 8001226:	6118      	str	r0, [r3, #16]
  *(__IO uint8_t*)Address = Data;
 8001228:	702c      	strb	r4, [r5, #0]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800122a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800122e:	f7ff ffb3 	bl	8001198 <FLASH_WaitForLastOperation>
    FLASH->CR &= (~FLASH_CR_PG);  
 8001232:	4a10      	ldr	r2, [pc, #64]	; (8001274 <HAL_FLASH_Program+0x88>)
 8001234:	6913      	ldr	r3, [r2, #16]
 8001236:	f023 0301 	bic.w	r3, r3, #1
 800123a:	6113      	str	r3, [r2, #16]
  __HAL_UNLOCK(&pFlash);
 800123c:	2300      	movs	r3, #0
 800123e:	7633      	strb	r3, [r6, #24]
}
 8001240:	b003      	add	sp, #12
 8001242:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001244:	2f01      	cmp	r7, #1
 8001246:	d104      	bne.n	8001252 <HAL_FLASH_Program+0x66>
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001248:	b2a1      	uxth	r1, r4
 800124a:	4628      	mov	r0, r5
 800124c:	f7ff ff30 	bl	80010b0 <FLASH_Program_HalfWord>
 8001250:	e7eb      	b.n	800122a <HAL_FLASH_Program+0x3e>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001252:	2f02      	cmp	r7, #2
 8001254:	d104      	bne.n	8001260 <HAL_FLASH_Program+0x74>
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001256:	4621      	mov	r1, r4
 8001258:	4628      	mov	r0, r5
 800125a:	f7ff ff17 	bl	800108c <FLASH_Program_Word>
 800125e:	e7e4      	b.n	800122a <HAL_FLASH_Program+0x3e>
      FLASH_Program_DoubleWord(Address, Data);
 8001260:	4622      	mov	r2, r4
 8001262:	4628      	mov	r0, r5
 8001264:	f7ff fefc 	bl	8001060 <FLASH_Program_DoubleWord>
 8001268:	e7df      	b.n	800122a <HAL_FLASH_Program+0x3e>
  __HAL_LOCK(&pFlash);
 800126a:	2002      	movs	r0, #2
 800126c:	e7e8      	b.n	8001240 <HAL_FLASH_Program+0x54>
 800126e:	bf00      	nop
 8001270:	2000053c 	.word	0x2000053c
 8001274:	40023c00 	.word	0x40023c00

08001278 <FLASH_MassErase.isra.0>:
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001278:	4b07      	ldr	r3, [pc, #28]	; (8001298 <FLASH_MassErase.isra.0+0x20>)
 800127a:	6919      	ldr	r1, [r3, #16]
 800127c:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8001280:	6119      	str	r1, [r3, #16]
  FLASH->CR |= FLASH_CR_MER;
 8001282:	6919      	ldr	r1, [r3, #16]
 8001284:	f041 0104 	orr.w	r1, r1, #4
 8001288:	6119      	str	r1, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 800128a:	691a      	ldr	r2, [r3, #16]
 800128c:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 8001290:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8001294:	6118      	str	r0, [r3, #16]
}
 8001296:	4770      	bx	lr
 8001298:	40023c00 	.word	0x40023c00

0800129c <FLASH_Erase_Sector>:

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800129c:	b139      	cbz	r1, 80012ae <FLASH_Erase_Sector+0x12>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800129e:	2901      	cmp	r1, #1
 80012a0:	d01c      	beq.n	80012dc <FLASH_Erase_Sector+0x40>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80012a2:	2902      	cmp	r1, #2
  {
    tmp_psize = FLASH_PSIZE_WORD;
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80012a4:	bf0c      	ite	eq
 80012a6:	f44f 7100 	moveq.w	r1, #512	; 0x200
 80012aa:	f44f 7140 	movne.w	r1, #768	; 0x300
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80012ae:	4b0d      	ldr	r3, [pc, #52]	; (80012e4 <FLASH_Erase_Sector+0x48>)
 80012b0:	691a      	ldr	r2, [r3, #16]
 80012b2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80012b6:	611a      	str	r2, [r3, #16]
  FLASH->CR |= tmp_psize;
 80012b8:	691a      	ldr	r2, [r3, #16]
 80012ba:	4311      	orrs	r1, r2
 80012bc:	6119      	str	r1, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80012be:	691a      	ldr	r2, [r3, #16]
 80012c0:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80012c4:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80012c6:	691a      	ldr	r2, [r3, #16]
 80012c8:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 80012cc:	f040 0002 	orr.w	r0, r0, #2
 80012d0:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80012d2:	691a      	ldr	r2, [r3, #16]
 80012d4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80012d8:	611a      	str	r2, [r3, #16]
}
 80012da:	4770      	bx	lr
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80012dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012e0:	e7e5      	b.n	80012ae <FLASH_Erase_Sector+0x12>
 80012e2:	bf00      	nop
 80012e4:	40023c00 	.word	0x40023c00

080012e8 <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80012e8:	4b14      	ldr	r3, [pc, #80]	; (800133c <FLASH_FlushCaches+0x54>)
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	0591      	lsls	r1, r2, #22
 80012ee:	d50f      	bpl.n	8001310 <FLASH_FlushCaches+0x28>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80012f6:	601a      	str	r2, [r3, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001306:	601a      	str	r2, [r3, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800130e:	601a      	str	r2, [r3, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001310:	4b0a      	ldr	r3, [pc, #40]	; (800133c <FLASH_FlushCaches+0x54>)
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	0552      	lsls	r2, r2, #21
 8001316:	d50f      	bpl.n	8001338 <FLASH_FlushCaches+0x50>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800131e:	601a      	str	r2, [r3, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800132e:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001336:	601a      	str	r2, [r3, #0]
  }
}
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	40023c00 	.word	0x40023c00

08001340 <HAL_FLASHEx_Erase>:
{
 8001340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 8001344:	4e23      	ldr	r6, [pc, #140]	; (80013d4 <HAL_FLASHEx_Erase+0x94>)
 8001346:	7e33      	ldrb	r3, [r6, #24]
 8001348:	2b01      	cmp	r3, #1
{
 800134a:	4605      	mov	r5, r0
 800134c:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 800134e:	d03f      	beq.n	80013d0 <HAL_FLASHEx_Erase+0x90>
 8001350:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001352:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 8001356:	7633      	strb	r3, [r6, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001358:	f7ff ff1e 	bl	8001198 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 800135c:	4604      	mov	r4, r0
 800135e:	b9a8      	cbnz	r0, 800138c <HAL_FLASHEx_Erase+0x4c>
    *SectorError = 0xFFFFFFFFU;
 8001360:	f04f 33ff 	mov.w	r3, #4294967295
 8001364:	f8c8 3000 	str.w	r3, [r8]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001368:	682b      	ldr	r3, [r5, #0]
 800136a:	2b01      	cmp	r3, #1
 800136c:	d113      	bne.n	8001396 <HAL_FLASHEx_Erase+0x56>
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800136e:	7c28      	ldrb	r0, [r5, #16]
 8001370:	f7ff ff82 	bl	8001278 <FLASH_MassErase.isra.0>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001374:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001378:	f7ff ff0e 	bl	8001198 <FLASH_WaitForLastOperation>
      FLASH->CR &= (~FLASH_MER_BIT);
 800137c:	4a16      	ldr	r2, [pc, #88]	; (80013d8 <HAL_FLASHEx_Erase+0x98>)
 800137e:	6913      	ldr	r3, [r2, #16]
 8001380:	f023 0304 	bic.w	r3, r3, #4
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001384:	4604      	mov	r4, r0
      FLASH->CR &= (~FLASH_MER_BIT);
 8001386:	6113      	str	r3, [r2, #16]
    FLASH_FlushCaches();
 8001388:	f7ff ffae 	bl	80012e8 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 800138c:	2300      	movs	r3, #0
 800138e:	7633      	strb	r3, [r6, #24]
}
 8001390:	4620      	mov	r0, r4
 8001392:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001396:	68af      	ldr	r7, [r5, #8]
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001398:	f8df 903c 	ldr.w	r9, [pc, #60]	; 80013d8 <HAL_FLASHEx_Erase+0x98>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800139c:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 80013a0:	4413      	add	r3, r2
 80013a2:	42bb      	cmp	r3, r7
 80013a4:	d9f0      	bls.n	8001388 <HAL_FLASHEx_Erase+0x48>
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80013a6:	7c29      	ldrb	r1, [r5, #16]
 80013a8:	4638      	mov	r0, r7
 80013aa:	f7ff ff77 	bl	800129c <FLASH_Erase_Sector>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80013ae:	f24c 3050 	movw	r0, #50000	; 0xc350
 80013b2:	f7ff fef1 	bl	8001198 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80013b6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80013ba:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80013be:	f8c9 3010 	str.w	r3, [r9, #16]
        if (status != HAL_OK)
 80013c2:	b118      	cbz	r0, 80013cc <HAL_FLASHEx_Erase+0x8c>
          *SectorError = index;
 80013c4:	f8c8 7000 	str.w	r7, [r8]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80013c8:	4604      	mov	r4, r0
          break;
 80013ca:	e7dd      	b.n	8001388 <HAL_FLASHEx_Erase+0x48>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80013cc:	3701      	adds	r7, #1
 80013ce:	e7e5      	b.n	800139c <HAL_FLASHEx_Erase+0x5c>
  __HAL_LOCK(&pFlash);
 80013d0:	2402      	movs	r4, #2
 80013d2:	e7dd      	b.n	8001390 <HAL_FLASHEx_Erase+0x50>
 80013d4:	2000053c 	.word	0x2000053c
 80013d8:	40023c00 	.word	0x40023c00

080013dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013e0:	f8df 919c 	ldr.w	r9, [pc, #412]	; 8001580 <HAL_GPIO_Init+0x1a4>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013e4:	4a64      	ldr	r2, [pc, #400]	; (8001578 <HAL_GPIO_Init+0x19c>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013e6:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013e8:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 80013ea:	2401      	movs	r4, #1
 80013ec:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013ee:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 80013f2:	43ac      	bics	r4, r5
 80013f4:	f040 80ad 	bne.w	8001552 <HAL_GPIO_Init+0x176>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013f8:	684d      	ldr	r5, [r1, #4]
 80013fa:	f005 0403 	and.w	r4, r5, #3
 80013fe:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8001402:	2603      	movs	r6, #3
 8001404:	1e67      	subs	r7, r4, #1
 8001406:	fa06 f608 	lsl.w	r6, r6, r8
 800140a:	2f01      	cmp	r7, #1
 800140c:	ea6f 0606 	mvn.w	r6, r6
 8001410:	d834      	bhi.n	800147c <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 8001412:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001414:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001418:	68cf      	ldr	r7, [r1, #12]
 800141a:	fa07 f708 	lsl.w	r7, r7, r8
 800141e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8001422:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001424:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001426:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800142a:	f3c5 1700 	ubfx	r7, r5, #4, #1
 800142e:	409f      	lsls	r7, r3
 8001430:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001434:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8001436:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001438:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800143c:	688f      	ldr	r7, [r1, #8]
 800143e:	fa07 f708 	lsl.w	r7, r7, r8
 8001442:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001446:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 8001448:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800144a:	d119      	bne.n	8001480 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 800144c:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8001450:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001454:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001458:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800145c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001460:	f04f 0e0f 	mov.w	lr, #15
 8001464:	fa0e fe0b 	lsl.w	lr, lr, fp
 8001468:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800146c:	690f      	ldr	r7, [r1, #16]
 800146e:	fa07 f70b 	lsl.w	r7, r7, fp
 8001472:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001476:	f8ca 7020 	str.w	r7, [sl, #32]
 800147a:	e001      	b.n	8001480 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800147c:	2c03      	cmp	r4, #3
 800147e:	d1da      	bne.n	8001436 <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 8001480:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001482:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001486:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001488:	4326      	orrs	r6, r4
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800148a:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 800148e:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001490:	d05f      	beq.n	8001552 <HAL_GPIO_Init+0x176>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001492:	f04f 0a00 	mov.w	sl, #0
 8001496:	f8cd a004 	str.w	sl, [sp, #4]
 800149a:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800149e:	4c37      	ldr	r4, [pc, #220]	; (800157c <HAL_GPIO_Init+0x1a0>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014a0:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 80014a4:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 80014a8:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 80014ac:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 80014b0:	9601      	str	r6, [sp, #4]
 80014b2:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80014b4:	f023 0603 	bic.w	r6, r3, #3
 80014b8:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 80014bc:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014c0:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80014c4:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014c8:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80014cc:	270f      	movs	r7, #15
 80014ce:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014d2:	42a0      	cmp	r0, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014d4:	ea28 0707 	bic.w	r7, r8, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014d8:	d042      	beq.n	8001560 <HAL_GPIO_Init+0x184>
 80014da:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80014de:	42a0      	cmp	r0, r4
 80014e0:	d040      	beq.n	8001564 <HAL_GPIO_Init+0x188>
 80014e2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80014e6:	42a0      	cmp	r0, r4
 80014e8:	d03e      	beq.n	8001568 <HAL_GPIO_Init+0x18c>
 80014ea:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80014ee:	42a0      	cmp	r0, r4
 80014f0:	d03c      	beq.n	800156c <HAL_GPIO_Init+0x190>
 80014f2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80014f6:	42a0      	cmp	r0, r4
 80014f8:	d03a      	beq.n	8001570 <HAL_GPIO_Init+0x194>
 80014fa:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80014fe:	42a0      	cmp	r0, r4
 8001500:	d038      	beq.n	8001574 <HAL_GPIO_Init+0x198>
 8001502:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001506:	42a0      	cmp	r0, r4
 8001508:	bf0c      	ite	eq
 800150a:	2406      	moveq	r4, #6
 800150c:	2407      	movne	r4, #7
 800150e:	fa04 f40e 	lsl.w	r4, r4, lr
 8001512:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001514:	60b4      	str	r4, [r6, #8]
        temp = EXTI->IMR;
 8001516:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001518:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800151c:	03ef      	lsls	r7, r5, #15
        temp &= ~((uint32_t)iocurrent);
 800151e:	bf54      	ite	pl
 8001520:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8001522:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 8001526:	6014      	str	r4, [r2, #0]

        temp = EXTI->EMR;
 8001528:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800152a:	03af      	lsls	r7, r5, #14
        temp &= ~((uint32_t)iocurrent);
 800152c:	bf54      	ite	pl
 800152e:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8001530:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR = temp;
 8001534:	6054      	str	r4, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001536:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001538:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 800153a:	bf54      	ite	pl
 800153c:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 800153e:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;
 8001542:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 8001544:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001546:	02ad      	lsls	r5, r5, #10
        temp &= ~((uint32_t)iocurrent);
 8001548:	bf54      	ite	pl
 800154a:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 800154c:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;
 8001550:	60d4      	str	r4, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001552:	3301      	adds	r3, #1
 8001554:	2b10      	cmp	r3, #16
 8001556:	f47f af47 	bne.w	80013e8 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 800155a:	b003      	add	sp, #12
 800155c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001560:	4654      	mov	r4, sl
 8001562:	e7d4      	b.n	800150e <HAL_GPIO_Init+0x132>
 8001564:	2401      	movs	r4, #1
 8001566:	e7d2      	b.n	800150e <HAL_GPIO_Init+0x132>
 8001568:	2402      	movs	r4, #2
 800156a:	e7d0      	b.n	800150e <HAL_GPIO_Init+0x132>
 800156c:	2403      	movs	r4, #3
 800156e:	e7ce      	b.n	800150e <HAL_GPIO_Init+0x132>
 8001570:	2404      	movs	r4, #4
 8001572:	e7cc      	b.n	800150e <HAL_GPIO_Init+0x132>
 8001574:	2405      	movs	r4, #5
 8001576:	e7ca      	b.n	800150e <HAL_GPIO_Init+0x132>
 8001578:	40013c00 	.word	0x40013c00
 800157c:	40020000 	.word	0x40020000
 8001580:	40023800 	.word	0x40023800

08001584 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001584:	6903      	ldr	r3, [r0, #16]
 8001586:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001588:	bf14      	ite	ne
 800158a:	2001      	movne	r0, #1
 800158c:	2000      	moveq	r0, #0
 800158e:	4770      	bx	lr

08001590 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001590:	b10a      	cbz	r2, 8001596 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001592:	6181      	str	r1, [r0, #24]
  }
}
 8001594:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001596:	0409      	lsls	r1, r1, #16
 8001598:	e7fb      	b.n	8001592 <HAL_GPIO_WritePin+0x2>
	...

0800159c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800159c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015a0:	460d      	mov	r5, r1
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015a2:	4604      	mov	r4, r0
 80015a4:	b910      	cbnz	r0, 80015ac <HAL_RCC_ClockConfig+0x10>
  {
    return HAL_ERROR;
 80015a6:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);

  return HAL_OK;
}
 80015a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015ac:	4b44      	ldr	r3, [pc, #272]	; (80016c0 <HAL_RCC_ClockConfig+0x124>)
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	f002 020f 	and.w	r2, r2, #15
 80015b4:	428a      	cmp	r2, r1
 80015b6:	d328      	bcc.n	800160a <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015b8:	6822      	ldr	r2, [r4, #0]
 80015ba:	0797      	lsls	r7, r2, #30
 80015bc:	d42d      	bmi.n	800161a <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015be:	07d0      	lsls	r0, r2, #31
 80015c0:	d441      	bmi.n	8001646 <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80015c2:	4b3f      	ldr	r3, [pc, #252]	; (80016c0 <HAL_RCC_ClockConfig+0x124>)
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	f002 020f 	and.w	r2, r2, #15
 80015ca:	42aa      	cmp	r2, r5
 80015cc:	d866      	bhi.n	800169c <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015ce:	6822      	ldr	r2, [r4, #0]
 80015d0:	0751      	lsls	r1, r2, #29
 80015d2:	d46c      	bmi.n	80016ae <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015d4:	0713      	lsls	r3, r2, #28
 80015d6:	d507      	bpl.n	80015e8 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015d8:	4a3a      	ldr	r2, [pc, #232]	; (80016c4 <HAL_RCC_ClockConfig+0x128>)
 80015da:	6921      	ldr	r1, [r4, #16]
 80015dc:	6893      	ldr	r3, [r2, #8]
 80015de:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80015e2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80015e6:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80015e8:	f000 f894 	bl	8001714 <HAL_RCC_GetSysClockFreq>
 80015ec:	4b35      	ldr	r3, [pc, #212]	; (80016c4 <HAL_RCC_ClockConfig+0x128>)
 80015ee:	4a36      	ldr	r2, [pc, #216]	; (80016c8 <HAL_RCC_ClockConfig+0x12c>)
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80015f6:	5cd3      	ldrb	r3, [r2, r3]
 80015f8:	40d8      	lsrs	r0, r3
 80015fa:	4b34      	ldr	r3, [pc, #208]	; (80016cc <HAL_RCC_ClockConfig+0x130>)
 80015fc:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 80015fe:	4b34      	ldr	r3, [pc, #208]	; (80016d0 <HAL_RCC_ClockConfig+0x134>)
 8001600:	6818      	ldr	r0, [r3, #0]
 8001602:	f7ff fbf9 	bl	8000df8 <HAL_InitTick>
  return HAL_OK;
 8001606:	2000      	movs	r0, #0
 8001608:	e7ce      	b.n	80015a8 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800160a:	b2ca      	uxtb	r2, r1
 800160c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 030f 	and.w	r3, r3, #15
 8001614:	428b      	cmp	r3, r1
 8001616:	d1c6      	bne.n	80015a6 <HAL_RCC_ClockConfig+0xa>
 8001618:	e7ce      	b.n	80015b8 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800161a:	4b2a      	ldr	r3, [pc, #168]	; (80016c4 <HAL_RCC_ClockConfig+0x128>)
 800161c:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001620:	bf1e      	ittt	ne
 8001622:	6899      	ldrne	r1, [r3, #8]
 8001624:	f441 51e0 	orrne.w	r1, r1, #7168	; 0x1c00
 8001628:	6099      	strne	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800162a:	0716      	lsls	r6, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800162c:	bf42      	ittt	mi
 800162e:	6899      	ldrmi	r1, [r3, #8]
 8001630:	f441 4160 	orrmi.w	r1, r1, #57344	; 0xe000
 8001634:	6099      	strmi	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001636:	4923      	ldr	r1, [pc, #140]	; (80016c4 <HAL_RCC_ClockConfig+0x128>)
 8001638:	68a0      	ldr	r0, [r4, #8]
 800163a:	688b      	ldr	r3, [r1, #8]
 800163c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001640:	4303      	orrs	r3, r0
 8001642:	608b      	str	r3, [r1, #8]
 8001644:	e7bb      	b.n	80015be <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001646:	6862      	ldr	r2, [r4, #4]
 8001648:	4b1e      	ldr	r3, [pc, #120]	; (80016c4 <HAL_RCC_ClockConfig+0x128>)
 800164a:	2a01      	cmp	r2, #1
 800164c:	d11c      	bne.n	8001688 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001654:	d0a7      	beq.n	80015a6 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001656:	4e1b      	ldr	r6, [pc, #108]	; (80016c4 <HAL_RCC_ClockConfig+0x128>)
 8001658:	68b3      	ldr	r3, [r6, #8]
 800165a:	f023 0303 	bic.w	r3, r3, #3
 800165e:	4313      	orrs	r3, r2
 8001660:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001662:	f7ff fc13 	bl	8000e8c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001666:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800166a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800166c:	68b3      	ldr	r3, [r6, #8]
 800166e:	6862      	ldr	r2, [r4, #4]
 8001670:	f003 030c 	and.w	r3, r3, #12
 8001674:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001678:	d0a3      	beq.n	80015c2 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800167a:	f7ff fc07 	bl	8000e8c <HAL_GetTick>
 800167e:	1bc0      	subs	r0, r0, r7
 8001680:	4540      	cmp	r0, r8
 8001682:	d9f3      	bls.n	800166c <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8001684:	2003      	movs	r0, #3
 8001686:	e78f      	b.n	80015a8 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001688:	1e91      	subs	r1, r2, #2
 800168a:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800168c:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800168e:	d802      	bhi.n	8001696 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001690:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001694:	e7de      	b.n	8001654 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001696:	f013 0f02 	tst.w	r3, #2
 800169a:	e7db      	b.n	8001654 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800169c:	b2ea      	uxtb	r2, r5
 800169e:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 030f 	and.w	r3, r3, #15
 80016a6:	42ab      	cmp	r3, r5
 80016a8:	f47f af7d 	bne.w	80015a6 <HAL_RCC_ClockConfig+0xa>
 80016ac:	e78f      	b.n	80015ce <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016ae:	4905      	ldr	r1, [pc, #20]	; (80016c4 <HAL_RCC_ClockConfig+0x128>)
 80016b0:	68e0      	ldr	r0, [r4, #12]
 80016b2:	688b      	ldr	r3, [r1, #8]
 80016b4:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80016b8:	4303      	orrs	r3, r0
 80016ba:	608b      	str	r3, [r1, #8]
 80016bc:	e78a      	b.n	80015d4 <HAL_RCC_ClockConfig+0x38>
 80016be:	bf00      	nop
 80016c0:	40023c00 	.word	0x40023c00
 80016c4:	40023800 	.word	0x40023800
 80016c8:	080033c6 	.word	0x080033c6
 80016cc:	20000004 	.word	0x20000004
 80016d0:	2000000c 	.word	0x2000000c

080016d4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80016d4:	4b04      	ldr	r3, [pc, #16]	; (80016e8 <HAL_RCC_GetPCLK1Freq+0x14>)
 80016d6:	4a05      	ldr	r2, [pc, #20]	; (80016ec <HAL_RCC_GetPCLK1Freq+0x18>)
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80016de:	5cd3      	ldrb	r3, [r2, r3]
 80016e0:	4a03      	ldr	r2, [pc, #12]	; (80016f0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80016e2:	6810      	ldr	r0, [r2, #0]
}
 80016e4:	40d8      	lsrs	r0, r3
 80016e6:	4770      	bx	lr
 80016e8:	40023800 	.word	0x40023800
 80016ec:	080033d6 	.word	0x080033d6
 80016f0:	20000004 	.word	0x20000004

080016f4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80016f4:	4b04      	ldr	r3, [pc, #16]	; (8001708 <HAL_RCC_GetPCLK2Freq+0x14>)
 80016f6:	4a05      	ldr	r2, [pc, #20]	; (800170c <HAL_RCC_GetPCLK2Freq+0x18>)
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80016fe:	5cd3      	ldrb	r3, [r2, r3]
 8001700:	4a03      	ldr	r2, [pc, #12]	; (8001710 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001702:	6810      	ldr	r0, [r2, #0]
}
 8001704:	40d8      	lsrs	r0, r3
 8001706:	4770      	bx	lr
 8001708:	40023800 	.word	0x40023800
 800170c:	080033d6 	.word	0x080033d6
 8001710:	20000004 	.word	0x20000004

08001714 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001714:	4920      	ldr	r1, [pc, #128]	; (8001798 <HAL_RCC_GetSysClockFreq+0x84>)
{
 8001716:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001718:	688b      	ldr	r3, [r1, #8]
 800171a:	f003 030c 	and.w	r3, r3, #12
 800171e:	2b08      	cmp	r3, #8
 8001720:	d007      	beq.n	8001732 <HAL_RCC_GetSysClockFreq+0x1e>
 8001722:	2b0c      	cmp	r3, #12
 8001724:	d020      	beq.n	8001768 <HAL_RCC_GetSysClockFreq+0x54>
 8001726:	481d      	ldr	r0, [pc, #116]	; (800179c <HAL_RCC_GetSysClockFreq+0x88>)
 8001728:	4a1d      	ldr	r2, [pc, #116]	; (80017a0 <HAL_RCC_GetSysClockFreq+0x8c>)
 800172a:	2b04      	cmp	r3, #4
 800172c:	bf08      	it	eq
 800172e:	4610      	moveq	r0, r2
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001730:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001732:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001734:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001736:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001738:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800173c:	bf14      	ite	ne
 800173e:	4818      	ldrne	r0, [pc, #96]	; (80017a0 <HAL_RCC_GetSysClockFreq+0x8c>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001740:	4816      	ldreq	r0, [pc, #88]	; (800179c <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001742:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001746:	bf18      	it	ne
 8001748:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800174a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800174e:	fba1 0100 	umull	r0, r1, r1, r0
 8001752:	f7fe fdad 	bl	80002b0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001756:	4b10      	ldr	r3, [pc, #64]	; (8001798 <HAL_RCC_GetSysClockFreq+0x84>)
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800175e:	3301      	adds	r3, #1
 8001760:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllr;
 8001762:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8001766:	e7e3      	b.n	8001730 <HAL_RCC_GetSysClockFreq+0x1c>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001768:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800176a:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800176c:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800176e:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001772:	bf14      	ite	ne
 8001774:	480a      	ldrne	r0, [pc, #40]	; (80017a0 <HAL_RCC_GetSysClockFreq+0x8c>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001776:	4809      	ldreq	r0, [pc, #36]	; (800179c <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001778:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800177c:	bf18      	it	ne
 800177e:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001780:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001784:	fba1 0100 	umull	r0, r1, r1, r0
 8001788:	f7fe fd92 	bl	80002b0 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800178c:	4b02      	ldr	r3, [pc, #8]	; (8001798 <HAL_RCC_GetSysClockFreq+0x84>)
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f3c3 7302 	ubfx	r3, r3, #28, #3
 8001794:	e7e5      	b.n	8001762 <HAL_RCC_GetSysClockFreq+0x4e>
 8001796:	bf00      	nop
 8001798:	40023800 	.word	0x40023800
 800179c:	00f42400 	.word	0x00f42400
 80017a0:	007a1200 	.word	0x007a1200

080017a4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017a4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017a8:	4604      	mov	r4, r0
 80017aa:	2800      	cmp	r0, #0
 80017ac:	d030      	beq.n	8001810 <HAL_RCC_OscConfig+0x6c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017ae:	6803      	ldr	r3, [r0, #0]
 80017b0:	07df      	lsls	r7, r3, #31
 80017b2:	d410      	bmi.n	80017d6 <HAL_RCC_OscConfig+0x32>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017b4:	6823      	ldr	r3, [r4, #0]
 80017b6:	079e      	lsls	r6, r3, #30
 80017b8:	d463      	bmi.n	8001882 <HAL_RCC_OscConfig+0xde>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017ba:	6823      	ldr	r3, [r4, #0]
 80017bc:	071a      	lsls	r2, r3, #28
 80017be:	f100 80ad 	bmi.w	800191c <HAL_RCC_OscConfig+0x178>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017c2:	6823      	ldr	r3, [r4, #0]
 80017c4:	075b      	lsls	r3, r3, #29
 80017c6:	f100 80cb 	bmi.w	8001960 <HAL_RCC_OscConfig+0x1bc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017ca:	69a0      	ldr	r0, [r4, #24]
 80017cc:	2800      	cmp	r0, #0
 80017ce:	f040 8135 	bne.w	8001a3c <HAL_RCC_OscConfig+0x298>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80017d2:	2000      	movs	r0, #0
 80017d4:	e034      	b.n	8001840 <HAL_RCC_OscConfig+0x9c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80017d6:	4b95      	ldr	r3, [pc, #596]	; (8001a2c <HAL_RCC_OscConfig+0x288>)
 80017d8:	689a      	ldr	r2, [r3, #8]
 80017da:	f002 020c 	and.w	r2, r2, #12
 80017de:	2a04      	cmp	r2, #4
 80017e0:	d00f      	beq.n	8001802 <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80017e2:	689a      	ldr	r2, [r3, #8]
 80017e4:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80017e8:	2a08      	cmp	r2, #8
 80017ea:	d102      	bne.n	80017f2 <HAL_RCC_OscConfig+0x4e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80017ec:	685a      	ldr	r2, [r3, #4]
 80017ee:	0255      	lsls	r5, r2, #9
 80017f0:	d407      	bmi.n	8001802 <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017f2:	689a      	ldr	r2, [r3, #8]
 80017f4:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80017f8:	2a0c      	cmp	r2, #12
 80017fa:	d10b      	bne.n	8001814 <HAL_RCC_OscConfig+0x70>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	0258      	lsls	r0, r3, #9
 8001800:	d508      	bpl.n	8001814 <HAL_RCC_OscConfig+0x70>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001802:	4b8a      	ldr	r3, [pc, #552]	; (8001a2c <HAL_RCC_OscConfig+0x288>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	0399      	lsls	r1, r3, #14
 8001808:	d5d4      	bpl.n	80017b4 <HAL_RCC_OscConfig+0x10>
 800180a:	6863      	ldr	r3, [r4, #4]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d1d1      	bne.n	80017b4 <HAL_RCC_OscConfig+0x10>
          return HAL_ERROR;
 8001810:	2001      	movs	r0, #1
 8001812:	e015      	b.n	8001840 <HAL_RCC_OscConfig+0x9c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001814:	6863      	ldr	r3, [r4, #4]
 8001816:	4d85      	ldr	r5, [pc, #532]	; (8001a2c <HAL_RCC_OscConfig+0x288>)
 8001818:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800181c:	d113      	bne.n	8001846 <HAL_RCC_OscConfig+0xa2>
 800181e:	682b      	ldr	r3, [r5, #0]
 8001820:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001824:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001826:	f7ff fb31 	bl	8000e8c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800182a:	4e80      	ldr	r6, [pc, #512]	; (8001a2c <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 800182c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800182e:	6833      	ldr	r3, [r6, #0]
 8001830:	039a      	lsls	r2, r3, #14
 8001832:	d4bf      	bmi.n	80017b4 <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001834:	f7ff fb2a 	bl	8000e8c <HAL_GetTick>
 8001838:	1b40      	subs	r0, r0, r5
 800183a:	2864      	cmp	r0, #100	; 0x64
 800183c:	d9f7      	bls.n	800182e <HAL_RCC_OscConfig+0x8a>
            return HAL_TIMEOUT;
 800183e:	2003      	movs	r0, #3
}
 8001840:	b002      	add	sp, #8
 8001842:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001846:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800184a:	d104      	bne.n	8001856 <HAL_RCC_OscConfig+0xb2>
 800184c:	682b      	ldr	r3, [r5, #0]
 800184e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001852:	602b      	str	r3, [r5, #0]
 8001854:	e7e3      	b.n	800181e <HAL_RCC_OscConfig+0x7a>
 8001856:	682a      	ldr	r2, [r5, #0]
 8001858:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800185c:	602a      	str	r2, [r5, #0]
 800185e:	682a      	ldr	r2, [r5, #0]
 8001860:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001864:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001866:	2b00      	cmp	r3, #0
 8001868:	d1dd      	bne.n	8001826 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 800186a:	f7ff fb0f 	bl	8000e8c <HAL_GetTick>
 800186e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001870:	682b      	ldr	r3, [r5, #0]
 8001872:	039b      	lsls	r3, r3, #14
 8001874:	d59e      	bpl.n	80017b4 <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001876:	f7ff fb09 	bl	8000e8c <HAL_GetTick>
 800187a:	1b80      	subs	r0, r0, r6
 800187c:	2864      	cmp	r0, #100	; 0x64
 800187e:	d9f7      	bls.n	8001870 <HAL_RCC_OscConfig+0xcc>
 8001880:	e7dd      	b.n	800183e <HAL_RCC_OscConfig+0x9a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001882:	4b6a      	ldr	r3, [pc, #424]	; (8001a2c <HAL_RCC_OscConfig+0x288>)
 8001884:	689a      	ldr	r2, [r3, #8]
 8001886:	f012 0f0c 	tst.w	r2, #12
 800188a:	d00f      	beq.n	80018ac <HAL_RCC_OscConfig+0x108>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800188c:	689a      	ldr	r2, [r3, #8]
 800188e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001892:	2a08      	cmp	r2, #8
 8001894:	d102      	bne.n	800189c <HAL_RCC_OscConfig+0xf8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001896:	685a      	ldr	r2, [r3, #4]
 8001898:	0257      	lsls	r7, r2, #9
 800189a:	d507      	bpl.n	80018ac <HAL_RCC_OscConfig+0x108>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800189c:	689a      	ldr	r2, [r3, #8]
 800189e:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80018a2:	2a0c      	cmp	r2, #12
 80018a4:	d111      	bne.n	80018ca <HAL_RCC_OscConfig+0x126>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	025e      	lsls	r6, r3, #9
 80018aa:	d40e      	bmi.n	80018ca <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ac:	4b5f      	ldr	r3, [pc, #380]	; (8001a2c <HAL_RCC_OscConfig+0x288>)
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	0795      	lsls	r5, r2, #30
 80018b2:	d502      	bpl.n	80018ba <HAL_RCC_OscConfig+0x116>
 80018b4:	68e2      	ldr	r2, [r4, #12]
 80018b6:	2a01      	cmp	r2, #1
 80018b8:	d1aa      	bne.n	8001810 <HAL_RCC_OscConfig+0x6c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	6921      	ldr	r1, [r4, #16]
 80018be:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80018c2:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80018c6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018c8:	e777      	b.n	80017ba <HAL_RCC_OscConfig+0x16>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80018ca:	68e2      	ldr	r2, [r4, #12]
 80018cc:	4b58      	ldr	r3, [pc, #352]	; (8001a30 <HAL_RCC_OscConfig+0x28c>)
 80018ce:	b1b2      	cbz	r2, 80018fe <HAL_RCC_OscConfig+0x15a>
        __HAL_RCC_HSI_ENABLE();
 80018d0:	2201      	movs	r2, #1
 80018d2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80018d4:	f7ff fada 	bl	8000e8c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018d8:	4d54      	ldr	r5, [pc, #336]	; (8001a2c <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 80018da:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018dc:	682b      	ldr	r3, [r5, #0]
 80018de:	0798      	lsls	r0, r3, #30
 80018e0:	d507      	bpl.n	80018f2 <HAL_RCC_OscConfig+0x14e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018e2:	682b      	ldr	r3, [r5, #0]
 80018e4:	6922      	ldr	r2, [r4, #16]
 80018e6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80018ea:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80018ee:	602b      	str	r3, [r5, #0]
 80018f0:	e763      	b.n	80017ba <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018f2:	f7ff facb 	bl	8000e8c <HAL_GetTick>
 80018f6:	1b80      	subs	r0, r0, r6
 80018f8:	2802      	cmp	r0, #2
 80018fa:	d9ef      	bls.n	80018dc <HAL_RCC_OscConfig+0x138>
 80018fc:	e79f      	b.n	800183e <HAL_RCC_OscConfig+0x9a>
        __HAL_RCC_HSI_DISABLE();
 80018fe:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001900:	f7ff fac4 	bl	8000e8c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001904:	4e49      	ldr	r6, [pc, #292]	; (8001a2c <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 8001906:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001908:	6833      	ldr	r3, [r6, #0]
 800190a:	0799      	lsls	r1, r3, #30
 800190c:	f57f af55 	bpl.w	80017ba <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001910:	f7ff fabc 	bl	8000e8c <HAL_GetTick>
 8001914:	1b40      	subs	r0, r0, r5
 8001916:	2802      	cmp	r0, #2
 8001918:	d9f6      	bls.n	8001908 <HAL_RCC_OscConfig+0x164>
 800191a:	e790      	b.n	800183e <HAL_RCC_OscConfig+0x9a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800191c:	6962      	ldr	r2, [r4, #20]
 800191e:	4b45      	ldr	r3, [pc, #276]	; (8001a34 <HAL_RCC_OscConfig+0x290>)
 8001920:	b17a      	cbz	r2, 8001942 <HAL_RCC_OscConfig+0x19e>
      __HAL_RCC_LSI_ENABLE();
 8001922:	2201      	movs	r2, #1
 8001924:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001926:	f7ff fab1 	bl	8000e8c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800192a:	4e40      	ldr	r6, [pc, #256]	; (8001a2c <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 800192c:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800192e:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8001930:	079f      	lsls	r7, r3, #30
 8001932:	f53f af46 	bmi.w	80017c2 <HAL_RCC_OscConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001936:	f7ff faa9 	bl	8000e8c <HAL_GetTick>
 800193a:	1b40      	subs	r0, r0, r5
 800193c:	2802      	cmp	r0, #2
 800193e:	d9f6      	bls.n	800192e <HAL_RCC_OscConfig+0x18a>
 8001940:	e77d      	b.n	800183e <HAL_RCC_OscConfig+0x9a>
      __HAL_RCC_LSI_DISABLE();
 8001942:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001944:	f7ff faa2 	bl	8000e8c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001948:	4e38      	ldr	r6, [pc, #224]	; (8001a2c <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 800194a:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800194c:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800194e:	0798      	lsls	r0, r3, #30
 8001950:	f57f af37 	bpl.w	80017c2 <HAL_RCC_OscConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001954:	f7ff fa9a 	bl	8000e8c <HAL_GetTick>
 8001958:	1b40      	subs	r0, r0, r5
 800195a:	2802      	cmp	r0, #2
 800195c:	d9f6      	bls.n	800194c <HAL_RCC_OscConfig+0x1a8>
 800195e:	e76e      	b.n	800183e <HAL_RCC_OscConfig+0x9a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001960:	4b32      	ldr	r3, [pc, #200]	; (8001a2c <HAL_RCC_OscConfig+0x288>)
 8001962:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001964:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8001968:	d128      	bne.n	80019bc <HAL_RCC_OscConfig+0x218>
      __HAL_RCC_PWR_CLK_ENABLE();
 800196a:	9201      	str	r2, [sp, #4]
 800196c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800196e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001972:	641a      	str	r2, [r3, #64]	; 0x40
 8001974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800197a:	9301      	str	r3, [sp, #4]
 800197c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800197e:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001980:	4d2d      	ldr	r5, [pc, #180]	; (8001a38 <HAL_RCC_OscConfig+0x294>)
 8001982:	682b      	ldr	r3, [r5, #0]
 8001984:	05d9      	lsls	r1, r3, #23
 8001986:	d51b      	bpl.n	80019c0 <HAL_RCC_OscConfig+0x21c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001988:	68a3      	ldr	r3, [r4, #8]
 800198a:	4d28      	ldr	r5, [pc, #160]	; (8001a2c <HAL_RCC_OscConfig+0x288>)
 800198c:	2b01      	cmp	r3, #1
 800198e:	d127      	bne.n	80019e0 <HAL_RCC_OscConfig+0x23c>
 8001990:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001992:	f043 0301 	orr.w	r3, r3, #1
 8001996:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001998:	f7ff fa78 	bl	8000e8c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800199c:	4e23      	ldr	r6, [pc, #140]	; (8001a2c <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 800199e:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019a0:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019a4:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80019a6:	079b      	lsls	r3, r3, #30
 80019a8:	d539      	bpl.n	8001a1e <HAL_RCC_OscConfig+0x27a>
    if(pwrclkchanged == SET)
 80019aa:	2f00      	cmp	r7, #0
 80019ac:	f43f af0d 	beq.w	80017ca <HAL_RCC_OscConfig+0x26>
      __HAL_RCC_PWR_CLK_DISABLE();
 80019b0:	4a1e      	ldr	r2, [pc, #120]	; (8001a2c <HAL_RCC_OscConfig+0x288>)
 80019b2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80019b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019b8:	6413      	str	r3, [r2, #64]	; 0x40
 80019ba:	e706      	b.n	80017ca <HAL_RCC_OscConfig+0x26>
    FlagStatus       pwrclkchanged = RESET;
 80019bc:	2700      	movs	r7, #0
 80019be:	e7df      	b.n	8001980 <HAL_RCC_OscConfig+0x1dc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019c0:	682b      	ldr	r3, [r5, #0]
 80019c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019c6:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80019c8:	f7ff fa60 	bl	8000e8c <HAL_GetTick>
 80019cc:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ce:	682b      	ldr	r3, [r5, #0]
 80019d0:	05da      	lsls	r2, r3, #23
 80019d2:	d4d9      	bmi.n	8001988 <HAL_RCC_OscConfig+0x1e4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019d4:	f7ff fa5a 	bl	8000e8c <HAL_GetTick>
 80019d8:	1b80      	subs	r0, r0, r6
 80019da:	2802      	cmp	r0, #2
 80019dc:	d9f7      	bls.n	80019ce <HAL_RCC_OscConfig+0x22a>
 80019de:	e72e      	b.n	800183e <HAL_RCC_OscConfig+0x9a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019e0:	2b05      	cmp	r3, #5
 80019e2:	d104      	bne.n	80019ee <HAL_RCC_OscConfig+0x24a>
 80019e4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80019e6:	f043 0304 	orr.w	r3, r3, #4
 80019ea:	672b      	str	r3, [r5, #112]	; 0x70
 80019ec:	e7d0      	b.n	8001990 <HAL_RCC_OscConfig+0x1ec>
 80019ee:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80019f0:	f022 0201 	bic.w	r2, r2, #1
 80019f4:	672a      	str	r2, [r5, #112]	; 0x70
 80019f6:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80019f8:	f022 0204 	bic.w	r2, r2, #4
 80019fc:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d1ca      	bne.n	8001998 <HAL_RCC_OscConfig+0x1f4>
      tickstart = HAL_GetTick();
 8001a02:	f7ff fa43 	bl	8000e8c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a06:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001a0a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a0c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001a0e:	0798      	lsls	r0, r3, #30
 8001a10:	d5cb      	bpl.n	80019aa <HAL_RCC_OscConfig+0x206>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a12:	f7ff fa3b 	bl	8000e8c <HAL_GetTick>
 8001a16:	1b80      	subs	r0, r0, r6
 8001a18:	4540      	cmp	r0, r8
 8001a1a:	d9f7      	bls.n	8001a0c <HAL_RCC_OscConfig+0x268>
 8001a1c:	e70f      	b.n	800183e <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a1e:	f7ff fa35 	bl	8000e8c <HAL_GetTick>
 8001a22:	1b40      	subs	r0, r0, r5
 8001a24:	4540      	cmp	r0, r8
 8001a26:	d9bd      	bls.n	80019a4 <HAL_RCC_OscConfig+0x200>
 8001a28:	e709      	b.n	800183e <HAL_RCC_OscConfig+0x9a>
 8001a2a:	bf00      	nop
 8001a2c:	40023800 	.word	0x40023800
 8001a30:	42470000 	.word	0x42470000
 8001a34:	42470e80 	.word	0x42470e80
 8001a38:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a3c:	4d3a      	ldr	r5, [pc, #232]	; (8001b28 <HAL_RCC_OscConfig+0x384>)
 8001a3e:	68ab      	ldr	r3, [r5, #8]
 8001a40:	f003 030c 	and.w	r3, r3, #12
 8001a44:	2b08      	cmp	r3, #8
 8001a46:	d03f      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x324>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a48:	4e38      	ldr	r6, [pc, #224]	; (8001b2c <HAL_RCC_OscConfig+0x388>)
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001a4e:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a50:	d12d      	bne.n	8001aae <HAL_RCC_OscConfig+0x30a>
        tickstart = HAL_GetTick();
 8001a52:	f7ff fa1b 	bl	8000e8c <HAL_GetTick>
 8001a56:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a58:	682b      	ldr	r3, [r5, #0]
 8001a5a:	0199      	lsls	r1, r3, #6
 8001a5c:	d421      	bmi.n	8001aa2 <HAL_RCC_OscConfig+0x2fe>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a5e:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001a66:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001a6a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001a6c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001a70:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001a72:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001a76:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001a78:	0852      	lsrs	r2, r2, #1
 8001a7a:	3a01      	subs	r2, #1
 8001a7c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001a80:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001a82:	2301      	movs	r3, #1
 8001a84:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001a86:	f7ff fa01 	bl	8000e8c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a8a:	4d27      	ldr	r5, [pc, #156]	; (8001b28 <HAL_RCC_OscConfig+0x384>)
        tickstart = HAL_GetTick();
 8001a8c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a8e:	682b      	ldr	r3, [r5, #0]
 8001a90:	019a      	lsls	r2, r3, #6
 8001a92:	f53f ae9e 	bmi.w	80017d2 <HAL_RCC_OscConfig+0x2e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a96:	f7ff f9f9 	bl	8000e8c <HAL_GetTick>
 8001a9a:	1b00      	subs	r0, r0, r4
 8001a9c:	2802      	cmp	r0, #2
 8001a9e:	d9f6      	bls.n	8001a8e <HAL_RCC_OscConfig+0x2ea>
 8001aa0:	e6cd      	b.n	800183e <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aa2:	f7ff f9f3 	bl	8000e8c <HAL_GetTick>
 8001aa6:	1bc0      	subs	r0, r0, r7
 8001aa8:	2802      	cmp	r0, #2
 8001aaa:	d9d5      	bls.n	8001a58 <HAL_RCC_OscConfig+0x2b4>
 8001aac:	e6c7      	b.n	800183e <HAL_RCC_OscConfig+0x9a>
        tickstart = HAL_GetTick();
 8001aae:	f7ff f9ed 	bl	8000e8c <HAL_GetTick>
 8001ab2:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ab4:	682b      	ldr	r3, [r5, #0]
 8001ab6:	019b      	lsls	r3, r3, #6
 8001ab8:	f57f ae8b 	bpl.w	80017d2 <HAL_RCC_OscConfig+0x2e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001abc:	f7ff f9e6 	bl	8000e8c <HAL_GetTick>
 8001ac0:	1b00      	subs	r0, r0, r4
 8001ac2:	2802      	cmp	r0, #2
 8001ac4:	d9f6      	bls.n	8001ab4 <HAL_RCC_OscConfig+0x310>
 8001ac6:	e6ba      	b.n	800183e <HAL_RCC_OscConfig+0x9a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ac8:	2801      	cmp	r0, #1
 8001aca:	f43f aeb9 	beq.w	8001840 <HAL_RCC_OscConfig+0x9c>
        pll_config = RCC->PLLCFGR;
 8001ace:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ad0:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ad2:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ad6:	4291      	cmp	r1, r2
 8001ad8:	f47f ae9a 	bne.w	8001810 <HAL_RCC_OscConfig+0x6c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001adc:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ade:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ae2:	428a      	cmp	r2, r1
 8001ae4:	f47f ae94 	bne.w	8001810 <HAL_RCC_OscConfig+0x6c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ae8:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001aea:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8001aee:	401a      	ands	r2, r3
 8001af0:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8001af4:	f47f ae8c 	bne.w	8001810 <HAL_RCC_OscConfig+0x6c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001af8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001afa:	0852      	lsrs	r2, r2, #1
 8001afc:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8001b00:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b02:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8001b06:	f47f ae83 	bne.w	8001810 <HAL_RCC_OscConfig+0x6c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b0a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001b0c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b10:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 8001b14:	f47f ae7c 	bne.w	8001810 <HAL_RCC_OscConfig+0x6c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001b18:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001b1a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b1e:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 8001b22:	f43f ae56 	beq.w	80017d2 <HAL_RCC_OscConfig+0x2e>
 8001b26:	e673      	b.n	8001810 <HAL_RCC_OscConfig+0x6c>
 8001b28:	40023800 	.word	0x40023800
 8001b2c:	42470060 	.word	0x42470060

08001b30 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001b30:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b32:	f102 030c 	add.w	r3, r2, #12
 8001b36:	e853 3f00 	ldrex	r3, [r3]
 8001b3a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b3e:	320c      	adds	r2, #12
 8001b40:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8001b44:	6802      	ldr	r2, [r0, #0]
 8001b46:	2900      	cmp	r1, #0
 8001b48:	d1f2      	bne.n	8001b30 <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b4a:	f102 0314 	add.w	r3, r2, #20
 8001b4e:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b52:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b56:	f102 0c14 	add.w	ip, r2, #20
 8001b5a:	e84c 3100 	strex	r1, r3, [ip]
 8001b5e:	2900      	cmp	r1, #0
 8001b60:	d1f3      	bne.n	8001b4a <UART_EndRxTransfer+0x1a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001b62:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d10b      	bne.n	8001b80 <UART_EndRxTransfer+0x50>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b68:	f102 030c 	add.w	r3, r2, #12
 8001b6c:	e853 3f00 	ldrex	r3, [r3]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001b70:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b74:	f102 0c0c 	add.w	ip, r2, #12
 8001b78:	e84c 3100 	strex	r1, r3, [ip]
 8001b7c:	2900      	cmp	r1, #0
 8001b7e:	d1f3      	bne.n	8001b68 <UART_EndRxTransfer+0x38>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001b80:	2320      	movs	r3, #32
 8001b82:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001b86:	2300      	movs	r3, #0
 8001b88:	6303      	str	r3, [r0, #48]	; 0x30
}
 8001b8a:	4770      	bx	lr

08001b8c <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b8c:	6802      	ldr	r2, [r0, #0]
 8001b8e:	68c1      	ldr	r1, [r0, #12]
{
 8001b90:	b538      	push	{r3, r4, r5, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b92:	6913      	ldr	r3, [r2, #16]
 8001b94:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b98:	430b      	orrs	r3, r1
 8001b9a:	6113      	str	r3, [r2, #16]
{
 8001b9c:	4605      	mov	r5, r0
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001b9e:	6883      	ldr	r3, [r0, #8]
 8001ba0:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8001ba2:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001ba4:	4303      	orrs	r3, r0
 8001ba6:	6968      	ldr	r0, [r5, #20]
 8001ba8:	4303      	orrs	r3, r0
 8001baa:	69e8      	ldr	r0, [r5, #28]
  MODIFY_REG(huart->Instance->CR1,
 8001bac:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 8001bb0:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001bb4:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8001bb6:	430b      	orrs	r3, r1
 8001bb8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001bba:	6953      	ldr	r3, [r2, #20]
 8001bbc:	69a9      	ldr	r1, [r5, #24]
 8001bbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bc2:	430b      	orrs	r3, r1
 8001bc4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001bc6:	4b1f      	ldr	r3, [pc, #124]	; (8001c44 <UART_SetConfig+0xb8>)
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d003      	beq.n	8001bd4 <UART_SetConfig+0x48>
 8001bcc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d124      	bne.n	8001c1e <UART_SetConfig+0x92>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001bd4:	f7ff fd8e 	bl	80016f4 <HAL_RCC_GetPCLK2Freq>
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001bd8:	69ea      	ldr	r2, [r5, #28]
 8001bda:	2319      	movs	r3, #25
 8001bdc:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001be0:	fba0 0103 	umull	r0, r1, r0, r3
 8001be4:	e9d5 4300 	ldrd	r4, r3, [r5]
 8001be8:	d11c      	bne.n	8001c24 <UART_SetConfig+0x98>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001bea:	461a      	mov	r2, r3
 8001bec:	1892      	adds	r2, r2, r2
 8001bee:	f04f 0300 	mov.w	r3, #0
 8001bf2:	415b      	adcs	r3, r3
 8001bf4:	f7fe fb5c 	bl	80002b0 <__aeabi_uldivmod>
 8001bf8:	2164      	movs	r1, #100	; 0x64
 8001bfa:	fbb0 f5f1 	udiv	r5, r0, r1
 8001bfe:	fb01 0315 	mls	r3, r1, r5, r0
 8001c02:	00db      	lsls	r3, r3, #3
 8001c04:	3332      	adds	r3, #50	; 0x32
 8001c06:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c0a:	f003 0207 	and.w	r2, r3, #7
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 8001c14:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001c18:	4413      	add	r3, r2
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001c1a:	60a3      	str	r3, [r4, #8]
  }
}
 8001c1c:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 8001c1e:	f7ff fd59 	bl	80016d4 <HAL_RCC_GetPCLK1Freq>
 8001c22:	e7d9      	b.n	8001bd8 <UART_SetConfig+0x4c>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001c24:	009a      	lsls	r2, r3, #2
 8001c26:	0f9b      	lsrs	r3, r3, #30
 8001c28:	f7fe fb42 	bl	80002b0 <__aeabi_uldivmod>
 8001c2c:	2264      	movs	r2, #100	; 0x64
 8001c2e:	fbb0 f1f2 	udiv	r1, r0, r2
 8001c32:	fb02 0311 	mls	r3, r2, r1, r0
 8001c36:	011b      	lsls	r3, r3, #4
 8001c38:	3332      	adds	r3, #50	; 0x32
 8001c3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8001c3e:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8001c42:	e7ea      	b.n	8001c1a <UART_SetConfig+0x8e>
 8001c44:	40011000 	.word	0x40011000

08001c48 <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 8001c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c4a:	4604      	mov	r4, r0
 8001c4c:	460e      	mov	r6, r1
 8001c4e:	4617      	mov	r7, r2
 8001c50:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c52:	6822      	ldr	r2, [r4, #0]
 8001c54:	6813      	ldr	r3, [r2, #0]
 8001c56:	ea36 0303 	bics.w	r3, r6, r3
 8001c5a:	d101      	bne.n	8001c60 <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 8001c5c:	2000      	movs	r0, #0
 8001c5e:	e028      	b.n	8001cb2 <UART_WaitOnFlagUntilTimeout.constprop.0+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 8001c60:	1c6b      	adds	r3, r5, #1
 8001c62:	d0f7      	beq.n	8001c54 <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001c64:	b125      	cbz	r5, 8001c70 <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
 8001c66:	f7ff f911 	bl	8000e8c <HAL_GetTick>
 8001c6a:	1bc0      	subs	r0, r0, r7
 8001c6c:	4285      	cmp	r5, r0
 8001c6e:	d2f0      	bcs.n	8001c52 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001c70:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c72:	f102 030c 	add.w	r3, r2, #12
 8001c76:	e853 3f00 	ldrex	r3, [r3]
 8001c7a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c7e:	320c      	adds	r2, #12
 8001c80:	e842 3000 	strex	r0, r3, [r2]
   return(result);
 8001c84:	6821      	ldr	r1, [r4, #0]
 8001c86:	2800      	cmp	r0, #0
 8001c88:	d1f2      	bne.n	8001c70 <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c8a:	f101 0314 	add.w	r3, r1, #20
 8001c8e:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c92:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c96:	f101 0014 	add.w	r0, r1, #20
 8001c9a:	e840 3200 	strex	r2, r3, [r0]
 8001c9e:	2a00      	cmp	r2, #0
 8001ca0:	d1f3      	bne.n	8001c8a <UART_WaitOnFlagUntilTimeout.constprop.0+0x42>
        huart->gState  = HAL_UART_STATE_READY;
 8001ca2:	2320      	movs	r3, #32
 8001ca4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        __HAL_UNLOCK(huart);
 8001ca8:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        huart->RxState = HAL_UART_STATE_READY;
 8001cac:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 8001cb0:	2003      	movs	r0, #3
}
 8001cb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001cb4 <HAL_UART_Init>:
{
 8001cb4:	b510      	push	{r4, lr}
  if (huart == NULL)
 8001cb6:	4604      	mov	r4, r0
 8001cb8:	b340      	cbz	r0, 8001d0c <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8001cba:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001cbe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001cc2:	b91b      	cbnz	r3, 8001ccc <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001cc4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8001cc8:	f7fe ff94 	bl	8000bf4 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001ccc:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001cce:	2324      	movs	r3, #36	; 0x24
 8001cd0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8001cd4:	68d3      	ldr	r3, [r2, #12]
 8001cd6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001cda:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001cdc:	4620      	mov	r0, r4
 8001cde:	f7ff ff55 	bl	8001b8c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ce2:	6823      	ldr	r3, [r4, #0]
 8001ce4:	691a      	ldr	r2, [r3, #16]
 8001ce6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001cea:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001cec:	695a      	ldr	r2, [r3, #20]
 8001cee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001cf2:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001cf4:	68da      	ldr	r2, [r3, #12]
 8001cf6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001cfa:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cfc:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8001cfe:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d00:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001d02:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001d06:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8001d0a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001d0c:	2001      	movs	r0, #1
 8001d0e:	e7fc      	b.n	8001d0a <HAL_UART_Init+0x56>

08001d10 <HAL_UART_Transmit>:
{
 8001d10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001d12:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8001d14:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
{
 8001d18:	9300      	str	r3, [sp, #0]
  if (huart->gState == HAL_UART_STATE_READY)
 8001d1a:	2a20      	cmp	r2, #32
{
 8001d1c:	4604      	mov	r4, r0
 8001d1e:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 8001d20:	d149      	bne.n	8001db6 <HAL_UART_Transmit+0xa6>
    if ((pData == NULL) || (Size == 0U))
 8001d22:	2900      	cmp	r1, #0
 8001d24:	d045      	beq.n	8001db2 <HAL_UART_Transmit+0xa2>
 8001d26:	2f00      	cmp	r7, #0
 8001d28:	d043      	beq.n	8001db2 <HAL_UART_Transmit+0xa2>
    __HAL_LOCK(huart);
 8001d2a:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8001d2e:	2a01      	cmp	r2, #1
 8001d30:	d041      	beq.n	8001db6 <HAL_UART_Transmit+0xa6>
 8001d32:	2201      	movs	r2, #1
 8001d34:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d38:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d3a:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d3c:	6405      	str	r5, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d3e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 8001d42:	f7ff f8a3 	bl	8000e8c <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d46:	68a1      	ldr	r1, [r4, #8]
 8001d48:	9b00      	ldr	r3, [sp, #0]
    huart->TxXferSize = Size;
 8001d4a:	84a7      	strh	r7, [r4, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d4c:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8001d50:	4602      	mov	r2, r0
    huart->TxXferCount = Size;
 8001d52:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d54:	d103      	bne.n	8001d5e <HAL_UART_Transmit+0x4e>
 8001d56:	6921      	ldr	r1, [r4, #16]
 8001d58:	b909      	cbnz	r1, 8001d5e <HAL_UART_Transmit+0x4e>
 8001d5a:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8001d5c:	460e      	mov	r6, r1
    __HAL_UNLOCK(huart);
 8001d5e:	2100      	movs	r1, #0
 8001d60:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 8001d64:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8001d66:	b289      	uxth	r1, r1
 8001d68:	b941      	cbnz	r1, 8001d7c <HAL_UART_Transmit+0x6c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001d6a:	2140      	movs	r1, #64	; 0x40
 8001d6c:	4620      	mov	r0, r4
 8001d6e:	f7ff ff6b 	bl	8001c48 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8001d72:	b960      	cbnz	r0, 8001d8e <HAL_UART_Transmit+0x7e>
    huart->gState = HAL_UART_STATE_READY;
 8001d74:	2320      	movs	r3, #32
 8001d76:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 8001d7a:	e009      	b.n	8001d90 <HAL_UART_Transmit+0x80>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d7c:	2180      	movs	r1, #128	; 0x80
 8001d7e:	4620      	mov	r0, r4
 8001d80:	e9cd 2300 	strd	r2, r3, [sp]
 8001d84:	f7ff ff60 	bl	8001c48 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8001d88:	e9dd 2300 	ldrd	r2, r3, [sp]
 8001d8c:	b110      	cbz	r0, 8001d94 <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 8001d8e:	2003      	movs	r0, #3
}
 8001d90:	b003      	add	sp, #12
 8001d92:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (pdata8bits == NULL)
 8001d94:	6820      	ldr	r0, [r4, #0]
 8001d96:	b94e      	cbnz	r6, 8001dac <HAL_UART_Transmit+0x9c>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001d98:	f835 1b02 	ldrh.w	r1, [r5], #2
 8001d9c:	f3c1 0108 	ubfx	r1, r1, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001da0:	6041      	str	r1, [r0, #4]
      huart->TxXferCount--;
 8001da2:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8001da4:	3901      	subs	r1, #1
 8001da6:	b289      	uxth	r1, r1
 8001da8:	84e1      	strh	r1, [r4, #38]	; 0x26
 8001daa:	e7db      	b.n	8001d64 <HAL_UART_Transmit+0x54>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001dac:	f816 1b01 	ldrb.w	r1, [r6], #1
 8001db0:	e7f6      	b.n	8001da0 <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 8001db2:	2001      	movs	r0, #1
 8001db4:	e7ec      	b.n	8001d90 <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 8001db6:	2002      	movs	r0, #2
 8001db8:	e7ea      	b.n	8001d90 <HAL_UART_Transmit+0x80>

08001dba <HAL_UART_Receive>:
{
 8001dba:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001dbe:	4699      	mov	r9, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8001dc0:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8001dc4:	2b20      	cmp	r3, #32
{
 8001dc6:	4604      	mov	r4, r0
 8001dc8:	460f      	mov	r7, r1
 8001dca:	4615      	mov	r5, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 8001dcc:	d14d      	bne.n	8001e6a <HAL_UART_Receive+0xb0>
    if ((pData == NULL) || (Size == 0U))
 8001dce:	2900      	cmp	r1, #0
 8001dd0:	d049      	beq.n	8001e66 <HAL_UART_Receive+0xac>
 8001dd2:	2a00      	cmp	r2, #0
 8001dd4:	d047      	beq.n	8001e66 <HAL_UART_Receive+0xac>
    __HAL_LOCK(huart);
 8001dd6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d045      	beq.n	8001e6a <HAL_UART_Receive+0xb0>
 8001dde:	2301      	movs	r3, #1
 8001de0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001de4:	2600      	movs	r6, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001de6:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001de8:	6406      	str	r6, [r0, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001dea:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001dee:	6306      	str	r6, [r0, #48]	; 0x30
    tickstart = HAL_GetTick();
 8001df0:	f7ff f84c 	bl	8000e8c <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001df4:	68a3      	ldr	r3, [r4, #8]
    huart->RxXferSize = Size;
 8001df6:	85a5      	strh	r5, [r4, #44]	; 0x2c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001df8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8001dfc:	4680      	mov	r8, r0
    huart->RxXferCount = Size;
 8001dfe:	85e5      	strh	r5, [r4, #46]	; 0x2e
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e00:	d103      	bne.n	8001e0a <HAL_UART_Receive+0x50>
 8001e02:	6923      	ldr	r3, [r4, #16]
 8001e04:	b90b      	cbnz	r3, 8001e0a <HAL_UART_Receive+0x50>
 8001e06:	463e      	mov	r6, r7
      pdata8bits  = NULL;
 8001e08:	461f      	mov	r7, r3
    __HAL_UNLOCK(huart);
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    while (huart->RxXferCount > 0U)
 8001e10:	8de5      	ldrh	r5, [r4, #46]	; 0x2e
 8001e12:	b2a8      	uxth	r0, r5
 8001e14:	b920      	cbnz	r0, 8001e20 <HAL_UART_Receive+0x66>
    huart->RxState = HAL_UART_STATE_READY;
 8001e16:	2320      	movs	r3, #32
 8001e18:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8001e1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001e20:	464b      	mov	r3, r9
 8001e22:	4642      	mov	r2, r8
 8001e24:	2120      	movs	r1, #32
 8001e26:	4620      	mov	r0, r4
 8001e28:	f7ff ff0e 	bl	8001c48 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8001e2c:	b9f8      	cbnz	r0, 8001e6e <HAL_UART_Receive+0xb4>
      if (pdata8bits == NULL)
 8001e2e:	6823      	ldr	r3, [r4, #0]
 8001e30:	b94f      	cbnz	r7, 8001e46 <HAL_UART_Receive+0x8c>
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e38:	f826 3b02 	strh.w	r3, [r6], #2
      huart->RxXferCount--;
 8001e3c:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	85e3      	strh	r3, [r4, #46]	; 0x2e
 8001e44:	e7e4      	b.n	8001e10 <HAL_UART_Receive+0x56>
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001e46:	68a2      	ldr	r2, [r4, #8]
 8001e48:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001e4c:	d002      	beq.n	8001e54 <HAL_UART_Receive+0x9a>
 8001e4e:	b932      	cbnz	r2, 8001e5e <HAL_UART_Receive+0xa4>
 8001e50:	6922      	ldr	r2, [r4, #16]
 8001e52:	b922      	cbnz	r2, 8001e5e <HAL_UART_Receive+0xa4>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001e54:	6859      	ldr	r1, [r3, #4]
 8001e56:	b2c9      	uxtb	r1, r1
 8001e58:	f807 1b01 	strb.w	r1, [r7], #1
        pdata8bits++;
 8001e5c:	e7ee      	b.n	8001e3c <HAL_UART_Receive+0x82>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001e5e:	6859      	ldr	r1, [r3, #4]
 8001e60:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8001e64:	e7f8      	b.n	8001e58 <HAL_UART_Receive+0x9e>
      return  HAL_ERROR;
 8001e66:	2001      	movs	r0, #1
 8001e68:	e7d8      	b.n	8001e1c <HAL_UART_Receive+0x62>
    return HAL_BUSY;
 8001e6a:	2002      	movs	r0, #2
 8001e6c:	e7d6      	b.n	8001e1c <HAL_UART_Receive+0x62>
        return HAL_TIMEOUT;
 8001e6e:	2003      	movs	r0, #3
 8001e70:	e7d4      	b.n	8001e1c <HAL_UART_Receive+0x62>

08001e72 <HAL_UART_TxCpltCallback>:
 8001e72:	4770      	bx	lr

08001e74 <HAL_UART_RxCpltCallback>:
 8001e74:	4770      	bx	lr

08001e76 <HAL_UART_ErrorCallback>:
 8001e76:	4770      	bx	lr

08001e78 <UART_DMAAbortOnError>:
{
 8001e78:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e7a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001e80:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8001e82:	f7ff fff8 	bl	8001e76 <HAL_UART_ErrorCallback>
}
 8001e86:	bd08      	pop	{r3, pc}

08001e88 <HAL_UARTEx_RxEventCallback>:
}
 8001e88:	4770      	bx	lr

08001e8a <UART_Receive_IT>:
{
 8001e8a:	b513      	push	{r0, r1, r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001e8c:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8001e90:	2b22      	cmp	r3, #34	; 0x22
 8001e92:	d153      	bne.n	8001f3c <UART_Receive_IT+0xb2>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e94:	6881      	ldr	r1, [r0, #8]
 8001e96:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001e98:	6802      	ldr	r2, [r0, #0]
 8001e9a:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8001e9e:	d13d      	bne.n	8001f1c <UART_Receive_IT+0x92>
 8001ea0:	6901      	ldr	r1, [r0, #16]
 8001ea2:	2900      	cmp	r1, #0
 8001ea4:	d13d      	bne.n	8001f22 <UART_Receive_IT+0x98>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001ea6:	6852      	ldr	r2, [r2, #4]
 8001ea8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001eac:	f823 2b02 	strh.w	r2, [r3], #2
    if (--huart->RxXferCount == 0U)
 8001eb0:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
      huart->pRxBuffPtr += 1U;
 8001eb2:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8001eb4:	3c01      	subs	r4, #1
 8001eb6:	b2a4      	uxth	r4, r4
 8001eb8:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8001eba:	2c00      	cmp	r4, #0
 8001ebc:	d12c      	bne.n	8001f18 <UART_Receive_IT+0x8e>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001ebe:	6803      	ldr	r3, [r0, #0]
 8001ec0:	68da      	ldr	r2, [r3, #12]
 8001ec2:	f022 0220 	bic.w	r2, r2, #32
 8001ec6:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001ec8:	68da      	ldr	r2, [r3, #12]
 8001eca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ece:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001ed0:	695a      	ldr	r2, [r3, #20]
 8001ed2:	f022 0201 	bic.w	r2, r2, #1
 8001ed6:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8001ed8:	2320      	movs	r3, #32
 8001eda:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001ede:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	6803      	ldr	r3, [r0, #0]
 8001ee4:	d127      	bne.n	8001f36 <UART_Receive_IT+0xac>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001ee6:	6304      	str	r4, [r0, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ee8:	f103 020c 	add.w	r2, r3, #12
 8001eec:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001ef0:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ef4:	f103 040c 	add.w	r4, r3, #12
 8001ef8:	e844 2100 	strex	r1, r2, [r4]
 8001efc:	2900      	cmp	r1, #0
 8001efe:	d1f3      	bne.n	8001ee8 <UART_Receive_IT+0x5e>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	06d2      	lsls	r2, r2, #27
 8001f04:	d505      	bpl.n	8001f12 <UART_Receive_IT+0x88>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001f06:	9101      	str	r1, [sp, #4]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	9201      	str	r2, [sp, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	9301      	str	r3, [sp, #4]
 8001f10:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8001f12:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8001f14:	f7ff ffb8 	bl	8001e88 <HAL_UARTEx_RxEventCallback>
 8001f18:	2000      	movs	r0, #0
 8001f1a:	e010      	b.n	8001f3e <UART_Receive_IT+0xb4>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001f1c:	b939      	cbnz	r1, 8001f2e <UART_Receive_IT+0xa4>
 8001f1e:	6901      	ldr	r1, [r0, #16]
 8001f20:	b929      	cbnz	r1, 8001f2e <UART_Receive_IT+0xa4>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001f22:	6852      	ldr	r2, [r2, #4]
 8001f24:	b2d2      	uxtb	r2, r2
 8001f26:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr += 1U;
 8001f28:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	e7c0      	b.n	8001eb0 <UART_Receive_IT+0x26>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001f2e:	6852      	ldr	r2, [r2, #4]
 8001f30:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001f34:	e7f7      	b.n	8001f26 <UART_Receive_IT+0x9c>
        HAL_UART_RxCpltCallback(huart);
 8001f36:	f7ff ff9d 	bl	8001e74 <HAL_UART_RxCpltCallback>
 8001f3a:	e7ed      	b.n	8001f18 <UART_Receive_IT+0x8e>
    return HAL_BUSY;
 8001f3c:	2002      	movs	r0, #2
}
 8001f3e:	b002      	add	sp, #8
 8001f40:	bd10      	pop	{r4, pc}
	...

08001f44 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001f44:	6803      	ldr	r3, [r0, #0]
{
 8001f46:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001f48:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001f4a:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001f4c:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8001f4e:	f012 0f0f 	tst.w	r2, #15
{
 8001f52:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8001f54:	d108      	bne.n	8001f68 <HAL_UART_IRQHandler+0x24>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001f56:	0695      	lsls	r5, r2, #26
 8001f58:	d568      	bpl.n	800202c <HAL_UART_IRQHandler+0xe8>
 8001f5a:	068d      	lsls	r5, r1, #26
 8001f5c:	d566      	bpl.n	800202c <HAL_UART_IRQHandler+0xe8>
}
 8001f5e:	b003      	add	sp, #12
 8001f60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      UART_Receive_IT(huart);
 8001f64:	f7ff bf91 	b.w	8001e8a <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001f68:	f005 0001 	and.w	r0, r5, #1
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001f6c:	f401 7590 	and.w	r5, r1, #288	; 0x120
 8001f70:	4305      	orrs	r5, r0
 8001f72:	d05b      	beq.n	800202c <HAL_UART_IRQHandler+0xe8>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001f74:	07d5      	lsls	r5, r2, #31
 8001f76:	d505      	bpl.n	8001f84 <HAL_UART_IRQHandler+0x40>
 8001f78:	05cb      	lsls	r3, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001f7a:	bf42      	ittt	mi
 8001f7c:	6c23      	ldrmi	r3, [r4, #64]	; 0x40
 8001f7e:	f043 0301 	orrmi.w	r3, r3, #1
 8001f82:	6423      	strmi	r3, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001f84:	0755      	lsls	r5, r2, #29
 8001f86:	d504      	bpl.n	8001f92 <HAL_UART_IRQHandler+0x4e>
 8001f88:	b118      	cbz	r0, 8001f92 <HAL_UART_IRQHandler+0x4e>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001f8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001f8c:	f043 0302 	orr.w	r3, r3, #2
 8001f90:	6423      	str	r3, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001f92:	0793      	lsls	r3, r2, #30
 8001f94:	d504      	bpl.n	8001fa0 <HAL_UART_IRQHandler+0x5c>
 8001f96:	b118      	cbz	r0, 8001fa0 <HAL_UART_IRQHandler+0x5c>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001f98:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001f9a:	f043 0304 	orr.w	r3, r3, #4
 8001f9e:	6423      	str	r3, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001fa0:	0715      	lsls	r5, r2, #28
 8001fa2:	d507      	bpl.n	8001fb4 <HAL_UART_IRQHandler+0x70>
 8001fa4:	f001 0320 	and.w	r3, r1, #32
 8001fa8:	4303      	orrs	r3, r0
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001faa:	bf1e      	ittt	ne
 8001fac:	6c23      	ldrne	r3, [r4, #64]	; 0x40
 8001fae:	f043 0308 	orrne.w	r3, r3, #8
 8001fb2:	6423      	strne	r3, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001fb4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d032      	beq.n	8002020 <HAL_UART_IRQHandler+0xdc>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001fba:	0690      	lsls	r0, r2, #26
 8001fbc:	d504      	bpl.n	8001fc8 <HAL_UART_IRQHandler+0x84>
 8001fbe:	068a      	lsls	r2, r1, #26
 8001fc0:	d502      	bpl.n	8001fc8 <HAL_UART_IRQHandler+0x84>
        UART_Receive_IT(huart);
 8001fc2:	4620      	mov	r0, r4
 8001fc4:	f7ff ff61 	bl	8001e8a <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001fc8:	6823      	ldr	r3, [r4, #0]
 8001fca:	695b      	ldr	r3, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001fcc:	6c25      	ldr	r5, [r4, #64]	; 0x40
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001fd2:	f005 0508 	and.w	r5, r5, #8
 8001fd6:	431d      	orrs	r5, r3
        UART_EndRxTransfer(huart);
 8001fd8:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001fda:	d023      	beq.n	8002024 <HAL_UART_IRQHandler+0xe0>
        UART_EndRxTransfer(huart);
 8001fdc:	f7ff fda8 	bl	8001b30 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fe0:	6822      	ldr	r2, [r4, #0]
 8001fe2:	6953      	ldr	r3, [r2, #20]
 8001fe4:	065b      	lsls	r3, r3, #25
 8001fe6:	d518      	bpl.n	800201a <HAL_UART_IRQHandler+0xd6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fe8:	f102 0314 	add.w	r3, r2, #20
 8001fec:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001ff0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ff4:	f102 0014 	add.w	r0, r2, #20
 8001ff8:	e840 3100 	strex	r1, r3, [r0]
 8001ffc:	2900      	cmp	r1, #0
 8001ffe:	d1f3      	bne.n	8001fe8 <HAL_UART_IRQHandler+0xa4>
          if (huart->hdmarx != NULL)
 8002000:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002002:	b150      	cbz	r0, 800201a <HAL_UART_IRQHandler+0xd6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002004:	4b72      	ldr	r3, [pc, #456]	; (80021d0 <HAL_UART_IRQHandler+0x28c>)
 8002006:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002008:	f7ff f818 	bl	800103c <HAL_DMA_Abort_IT>
 800200c:	b140      	cbz	r0, 8002020 <HAL_UART_IRQHandler+0xdc>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800200e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002010:	6d03      	ldr	r3, [r0, #80]	; 0x50
}
 8002012:	b003      	add	sp, #12
 8002014:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002018:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 800201a:	4620      	mov	r0, r4
 800201c:	f7ff ff2b 	bl	8001e76 <HAL_UART_ErrorCallback>
}
 8002020:	b003      	add	sp, #12
 8002022:	bd30      	pop	{r4, r5, pc}
        HAL_UART_ErrorCallback(huart);
 8002024:	f7ff ff27 	bl	8001e76 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002028:	6425      	str	r5, [r4, #64]	; 0x40
 800202a:	e7f9      	b.n	8002020 <HAL_UART_IRQHandler+0xdc>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800202c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800202e:	2801      	cmp	r0, #1
 8002030:	f040 8091 	bne.w	8002156 <HAL_UART_IRQHandler+0x212>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002034:	06d5      	lsls	r5, r2, #27
 8002036:	f140 808e 	bpl.w	8002156 <HAL_UART_IRQHandler+0x212>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800203a:	06c8      	lsls	r0, r1, #27
 800203c:	f140 808b 	bpl.w	8002156 <HAL_UART_IRQHandler+0x212>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002040:	2200      	movs	r2, #0
 8002042:	9201      	str	r2, [sp, #4]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	9201      	str	r2, [sp, #4]
 8002048:	685a      	ldr	r2, [r3, #4]
 800204a:	9201      	str	r2, [sp, #4]
 800204c:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800204e:	695a      	ldr	r2, [r3, #20]
 8002050:	0655      	lsls	r5, r2, #25
 8002052:	d54c      	bpl.n	80020ee <HAL_UART_IRQHandler+0x1aa>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002054:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002056:	680a      	ldr	r2, [r1, #0]
 8002058:	6852      	ldr	r2, [r2, #4]
 800205a:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 800205c:	2a00      	cmp	r2, #0
 800205e:	d0df      	beq.n	8002020 <HAL_UART_IRQHandler+0xdc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002060:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
 8002062:	4290      	cmp	r0, r2
 8002064:	d9dc      	bls.n	8002020 <HAL_UART_IRQHandler+0xdc>
        huart->RxXferCount = nb_remaining_rx_data;
 8002066:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002068:	69ca      	ldr	r2, [r1, #28]
 800206a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800206e:	d036      	beq.n	80020de <HAL_UART_IRQHandler+0x19a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002070:	f103 020c 	add.w	r2, r3, #12
 8002074:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002078:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800207c:	f103 000c 	add.w	r0, r3, #12
 8002080:	e840 2100 	strex	r1, r2, [r0]
 8002084:	2900      	cmp	r1, #0
 8002086:	d1f3      	bne.n	8002070 <HAL_UART_IRQHandler+0x12c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002088:	f103 0214 	add.w	r2, r3, #20
 800208c:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002090:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002094:	f103 0014 	add.w	r0, r3, #20
 8002098:	e840 2100 	strex	r1, r2, [r0]
 800209c:	2900      	cmp	r1, #0
 800209e:	d1f3      	bne.n	8002088 <HAL_UART_IRQHandler+0x144>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020a0:	f103 0214 	add.w	r2, r3, #20
 80020a4:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80020a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020ac:	f103 0014 	add.w	r0, r3, #20
 80020b0:	e840 2100 	strex	r1, r2, [r0]
 80020b4:	2900      	cmp	r1, #0
 80020b6:	d1f3      	bne.n	80020a0 <HAL_UART_IRQHandler+0x15c>
          huart->RxState = HAL_UART_STATE_READY;
 80020b8:	2220      	movs	r2, #32
 80020ba:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80020be:	6321      	str	r1, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020c0:	f103 020c 	add.w	r2, r3, #12
 80020c4:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80020c8:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020cc:	f103 000c 	add.w	r0, r3, #12
 80020d0:	e840 2100 	strex	r1, r2, [r0]
 80020d4:	2900      	cmp	r1, #0
 80020d6:	d1f3      	bne.n	80020c0 <HAL_UART_IRQHandler+0x17c>
          (void)HAL_DMA_Abort(huart->hdmarx);
 80020d8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80020da:	f7fe ff6b 	bl	8000fb4 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80020de:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80020e0:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80020e2:	1ac9      	subs	r1, r1, r3
 80020e4:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80020e6:	4620      	mov	r0, r4
 80020e8:	f7ff fece 	bl	8001e88 <HAL_UARTEx_RxEventCallback>
 80020ec:	e798      	b.n	8002020 <HAL_UART_IRQHandler+0xdc>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80020ee:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 80020f0:	b28a      	uxth	r2, r1
      if ((huart->RxXferCount > 0U)
 80020f2:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 80020f4:	b289      	uxth	r1, r1
 80020f6:	2900      	cmp	r1, #0
 80020f8:	d092      	beq.n	8002020 <HAL_UART_IRQHandler+0xdc>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80020fa:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80020fc:	1a89      	subs	r1, r1, r2
 80020fe:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8002100:	2900      	cmp	r1, #0
 8002102:	d08d      	beq.n	8002020 <HAL_UART_IRQHandler+0xdc>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002104:	f103 020c 	add.w	r2, r3, #12
 8002108:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800210c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002110:	f103 050c 	add.w	r5, r3, #12
 8002114:	e845 2000 	strex	r0, r2, [r5]
 8002118:	2800      	cmp	r0, #0
 800211a:	d1f3      	bne.n	8002104 <HAL_UART_IRQHandler+0x1c0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800211c:	f103 0214 	add.w	r2, r3, #20
 8002120:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002124:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002128:	f103 0514 	add.w	r5, r3, #20
 800212c:	e845 2000 	strex	r0, r2, [r5]
 8002130:	2800      	cmp	r0, #0
 8002132:	d1f3      	bne.n	800211c <HAL_UART_IRQHandler+0x1d8>
        huart->RxState = HAL_UART_STATE_READY;
 8002134:	2220      	movs	r2, #32
 8002136:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800213a:	6320      	str	r0, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800213c:	f103 020c 	add.w	r2, r3, #12
 8002140:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002144:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002148:	f103 050c 	add.w	r5, r3, #12
 800214c:	e845 2000 	strex	r0, r2, [r5]
 8002150:	2800      	cmp	r0, #0
 8002152:	d1f3      	bne.n	800213c <HAL_UART_IRQHandler+0x1f8>
 8002154:	e7c7      	b.n	80020e6 <HAL_UART_IRQHandler+0x1a2>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002156:	0610      	lsls	r0, r2, #24
 8002158:	d528      	bpl.n	80021ac <HAL_UART_IRQHandler+0x268>
 800215a:	060d      	lsls	r5, r1, #24
 800215c:	d526      	bpl.n	80021ac <HAL_UART_IRQHandler+0x268>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800215e:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8002162:	2a21      	cmp	r2, #33	; 0x21
 8002164:	f47f af5c 	bne.w	8002020 <HAL_UART_IRQHandler+0xdc>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002168:	68a1      	ldr	r1, [r4, #8]
 800216a:	6a22      	ldr	r2, [r4, #32]
 800216c:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8002170:	d117      	bne.n	80021a2 <HAL_UART_IRQHandler+0x25e>
 8002172:	6921      	ldr	r1, [r4, #16]
 8002174:	b9a9      	cbnz	r1, 80021a2 <HAL_UART_IRQHandler+0x25e>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002176:	f832 1b02 	ldrh.w	r1, [r2], #2
 800217a:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800217e:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002180:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8002182:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8002184:	3a01      	subs	r2, #1
 8002186:	b292      	uxth	r2, r2
 8002188:	84e2      	strh	r2, [r4, #38]	; 0x26
 800218a:	2a00      	cmp	r2, #0
 800218c:	f47f af48 	bne.w	8002020 <HAL_UART_IRQHandler+0xdc>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002190:	68da      	ldr	r2, [r3, #12]
 8002192:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002196:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002198:	68da      	ldr	r2, [r3, #12]
 800219a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800219e:	60da      	str	r2, [r3, #12]
 80021a0:	e73e      	b.n	8002020 <HAL_UART_IRQHandler+0xdc>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80021a2:	1c51      	adds	r1, r2, #1
 80021a4:	6221      	str	r1, [r4, #32]
 80021a6:	7812      	ldrb	r2, [r2, #0]
 80021a8:	605a      	str	r2, [r3, #4]
 80021aa:	e7ea      	b.n	8002182 <HAL_UART_IRQHandler+0x23e>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80021ac:	0650      	lsls	r0, r2, #25
 80021ae:	f57f af37 	bpl.w	8002020 <HAL_UART_IRQHandler+0xdc>
 80021b2:	064a      	lsls	r2, r1, #25
 80021b4:	f57f af34 	bpl.w	8002020 <HAL_UART_IRQHandler+0xdc>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80021b8:	68da      	ldr	r2, [r3, #12]
 80021ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021be:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80021c0:	2320      	movs	r3, #32
 80021c2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 80021c6:	4620      	mov	r0, r4
 80021c8:	f7ff fe53 	bl	8001e72 <HAL_UART_TxCpltCallback>
  return HAL_OK;
 80021cc:	e728      	b.n	8002020 <HAL_UART_IRQHandler+0xdc>
 80021ce:	bf00      	nop
 80021d0:	08001e79 	.word	0x08001e79

080021d4 <__errno>:
 80021d4:	4b01      	ldr	r3, [pc, #4]	; (80021dc <__errno+0x8>)
 80021d6:	6818      	ldr	r0, [r3, #0]
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	20000010 	.word	0x20000010

080021e0 <__libc_init_array>:
 80021e0:	b570      	push	{r4, r5, r6, lr}
 80021e2:	4d0d      	ldr	r5, [pc, #52]	; (8002218 <__libc_init_array+0x38>)
 80021e4:	4c0d      	ldr	r4, [pc, #52]	; (800221c <__libc_init_array+0x3c>)
 80021e6:	1b64      	subs	r4, r4, r5
 80021e8:	10a4      	asrs	r4, r4, #2
 80021ea:	2600      	movs	r6, #0
 80021ec:	42a6      	cmp	r6, r4
 80021ee:	d109      	bne.n	8002204 <__libc_init_array+0x24>
 80021f0:	4d0b      	ldr	r5, [pc, #44]	; (8002220 <__libc_init_array+0x40>)
 80021f2:	4c0c      	ldr	r4, [pc, #48]	; (8002224 <__libc_init_array+0x44>)
 80021f4:	f000 ffec 	bl	80031d0 <_init>
 80021f8:	1b64      	subs	r4, r4, r5
 80021fa:	10a4      	asrs	r4, r4, #2
 80021fc:	2600      	movs	r6, #0
 80021fe:	42a6      	cmp	r6, r4
 8002200:	d105      	bne.n	800220e <__libc_init_array+0x2e>
 8002202:	bd70      	pop	{r4, r5, r6, pc}
 8002204:	f855 3b04 	ldr.w	r3, [r5], #4
 8002208:	4798      	blx	r3
 800220a:	3601      	adds	r6, #1
 800220c:	e7ee      	b.n	80021ec <__libc_init_array+0xc>
 800220e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002212:	4798      	blx	r3
 8002214:	3601      	adds	r6, #1
 8002216:	e7f2      	b.n	80021fe <__libc_init_array+0x1e>
 8002218:	08003480 	.word	0x08003480
 800221c:	08003480 	.word	0x08003480
 8002220:	08003480 	.word	0x08003480
 8002224:	08003484 	.word	0x08003484

08002228 <memset>:
 8002228:	4402      	add	r2, r0
 800222a:	4603      	mov	r3, r0
 800222c:	4293      	cmp	r3, r2
 800222e:	d100      	bne.n	8002232 <memset+0xa>
 8002230:	4770      	bx	lr
 8002232:	f803 1b01 	strb.w	r1, [r3], #1
 8002236:	e7f9      	b.n	800222c <memset+0x4>

08002238 <iprintf>:
 8002238:	b40f      	push	{r0, r1, r2, r3}
 800223a:	4b0a      	ldr	r3, [pc, #40]	; (8002264 <iprintf+0x2c>)
 800223c:	b513      	push	{r0, r1, r4, lr}
 800223e:	681c      	ldr	r4, [r3, #0]
 8002240:	b124      	cbz	r4, 800224c <iprintf+0x14>
 8002242:	69a3      	ldr	r3, [r4, #24]
 8002244:	b913      	cbnz	r3, 800224c <iprintf+0x14>
 8002246:	4620      	mov	r0, r4
 8002248:	f000 fa5e 	bl	8002708 <__sinit>
 800224c:	ab05      	add	r3, sp, #20
 800224e:	9a04      	ldr	r2, [sp, #16]
 8002250:	68a1      	ldr	r1, [r4, #8]
 8002252:	9301      	str	r3, [sp, #4]
 8002254:	4620      	mov	r0, r4
 8002256:	f000 fc2f 	bl	8002ab8 <_vfiprintf_r>
 800225a:	b002      	add	sp, #8
 800225c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002260:	b004      	add	sp, #16
 8002262:	4770      	bx	lr
 8002264:	20000010 	.word	0x20000010

08002268 <_puts_r>:
 8002268:	b570      	push	{r4, r5, r6, lr}
 800226a:	460e      	mov	r6, r1
 800226c:	4605      	mov	r5, r0
 800226e:	b118      	cbz	r0, 8002278 <_puts_r+0x10>
 8002270:	6983      	ldr	r3, [r0, #24]
 8002272:	b90b      	cbnz	r3, 8002278 <_puts_r+0x10>
 8002274:	f000 fa48 	bl	8002708 <__sinit>
 8002278:	69ab      	ldr	r3, [r5, #24]
 800227a:	68ac      	ldr	r4, [r5, #8]
 800227c:	b913      	cbnz	r3, 8002284 <_puts_r+0x1c>
 800227e:	4628      	mov	r0, r5
 8002280:	f000 fa42 	bl	8002708 <__sinit>
 8002284:	4b2c      	ldr	r3, [pc, #176]	; (8002338 <_puts_r+0xd0>)
 8002286:	429c      	cmp	r4, r3
 8002288:	d120      	bne.n	80022cc <_puts_r+0x64>
 800228a:	686c      	ldr	r4, [r5, #4]
 800228c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800228e:	07db      	lsls	r3, r3, #31
 8002290:	d405      	bmi.n	800229e <_puts_r+0x36>
 8002292:	89a3      	ldrh	r3, [r4, #12]
 8002294:	0598      	lsls	r0, r3, #22
 8002296:	d402      	bmi.n	800229e <_puts_r+0x36>
 8002298:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800229a:	f000 fad3 	bl	8002844 <__retarget_lock_acquire_recursive>
 800229e:	89a3      	ldrh	r3, [r4, #12]
 80022a0:	0719      	lsls	r1, r3, #28
 80022a2:	d51d      	bpl.n	80022e0 <_puts_r+0x78>
 80022a4:	6923      	ldr	r3, [r4, #16]
 80022a6:	b1db      	cbz	r3, 80022e0 <_puts_r+0x78>
 80022a8:	3e01      	subs	r6, #1
 80022aa:	68a3      	ldr	r3, [r4, #8]
 80022ac:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80022b0:	3b01      	subs	r3, #1
 80022b2:	60a3      	str	r3, [r4, #8]
 80022b4:	bb39      	cbnz	r1, 8002306 <_puts_r+0x9e>
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	da38      	bge.n	800232c <_puts_r+0xc4>
 80022ba:	4622      	mov	r2, r4
 80022bc:	210a      	movs	r1, #10
 80022be:	4628      	mov	r0, r5
 80022c0:	f000 f848 	bl	8002354 <__swbuf_r>
 80022c4:	3001      	adds	r0, #1
 80022c6:	d011      	beq.n	80022ec <_puts_r+0x84>
 80022c8:	250a      	movs	r5, #10
 80022ca:	e011      	b.n	80022f0 <_puts_r+0x88>
 80022cc:	4b1b      	ldr	r3, [pc, #108]	; (800233c <_puts_r+0xd4>)
 80022ce:	429c      	cmp	r4, r3
 80022d0:	d101      	bne.n	80022d6 <_puts_r+0x6e>
 80022d2:	68ac      	ldr	r4, [r5, #8]
 80022d4:	e7da      	b.n	800228c <_puts_r+0x24>
 80022d6:	4b1a      	ldr	r3, [pc, #104]	; (8002340 <_puts_r+0xd8>)
 80022d8:	429c      	cmp	r4, r3
 80022da:	bf08      	it	eq
 80022dc:	68ec      	ldreq	r4, [r5, #12]
 80022de:	e7d5      	b.n	800228c <_puts_r+0x24>
 80022e0:	4621      	mov	r1, r4
 80022e2:	4628      	mov	r0, r5
 80022e4:	f000 f888 	bl	80023f8 <__swsetup_r>
 80022e8:	2800      	cmp	r0, #0
 80022ea:	d0dd      	beq.n	80022a8 <_puts_r+0x40>
 80022ec:	f04f 35ff 	mov.w	r5, #4294967295
 80022f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80022f2:	07da      	lsls	r2, r3, #31
 80022f4:	d405      	bmi.n	8002302 <_puts_r+0x9a>
 80022f6:	89a3      	ldrh	r3, [r4, #12]
 80022f8:	059b      	lsls	r3, r3, #22
 80022fa:	d402      	bmi.n	8002302 <_puts_r+0x9a>
 80022fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80022fe:	f000 faa2 	bl	8002846 <__retarget_lock_release_recursive>
 8002302:	4628      	mov	r0, r5
 8002304:	bd70      	pop	{r4, r5, r6, pc}
 8002306:	2b00      	cmp	r3, #0
 8002308:	da04      	bge.n	8002314 <_puts_r+0xac>
 800230a:	69a2      	ldr	r2, [r4, #24]
 800230c:	429a      	cmp	r2, r3
 800230e:	dc06      	bgt.n	800231e <_puts_r+0xb6>
 8002310:	290a      	cmp	r1, #10
 8002312:	d004      	beq.n	800231e <_puts_r+0xb6>
 8002314:	6823      	ldr	r3, [r4, #0]
 8002316:	1c5a      	adds	r2, r3, #1
 8002318:	6022      	str	r2, [r4, #0]
 800231a:	7019      	strb	r1, [r3, #0]
 800231c:	e7c5      	b.n	80022aa <_puts_r+0x42>
 800231e:	4622      	mov	r2, r4
 8002320:	4628      	mov	r0, r5
 8002322:	f000 f817 	bl	8002354 <__swbuf_r>
 8002326:	3001      	adds	r0, #1
 8002328:	d1bf      	bne.n	80022aa <_puts_r+0x42>
 800232a:	e7df      	b.n	80022ec <_puts_r+0x84>
 800232c:	6823      	ldr	r3, [r4, #0]
 800232e:	250a      	movs	r5, #10
 8002330:	1c5a      	adds	r2, r3, #1
 8002332:	6022      	str	r2, [r4, #0]
 8002334:	701d      	strb	r5, [r3, #0]
 8002336:	e7db      	b.n	80022f0 <_puts_r+0x88>
 8002338:	08003404 	.word	0x08003404
 800233c:	08003424 	.word	0x08003424
 8002340:	080033e4 	.word	0x080033e4

08002344 <puts>:
 8002344:	4b02      	ldr	r3, [pc, #8]	; (8002350 <puts+0xc>)
 8002346:	4601      	mov	r1, r0
 8002348:	6818      	ldr	r0, [r3, #0]
 800234a:	f7ff bf8d 	b.w	8002268 <_puts_r>
 800234e:	bf00      	nop
 8002350:	20000010 	.word	0x20000010

08002354 <__swbuf_r>:
 8002354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002356:	460e      	mov	r6, r1
 8002358:	4614      	mov	r4, r2
 800235a:	4605      	mov	r5, r0
 800235c:	b118      	cbz	r0, 8002366 <__swbuf_r+0x12>
 800235e:	6983      	ldr	r3, [r0, #24]
 8002360:	b90b      	cbnz	r3, 8002366 <__swbuf_r+0x12>
 8002362:	f000 f9d1 	bl	8002708 <__sinit>
 8002366:	4b21      	ldr	r3, [pc, #132]	; (80023ec <__swbuf_r+0x98>)
 8002368:	429c      	cmp	r4, r3
 800236a:	d12b      	bne.n	80023c4 <__swbuf_r+0x70>
 800236c:	686c      	ldr	r4, [r5, #4]
 800236e:	69a3      	ldr	r3, [r4, #24]
 8002370:	60a3      	str	r3, [r4, #8]
 8002372:	89a3      	ldrh	r3, [r4, #12]
 8002374:	071a      	lsls	r2, r3, #28
 8002376:	d52f      	bpl.n	80023d8 <__swbuf_r+0x84>
 8002378:	6923      	ldr	r3, [r4, #16]
 800237a:	b36b      	cbz	r3, 80023d8 <__swbuf_r+0x84>
 800237c:	6923      	ldr	r3, [r4, #16]
 800237e:	6820      	ldr	r0, [r4, #0]
 8002380:	1ac0      	subs	r0, r0, r3
 8002382:	6963      	ldr	r3, [r4, #20]
 8002384:	b2f6      	uxtb	r6, r6
 8002386:	4283      	cmp	r3, r0
 8002388:	4637      	mov	r7, r6
 800238a:	dc04      	bgt.n	8002396 <__swbuf_r+0x42>
 800238c:	4621      	mov	r1, r4
 800238e:	4628      	mov	r0, r5
 8002390:	f000 f926 	bl	80025e0 <_fflush_r>
 8002394:	bb30      	cbnz	r0, 80023e4 <__swbuf_r+0x90>
 8002396:	68a3      	ldr	r3, [r4, #8]
 8002398:	3b01      	subs	r3, #1
 800239a:	60a3      	str	r3, [r4, #8]
 800239c:	6823      	ldr	r3, [r4, #0]
 800239e:	1c5a      	adds	r2, r3, #1
 80023a0:	6022      	str	r2, [r4, #0]
 80023a2:	701e      	strb	r6, [r3, #0]
 80023a4:	6963      	ldr	r3, [r4, #20]
 80023a6:	3001      	adds	r0, #1
 80023a8:	4283      	cmp	r3, r0
 80023aa:	d004      	beq.n	80023b6 <__swbuf_r+0x62>
 80023ac:	89a3      	ldrh	r3, [r4, #12]
 80023ae:	07db      	lsls	r3, r3, #31
 80023b0:	d506      	bpl.n	80023c0 <__swbuf_r+0x6c>
 80023b2:	2e0a      	cmp	r6, #10
 80023b4:	d104      	bne.n	80023c0 <__swbuf_r+0x6c>
 80023b6:	4621      	mov	r1, r4
 80023b8:	4628      	mov	r0, r5
 80023ba:	f000 f911 	bl	80025e0 <_fflush_r>
 80023be:	b988      	cbnz	r0, 80023e4 <__swbuf_r+0x90>
 80023c0:	4638      	mov	r0, r7
 80023c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80023c4:	4b0a      	ldr	r3, [pc, #40]	; (80023f0 <__swbuf_r+0x9c>)
 80023c6:	429c      	cmp	r4, r3
 80023c8:	d101      	bne.n	80023ce <__swbuf_r+0x7a>
 80023ca:	68ac      	ldr	r4, [r5, #8]
 80023cc:	e7cf      	b.n	800236e <__swbuf_r+0x1a>
 80023ce:	4b09      	ldr	r3, [pc, #36]	; (80023f4 <__swbuf_r+0xa0>)
 80023d0:	429c      	cmp	r4, r3
 80023d2:	bf08      	it	eq
 80023d4:	68ec      	ldreq	r4, [r5, #12]
 80023d6:	e7ca      	b.n	800236e <__swbuf_r+0x1a>
 80023d8:	4621      	mov	r1, r4
 80023da:	4628      	mov	r0, r5
 80023dc:	f000 f80c 	bl	80023f8 <__swsetup_r>
 80023e0:	2800      	cmp	r0, #0
 80023e2:	d0cb      	beq.n	800237c <__swbuf_r+0x28>
 80023e4:	f04f 37ff 	mov.w	r7, #4294967295
 80023e8:	e7ea      	b.n	80023c0 <__swbuf_r+0x6c>
 80023ea:	bf00      	nop
 80023ec:	08003404 	.word	0x08003404
 80023f0:	08003424 	.word	0x08003424
 80023f4:	080033e4 	.word	0x080033e4

080023f8 <__swsetup_r>:
 80023f8:	4b32      	ldr	r3, [pc, #200]	; (80024c4 <__swsetup_r+0xcc>)
 80023fa:	b570      	push	{r4, r5, r6, lr}
 80023fc:	681d      	ldr	r5, [r3, #0]
 80023fe:	4606      	mov	r6, r0
 8002400:	460c      	mov	r4, r1
 8002402:	b125      	cbz	r5, 800240e <__swsetup_r+0x16>
 8002404:	69ab      	ldr	r3, [r5, #24]
 8002406:	b913      	cbnz	r3, 800240e <__swsetup_r+0x16>
 8002408:	4628      	mov	r0, r5
 800240a:	f000 f97d 	bl	8002708 <__sinit>
 800240e:	4b2e      	ldr	r3, [pc, #184]	; (80024c8 <__swsetup_r+0xd0>)
 8002410:	429c      	cmp	r4, r3
 8002412:	d10f      	bne.n	8002434 <__swsetup_r+0x3c>
 8002414:	686c      	ldr	r4, [r5, #4]
 8002416:	89a3      	ldrh	r3, [r4, #12]
 8002418:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800241c:	0719      	lsls	r1, r3, #28
 800241e:	d42c      	bmi.n	800247a <__swsetup_r+0x82>
 8002420:	06dd      	lsls	r5, r3, #27
 8002422:	d411      	bmi.n	8002448 <__swsetup_r+0x50>
 8002424:	2309      	movs	r3, #9
 8002426:	6033      	str	r3, [r6, #0]
 8002428:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800242c:	81a3      	strh	r3, [r4, #12]
 800242e:	f04f 30ff 	mov.w	r0, #4294967295
 8002432:	e03e      	b.n	80024b2 <__swsetup_r+0xba>
 8002434:	4b25      	ldr	r3, [pc, #148]	; (80024cc <__swsetup_r+0xd4>)
 8002436:	429c      	cmp	r4, r3
 8002438:	d101      	bne.n	800243e <__swsetup_r+0x46>
 800243a:	68ac      	ldr	r4, [r5, #8]
 800243c:	e7eb      	b.n	8002416 <__swsetup_r+0x1e>
 800243e:	4b24      	ldr	r3, [pc, #144]	; (80024d0 <__swsetup_r+0xd8>)
 8002440:	429c      	cmp	r4, r3
 8002442:	bf08      	it	eq
 8002444:	68ec      	ldreq	r4, [r5, #12]
 8002446:	e7e6      	b.n	8002416 <__swsetup_r+0x1e>
 8002448:	0758      	lsls	r0, r3, #29
 800244a:	d512      	bpl.n	8002472 <__swsetup_r+0x7a>
 800244c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800244e:	b141      	cbz	r1, 8002462 <__swsetup_r+0x6a>
 8002450:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002454:	4299      	cmp	r1, r3
 8002456:	d002      	beq.n	800245e <__swsetup_r+0x66>
 8002458:	4630      	mov	r0, r6
 800245a:	f000 fa59 	bl	8002910 <_free_r>
 800245e:	2300      	movs	r3, #0
 8002460:	6363      	str	r3, [r4, #52]	; 0x34
 8002462:	89a3      	ldrh	r3, [r4, #12]
 8002464:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002468:	81a3      	strh	r3, [r4, #12]
 800246a:	2300      	movs	r3, #0
 800246c:	6063      	str	r3, [r4, #4]
 800246e:	6923      	ldr	r3, [r4, #16]
 8002470:	6023      	str	r3, [r4, #0]
 8002472:	89a3      	ldrh	r3, [r4, #12]
 8002474:	f043 0308 	orr.w	r3, r3, #8
 8002478:	81a3      	strh	r3, [r4, #12]
 800247a:	6923      	ldr	r3, [r4, #16]
 800247c:	b94b      	cbnz	r3, 8002492 <__swsetup_r+0x9a>
 800247e:	89a3      	ldrh	r3, [r4, #12]
 8002480:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002484:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002488:	d003      	beq.n	8002492 <__swsetup_r+0x9a>
 800248a:	4621      	mov	r1, r4
 800248c:	4630      	mov	r0, r6
 800248e:	f000 f9ff 	bl	8002890 <__smakebuf_r>
 8002492:	89a0      	ldrh	r0, [r4, #12]
 8002494:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002498:	f010 0301 	ands.w	r3, r0, #1
 800249c:	d00a      	beq.n	80024b4 <__swsetup_r+0xbc>
 800249e:	2300      	movs	r3, #0
 80024a0:	60a3      	str	r3, [r4, #8]
 80024a2:	6963      	ldr	r3, [r4, #20]
 80024a4:	425b      	negs	r3, r3
 80024a6:	61a3      	str	r3, [r4, #24]
 80024a8:	6923      	ldr	r3, [r4, #16]
 80024aa:	b943      	cbnz	r3, 80024be <__swsetup_r+0xc6>
 80024ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80024b0:	d1ba      	bne.n	8002428 <__swsetup_r+0x30>
 80024b2:	bd70      	pop	{r4, r5, r6, pc}
 80024b4:	0781      	lsls	r1, r0, #30
 80024b6:	bf58      	it	pl
 80024b8:	6963      	ldrpl	r3, [r4, #20]
 80024ba:	60a3      	str	r3, [r4, #8]
 80024bc:	e7f4      	b.n	80024a8 <__swsetup_r+0xb0>
 80024be:	2000      	movs	r0, #0
 80024c0:	e7f7      	b.n	80024b2 <__swsetup_r+0xba>
 80024c2:	bf00      	nop
 80024c4:	20000010 	.word	0x20000010
 80024c8:	08003404 	.word	0x08003404
 80024cc:	08003424 	.word	0x08003424
 80024d0:	080033e4 	.word	0x080033e4

080024d4 <__sflush_r>:
 80024d4:	898a      	ldrh	r2, [r1, #12]
 80024d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80024da:	4605      	mov	r5, r0
 80024dc:	0710      	lsls	r0, r2, #28
 80024de:	460c      	mov	r4, r1
 80024e0:	d458      	bmi.n	8002594 <__sflush_r+0xc0>
 80024e2:	684b      	ldr	r3, [r1, #4]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	dc05      	bgt.n	80024f4 <__sflush_r+0x20>
 80024e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	dc02      	bgt.n	80024f4 <__sflush_r+0x20>
 80024ee:	2000      	movs	r0, #0
 80024f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80024f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80024f6:	2e00      	cmp	r6, #0
 80024f8:	d0f9      	beq.n	80024ee <__sflush_r+0x1a>
 80024fa:	2300      	movs	r3, #0
 80024fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002500:	682f      	ldr	r7, [r5, #0]
 8002502:	602b      	str	r3, [r5, #0]
 8002504:	d032      	beq.n	800256c <__sflush_r+0x98>
 8002506:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002508:	89a3      	ldrh	r3, [r4, #12]
 800250a:	075a      	lsls	r2, r3, #29
 800250c:	d505      	bpl.n	800251a <__sflush_r+0x46>
 800250e:	6863      	ldr	r3, [r4, #4]
 8002510:	1ac0      	subs	r0, r0, r3
 8002512:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002514:	b10b      	cbz	r3, 800251a <__sflush_r+0x46>
 8002516:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002518:	1ac0      	subs	r0, r0, r3
 800251a:	2300      	movs	r3, #0
 800251c:	4602      	mov	r2, r0
 800251e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002520:	6a21      	ldr	r1, [r4, #32]
 8002522:	4628      	mov	r0, r5
 8002524:	47b0      	blx	r6
 8002526:	1c43      	adds	r3, r0, #1
 8002528:	89a3      	ldrh	r3, [r4, #12]
 800252a:	d106      	bne.n	800253a <__sflush_r+0x66>
 800252c:	6829      	ldr	r1, [r5, #0]
 800252e:	291d      	cmp	r1, #29
 8002530:	d82c      	bhi.n	800258c <__sflush_r+0xb8>
 8002532:	4a2a      	ldr	r2, [pc, #168]	; (80025dc <__sflush_r+0x108>)
 8002534:	40ca      	lsrs	r2, r1
 8002536:	07d6      	lsls	r6, r2, #31
 8002538:	d528      	bpl.n	800258c <__sflush_r+0xb8>
 800253a:	2200      	movs	r2, #0
 800253c:	6062      	str	r2, [r4, #4]
 800253e:	04d9      	lsls	r1, r3, #19
 8002540:	6922      	ldr	r2, [r4, #16]
 8002542:	6022      	str	r2, [r4, #0]
 8002544:	d504      	bpl.n	8002550 <__sflush_r+0x7c>
 8002546:	1c42      	adds	r2, r0, #1
 8002548:	d101      	bne.n	800254e <__sflush_r+0x7a>
 800254a:	682b      	ldr	r3, [r5, #0]
 800254c:	b903      	cbnz	r3, 8002550 <__sflush_r+0x7c>
 800254e:	6560      	str	r0, [r4, #84]	; 0x54
 8002550:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002552:	602f      	str	r7, [r5, #0]
 8002554:	2900      	cmp	r1, #0
 8002556:	d0ca      	beq.n	80024ee <__sflush_r+0x1a>
 8002558:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800255c:	4299      	cmp	r1, r3
 800255e:	d002      	beq.n	8002566 <__sflush_r+0x92>
 8002560:	4628      	mov	r0, r5
 8002562:	f000 f9d5 	bl	8002910 <_free_r>
 8002566:	2000      	movs	r0, #0
 8002568:	6360      	str	r0, [r4, #52]	; 0x34
 800256a:	e7c1      	b.n	80024f0 <__sflush_r+0x1c>
 800256c:	6a21      	ldr	r1, [r4, #32]
 800256e:	2301      	movs	r3, #1
 8002570:	4628      	mov	r0, r5
 8002572:	47b0      	blx	r6
 8002574:	1c41      	adds	r1, r0, #1
 8002576:	d1c7      	bne.n	8002508 <__sflush_r+0x34>
 8002578:	682b      	ldr	r3, [r5, #0]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d0c4      	beq.n	8002508 <__sflush_r+0x34>
 800257e:	2b1d      	cmp	r3, #29
 8002580:	d001      	beq.n	8002586 <__sflush_r+0xb2>
 8002582:	2b16      	cmp	r3, #22
 8002584:	d101      	bne.n	800258a <__sflush_r+0xb6>
 8002586:	602f      	str	r7, [r5, #0]
 8002588:	e7b1      	b.n	80024ee <__sflush_r+0x1a>
 800258a:	89a3      	ldrh	r3, [r4, #12]
 800258c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002590:	81a3      	strh	r3, [r4, #12]
 8002592:	e7ad      	b.n	80024f0 <__sflush_r+0x1c>
 8002594:	690f      	ldr	r7, [r1, #16]
 8002596:	2f00      	cmp	r7, #0
 8002598:	d0a9      	beq.n	80024ee <__sflush_r+0x1a>
 800259a:	0793      	lsls	r3, r2, #30
 800259c:	680e      	ldr	r6, [r1, #0]
 800259e:	bf08      	it	eq
 80025a0:	694b      	ldreq	r3, [r1, #20]
 80025a2:	600f      	str	r7, [r1, #0]
 80025a4:	bf18      	it	ne
 80025a6:	2300      	movne	r3, #0
 80025a8:	eba6 0807 	sub.w	r8, r6, r7
 80025ac:	608b      	str	r3, [r1, #8]
 80025ae:	f1b8 0f00 	cmp.w	r8, #0
 80025b2:	dd9c      	ble.n	80024ee <__sflush_r+0x1a>
 80025b4:	6a21      	ldr	r1, [r4, #32]
 80025b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80025b8:	4643      	mov	r3, r8
 80025ba:	463a      	mov	r2, r7
 80025bc:	4628      	mov	r0, r5
 80025be:	47b0      	blx	r6
 80025c0:	2800      	cmp	r0, #0
 80025c2:	dc06      	bgt.n	80025d2 <__sflush_r+0xfe>
 80025c4:	89a3      	ldrh	r3, [r4, #12]
 80025c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025ca:	81a3      	strh	r3, [r4, #12]
 80025cc:	f04f 30ff 	mov.w	r0, #4294967295
 80025d0:	e78e      	b.n	80024f0 <__sflush_r+0x1c>
 80025d2:	4407      	add	r7, r0
 80025d4:	eba8 0800 	sub.w	r8, r8, r0
 80025d8:	e7e9      	b.n	80025ae <__sflush_r+0xda>
 80025da:	bf00      	nop
 80025dc:	20400001 	.word	0x20400001

080025e0 <_fflush_r>:
 80025e0:	b538      	push	{r3, r4, r5, lr}
 80025e2:	690b      	ldr	r3, [r1, #16]
 80025e4:	4605      	mov	r5, r0
 80025e6:	460c      	mov	r4, r1
 80025e8:	b913      	cbnz	r3, 80025f0 <_fflush_r+0x10>
 80025ea:	2500      	movs	r5, #0
 80025ec:	4628      	mov	r0, r5
 80025ee:	bd38      	pop	{r3, r4, r5, pc}
 80025f0:	b118      	cbz	r0, 80025fa <_fflush_r+0x1a>
 80025f2:	6983      	ldr	r3, [r0, #24]
 80025f4:	b90b      	cbnz	r3, 80025fa <_fflush_r+0x1a>
 80025f6:	f000 f887 	bl	8002708 <__sinit>
 80025fa:	4b14      	ldr	r3, [pc, #80]	; (800264c <_fflush_r+0x6c>)
 80025fc:	429c      	cmp	r4, r3
 80025fe:	d11b      	bne.n	8002638 <_fflush_r+0x58>
 8002600:	686c      	ldr	r4, [r5, #4]
 8002602:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d0ef      	beq.n	80025ea <_fflush_r+0xa>
 800260a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800260c:	07d0      	lsls	r0, r2, #31
 800260e:	d404      	bmi.n	800261a <_fflush_r+0x3a>
 8002610:	0599      	lsls	r1, r3, #22
 8002612:	d402      	bmi.n	800261a <_fflush_r+0x3a>
 8002614:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002616:	f000 f915 	bl	8002844 <__retarget_lock_acquire_recursive>
 800261a:	4628      	mov	r0, r5
 800261c:	4621      	mov	r1, r4
 800261e:	f7ff ff59 	bl	80024d4 <__sflush_r>
 8002622:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002624:	07da      	lsls	r2, r3, #31
 8002626:	4605      	mov	r5, r0
 8002628:	d4e0      	bmi.n	80025ec <_fflush_r+0xc>
 800262a:	89a3      	ldrh	r3, [r4, #12]
 800262c:	059b      	lsls	r3, r3, #22
 800262e:	d4dd      	bmi.n	80025ec <_fflush_r+0xc>
 8002630:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002632:	f000 f908 	bl	8002846 <__retarget_lock_release_recursive>
 8002636:	e7d9      	b.n	80025ec <_fflush_r+0xc>
 8002638:	4b05      	ldr	r3, [pc, #20]	; (8002650 <_fflush_r+0x70>)
 800263a:	429c      	cmp	r4, r3
 800263c:	d101      	bne.n	8002642 <_fflush_r+0x62>
 800263e:	68ac      	ldr	r4, [r5, #8]
 8002640:	e7df      	b.n	8002602 <_fflush_r+0x22>
 8002642:	4b04      	ldr	r3, [pc, #16]	; (8002654 <_fflush_r+0x74>)
 8002644:	429c      	cmp	r4, r3
 8002646:	bf08      	it	eq
 8002648:	68ec      	ldreq	r4, [r5, #12]
 800264a:	e7da      	b.n	8002602 <_fflush_r+0x22>
 800264c:	08003404 	.word	0x08003404
 8002650:	08003424 	.word	0x08003424
 8002654:	080033e4 	.word	0x080033e4

08002658 <std>:
 8002658:	2300      	movs	r3, #0
 800265a:	b510      	push	{r4, lr}
 800265c:	4604      	mov	r4, r0
 800265e:	e9c0 3300 	strd	r3, r3, [r0]
 8002662:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002666:	6083      	str	r3, [r0, #8]
 8002668:	8181      	strh	r1, [r0, #12]
 800266a:	6643      	str	r3, [r0, #100]	; 0x64
 800266c:	81c2      	strh	r2, [r0, #14]
 800266e:	6183      	str	r3, [r0, #24]
 8002670:	4619      	mov	r1, r3
 8002672:	2208      	movs	r2, #8
 8002674:	305c      	adds	r0, #92	; 0x5c
 8002676:	f7ff fdd7 	bl	8002228 <memset>
 800267a:	4b05      	ldr	r3, [pc, #20]	; (8002690 <std+0x38>)
 800267c:	6263      	str	r3, [r4, #36]	; 0x24
 800267e:	4b05      	ldr	r3, [pc, #20]	; (8002694 <std+0x3c>)
 8002680:	62a3      	str	r3, [r4, #40]	; 0x28
 8002682:	4b05      	ldr	r3, [pc, #20]	; (8002698 <std+0x40>)
 8002684:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002686:	4b05      	ldr	r3, [pc, #20]	; (800269c <std+0x44>)
 8002688:	6224      	str	r4, [r4, #32]
 800268a:	6323      	str	r3, [r4, #48]	; 0x30
 800268c:	bd10      	pop	{r4, pc}
 800268e:	bf00      	nop
 8002690:	08003061 	.word	0x08003061
 8002694:	08003083 	.word	0x08003083
 8002698:	080030bb 	.word	0x080030bb
 800269c:	080030df 	.word	0x080030df

080026a0 <_cleanup_r>:
 80026a0:	4901      	ldr	r1, [pc, #4]	; (80026a8 <_cleanup_r+0x8>)
 80026a2:	f000 b8af 	b.w	8002804 <_fwalk_reent>
 80026a6:	bf00      	nop
 80026a8:	080025e1 	.word	0x080025e1

080026ac <__sfmoreglue>:
 80026ac:	b570      	push	{r4, r5, r6, lr}
 80026ae:	1e4a      	subs	r2, r1, #1
 80026b0:	2568      	movs	r5, #104	; 0x68
 80026b2:	4355      	muls	r5, r2
 80026b4:	460e      	mov	r6, r1
 80026b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80026ba:	f000 f979 	bl	80029b0 <_malloc_r>
 80026be:	4604      	mov	r4, r0
 80026c0:	b140      	cbz	r0, 80026d4 <__sfmoreglue+0x28>
 80026c2:	2100      	movs	r1, #0
 80026c4:	e9c0 1600 	strd	r1, r6, [r0]
 80026c8:	300c      	adds	r0, #12
 80026ca:	60a0      	str	r0, [r4, #8]
 80026cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80026d0:	f7ff fdaa 	bl	8002228 <memset>
 80026d4:	4620      	mov	r0, r4
 80026d6:	bd70      	pop	{r4, r5, r6, pc}

080026d8 <__sfp_lock_acquire>:
 80026d8:	4801      	ldr	r0, [pc, #4]	; (80026e0 <__sfp_lock_acquire+0x8>)
 80026da:	f000 b8b3 	b.w	8002844 <__retarget_lock_acquire_recursive>
 80026de:	bf00      	nop
 80026e0:	20000564 	.word	0x20000564

080026e4 <__sfp_lock_release>:
 80026e4:	4801      	ldr	r0, [pc, #4]	; (80026ec <__sfp_lock_release+0x8>)
 80026e6:	f000 b8ae 	b.w	8002846 <__retarget_lock_release_recursive>
 80026ea:	bf00      	nop
 80026ec:	20000564 	.word	0x20000564

080026f0 <__sinit_lock_acquire>:
 80026f0:	4801      	ldr	r0, [pc, #4]	; (80026f8 <__sinit_lock_acquire+0x8>)
 80026f2:	f000 b8a7 	b.w	8002844 <__retarget_lock_acquire_recursive>
 80026f6:	bf00      	nop
 80026f8:	2000055f 	.word	0x2000055f

080026fc <__sinit_lock_release>:
 80026fc:	4801      	ldr	r0, [pc, #4]	; (8002704 <__sinit_lock_release+0x8>)
 80026fe:	f000 b8a2 	b.w	8002846 <__retarget_lock_release_recursive>
 8002702:	bf00      	nop
 8002704:	2000055f 	.word	0x2000055f

08002708 <__sinit>:
 8002708:	b510      	push	{r4, lr}
 800270a:	4604      	mov	r4, r0
 800270c:	f7ff fff0 	bl	80026f0 <__sinit_lock_acquire>
 8002710:	69a3      	ldr	r3, [r4, #24]
 8002712:	b11b      	cbz	r3, 800271c <__sinit+0x14>
 8002714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002718:	f7ff bff0 	b.w	80026fc <__sinit_lock_release>
 800271c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002720:	6523      	str	r3, [r4, #80]	; 0x50
 8002722:	4b13      	ldr	r3, [pc, #76]	; (8002770 <__sinit+0x68>)
 8002724:	4a13      	ldr	r2, [pc, #76]	; (8002774 <__sinit+0x6c>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	62a2      	str	r2, [r4, #40]	; 0x28
 800272a:	42a3      	cmp	r3, r4
 800272c:	bf04      	itt	eq
 800272e:	2301      	moveq	r3, #1
 8002730:	61a3      	streq	r3, [r4, #24]
 8002732:	4620      	mov	r0, r4
 8002734:	f000 f820 	bl	8002778 <__sfp>
 8002738:	6060      	str	r0, [r4, #4]
 800273a:	4620      	mov	r0, r4
 800273c:	f000 f81c 	bl	8002778 <__sfp>
 8002740:	60a0      	str	r0, [r4, #8]
 8002742:	4620      	mov	r0, r4
 8002744:	f000 f818 	bl	8002778 <__sfp>
 8002748:	2200      	movs	r2, #0
 800274a:	60e0      	str	r0, [r4, #12]
 800274c:	2104      	movs	r1, #4
 800274e:	6860      	ldr	r0, [r4, #4]
 8002750:	f7ff ff82 	bl	8002658 <std>
 8002754:	68a0      	ldr	r0, [r4, #8]
 8002756:	2201      	movs	r2, #1
 8002758:	2109      	movs	r1, #9
 800275a:	f7ff ff7d 	bl	8002658 <std>
 800275e:	68e0      	ldr	r0, [r4, #12]
 8002760:	2202      	movs	r2, #2
 8002762:	2112      	movs	r1, #18
 8002764:	f7ff ff78 	bl	8002658 <std>
 8002768:	2301      	movs	r3, #1
 800276a:	61a3      	str	r3, [r4, #24]
 800276c:	e7d2      	b.n	8002714 <__sinit+0xc>
 800276e:	bf00      	nop
 8002770:	080033e0 	.word	0x080033e0
 8002774:	080026a1 	.word	0x080026a1

08002778 <__sfp>:
 8002778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800277a:	4607      	mov	r7, r0
 800277c:	f7ff ffac 	bl	80026d8 <__sfp_lock_acquire>
 8002780:	4b1e      	ldr	r3, [pc, #120]	; (80027fc <__sfp+0x84>)
 8002782:	681e      	ldr	r6, [r3, #0]
 8002784:	69b3      	ldr	r3, [r6, #24]
 8002786:	b913      	cbnz	r3, 800278e <__sfp+0x16>
 8002788:	4630      	mov	r0, r6
 800278a:	f7ff ffbd 	bl	8002708 <__sinit>
 800278e:	3648      	adds	r6, #72	; 0x48
 8002790:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002794:	3b01      	subs	r3, #1
 8002796:	d503      	bpl.n	80027a0 <__sfp+0x28>
 8002798:	6833      	ldr	r3, [r6, #0]
 800279a:	b30b      	cbz	r3, 80027e0 <__sfp+0x68>
 800279c:	6836      	ldr	r6, [r6, #0]
 800279e:	e7f7      	b.n	8002790 <__sfp+0x18>
 80027a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80027a4:	b9d5      	cbnz	r5, 80027dc <__sfp+0x64>
 80027a6:	4b16      	ldr	r3, [pc, #88]	; (8002800 <__sfp+0x88>)
 80027a8:	60e3      	str	r3, [r4, #12]
 80027aa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80027ae:	6665      	str	r5, [r4, #100]	; 0x64
 80027b0:	f000 f847 	bl	8002842 <__retarget_lock_init_recursive>
 80027b4:	f7ff ff96 	bl	80026e4 <__sfp_lock_release>
 80027b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80027bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80027c0:	6025      	str	r5, [r4, #0]
 80027c2:	61a5      	str	r5, [r4, #24]
 80027c4:	2208      	movs	r2, #8
 80027c6:	4629      	mov	r1, r5
 80027c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80027cc:	f7ff fd2c 	bl	8002228 <memset>
 80027d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80027d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80027d8:	4620      	mov	r0, r4
 80027da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80027dc:	3468      	adds	r4, #104	; 0x68
 80027de:	e7d9      	b.n	8002794 <__sfp+0x1c>
 80027e0:	2104      	movs	r1, #4
 80027e2:	4638      	mov	r0, r7
 80027e4:	f7ff ff62 	bl	80026ac <__sfmoreglue>
 80027e8:	4604      	mov	r4, r0
 80027ea:	6030      	str	r0, [r6, #0]
 80027ec:	2800      	cmp	r0, #0
 80027ee:	d1d5      	bne.n	800279c <__sfp+0x24>
 80027f0:	f7ff ff78 	bl	80026e4 <__sfp_lock_release>
 80027f4:	230c      	movs	r3, #12
 80027f6:	603b      	str	r3, [r7, #0]
 80027f8:	e7ee      	b.n	80027d8 <__sfp+0x60>
 80027fa:	bf00      	nop
 80027fc:	080033e0 	.word	0x080033e0
 8002800:	ffff0001 	.word	0xffff0001

08002804 <_fwalk_reent>:
 8002804:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002808:	4606      	mov	r6, r0
 800280a:	4688      	mov	r8, r1
 800280c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002810:	2700      	movs	r7, #0
 8002812:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002816:	f1b9 0901 	subs.w	r9, r9, #1
 800281a:	d505      	bpl.n	8002828 <_fwalk_reent+0x24>
 800281c:	6824      	ldr	r4, [r4, #0]
 800281e:	2c00      	cmp	r4, #0
 8002820:	d1f7      	bne.n	8002812 <_fwalk_reent+0xe>
 8002822:	4638      	mov	r0, r7
 8002824:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002828:	89ab      	ldrh	r3, [r5, #12]
 800282a:	2b01      	cmp	r3, #1
 800282c:	d907      	bls.n	800283e <_fwalk_reent+0x3a>
 800282e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002832:	3301      	adds	r3, #1
 8002834:	d003      	beq.n	800283e <_fwalk_reent+0x3a>
 8002836:	4629      	mov	r1, r5
 8002838:	4630      	mov	r0, r6
 800283a:	47c0      	blx	r8
 800283c:	4307      	orrs	r7, r0
 800283e:	3568      	adds	r5, #104	; 0x68
 8002840:	e7e9      	b.n	8002816 <_fwalk_reent+0x12>

08002842 <__retarget_lock_init_recursive>:
 8002842:	4770      	bx	lr

08002844 <__retarget_lock_acquire_recursive>:
 8002844:	4770      	bx	lr

08002846 <__retarget_lock_release_recursive>:
 8002846:	4770      	bx	lr

08002848 <__swhatbuf_r>:
 8002848:	b570      	push	{r4, r5, r6, lr}
 800284a:	460e      	mov	r6, r1
 800284c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002850:	2900      	cmp	r1, #0
 8002852:	b096      	sub	sp, #88	; 0x58
 8002854:	4614      	mov	r4, r2
 8002856:	461d      	mov	r5, r3
 8002858:	da07      	bge.n	800286a <__swhatbuf_r+0x22>
 800285a:	2300      	movs	r3, #0
 800285c:	602b      	str	r3, [r5, #0]
 800285e:	89b3      	ldrh	r3, [r6, #12]
 8002860:	061a      	lsls	r2, r3, #24
 8002862:	d410      	bmi.n	8002886 <__swhatbuf_r+0x3e>
 8002864:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002868:	e00e      	b.n	8002888 <__swhatbuf_r+0x40>
 800286a:	466a      	mov	r2, sp
 800286c:	f000 fc5e 	bl	800312c <_fstat_r>
 8002870:	2800      	cmp	r0, #0
 8002872:	dbf2      	blt.n	800285a <__swhatbuf_r+0x12>
 8002874:	9a01      	ldr	r2, [sp, #4]
 8002876:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800287a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800287e:	425a      	negs	r2, r3
 8002880:	415a      	adcs	r2, r3
 8002882:	602a      	str	r2, [r5, #0]
 8002884:	e7ee      	b.n	8002864 <__swhatbuf_r+0x1c>
 8002886:	2340      	movs	r3, #64	; 0x40
 8002888:	2000      	movs	r0, #0
 800288a:	6023      	str	r3, [r4, #0]
 800288c:	b016      	add	sp, #88	; 0x58
 800288e:	bd70      	pop	{r4, r5, r6, pc}

08002890 <__smakebuf_r>:
 8002890:	898b      	ldrh	r3, [r1, #12]
 8002892:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002894:	079d      	lsls	r5, r3, #30
 8002896:	4606      	mov	r6, r0
 8002898:	460c      	mov	r4, r1
 800289a:	d507      	bpl.n	80028ac <__smakebuf_r+0x1c>
 800289c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80028a0:	6023      	str	r3, [r4, #0]
 80028a2:	6123      	str	r3, [r4, #16]
 80028a4:	2301      	movs	r3, #1
 80028a6:	6163      	str	r3, [r4, #20]
 80028a8:	b002      	add	sp, #8
 80028aa:	bd70      	pop	{r4, r5, r6, pc}
 80028ac:	ab01      	add	r3, sp, #4
 80028ae:	466a      	mov	r2, sp
 80028b0:	f7ff ffca 	bl	8002848 <__swhatbuf_r>
 80028b4:	9900      	ldr	r1, [sp, #0]
 80028b6:	4605      	mov	r5, r0
 80028b8:	4630      	mov	r0, r6
 80028ba:	f000 f879 	bl	80029b0 <_malloc_r>
 80028be:	b948      	cbnz	r0, 80028d4 <__smakebuf_r+0x44>
 80028c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80028c4:	059a      	lsls	r2, r3, #22
 80028c6:	d4ef      	bmi.n	80028a8 <__smakebuf_r+0x18>
 80028c8:	f023 0303 	bic.w	r3, r3, #3
 80028cc:	f043 0302 	orr.w	r3, r3, #2
 80028d0:	81a3      	strh	r3, [r4, #12]
 80028d2:	e7e3      	b.n	800289c <__smakebuf_r+0xc>
 80028d4:	4b0d      	ldr	r3, [pc, #52]	; (800290c <__smakebuf_r+0x7c>)
 80028d6:	62b3      	str	r3, [r6, #40]	; 0x28
 80028d8:	89a3      	ldrh	r3, [r4, #12]
 80028da:	6020      	str	r0, [r4, #0]
 80028dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028e0:	81a3      	strh	r3, [r4, #12]
 80028e2:	9b00      	ldr	r3, [sp, #0]
 80028e4:	6163      	str	r3, [r4, #20]
 80028e6:	9b01      	ldr	r3, [sp, #4]
 80028e8:	6120      	str	r0, [r4, #16]
 80028ea:	b15b      	cbz	r3, 8002904 <__smakebuf_r+0x74>
 80028ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80028f0:	4630      	mov	r0, r6
 80028f2:	f000 fc2d 	bl	8003150 <_isatty_r>
 80028f6:	b128      	cbz	r0, 8002904 <__smakebuf_r+0x74>
 80028f8:	89a3      	ldrh	r3, [r4, #12]
 80028fa:	f023 0303 	bic.w	r3, r3, #3
 80028fe:	f043 0301 	orr.w	r3, r3, #1
 8002902:	81a3      	strh	r3, [r4, #12]
 8002904:	89a0      	ldrh	r0, [r4, #12]
 8002906:	4305      	orrs	r5, r0
 8002908:	81a5      	strh	r5, [r4, #12]
 800290a:	e7cd      	b.n	80028a8 <__smakebuf_r+0x18>
 800290c:	080026a1 	.word	0x080026a1

08002910 <_free_r>:
 8002910:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002912:	2900      	cmp	r1, #0
 8002914:	d048      	beq.n	80029a8 <_free_r+0x98>
 8002916:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800291a:	9001      	str	r0, [sp, #4]
 800291c:	2b00      	cmp	r3, #0
 800291e:	f1a1 0404 	sub.w	r4, r1, #4
 8002922:	bfb8      	it	lt
 8002924:	18e4      	addlt	r4, r4, r3
 8002926:	f000 fc35 	bl	8003194 <__malloc_lock>
 800292a:	4a20      	ldr	r2, [pc, #128]	; (80029ac <_free_r+0x9c>)
 800292c:	9801      	ldr	r0, [sp, #4]
 800292e:	6813      	ldr	r3, [r2, #0]
 8002930:	4615      	mov	r5, r2
 8002932:	b933      	cbnz	r3, 8002942 <_free_r+0x32>
 8002934:	6063      	str	r3, [r4, #4]
 8002936:	6014      	str	r4, [r2, #0]
 8002938:	b003      	add	sp, #12
 800293a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800293e:	f000 bc2f 	b.w	80031a0 <__malloc_unlock>
 8002942:	42a3      	cmp	r3, r4
 8002944:	d90b      	bls.n	800295e <_free_r+0x4e>
 8002946:	6821      	ldr	r1, [r4, #0]
 8002948:	1862      	adds	r2, r4, r1
 800294a:	4293      	cmp	r3, r2
 800294c:	bf04      	itt	eq
 800294e:	681a      	ldreq	r2, [r3, #0]
 8002950:	685b      	ldreq	r3, [r3, #4]
 8002952:	6063      	str	r3, [r4, #4]
 8002954:	bf04      	itt	eq
 8002956:	1852      	addeq	r2, r2, r1
 8002958:	6022      	streq	r2, [r4, #0]
 800295a:	602c      	str	r4, [r5, #0]
 800295c:	e7ec      	b.n	8002938 <_free_r+0x28>
 800295e:	461a      	mov	r2, r3
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	b10b      	cbz	r3, 8002968 <_free_r+0x58>
 8002964:	42a3      	cmp	r3, r4
 8002966:	d9fa      	bls.n	800295e <_free_r+0x4e>
 8002968:	6811      	ldr	r1, [r2, #0]
 800296a:	1855      	adds	r5, r2, r1
 800296c:	42a5      	cmp	r5, r4
 800296e:	d10b      	bne.n	8002988 <_free_r+0x78>
 8002970:	6824      	ldr	r4, [r4, #0]
 8002972:	4421      	add	r1, r4
 8002974:	1854      	adds	r4, r2, r1
 8002976:	42a3      	cmp	r3, r4
 8002978:	6011      	str	r1, [r2, #0]
 800297a:	d1dd      	bne.n	8002938 <_free_r+0x28>
 800297c:	681c      	ldr	r4, [r3, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	6053      	str	r3, [r2, #4]
 8002982:	4421      	add	r1, r4
 8002984:	6011      	str	r1, [r2, #0]
 8002986:	e7d7      	b.n	8002938 <_free_r+0x28>
 8002988:	d902      	bls.n	8002990 <_free_r+0x80>
 800298a:	230c      	movs	r3, #12
 800298c:	6003      	str	r3, [r0, #0]
 800298e:	e7d3      	b.n	8002938 <_free_r+0x28>
 8002990:	6825      	ldr	r5, [r4, #0]
 8002992:	1961      	adds	r1, r4, r5
 8002994:	428b      	cmp	r3, r1
 8002996:	bf04      	itt	eq
 8002998:	6819      	ldreq	r1, [r3, #0]
 800299a:	685b      	ldreq	r3, [r3, #4]
 800299c:	6063      	str	r3, [r4, #4]
 800299e:	bf04      	itt	eq
 80029a0:	1949      	addeq	r1, r1, r5
 80029a2:	6021      	streq	r1, [r4, #0]
 80029a4:	6054      	str	r4, [r2, #4]
 80029a6:	e7c7      	b.n	8002938 <_free_r+0x28>
 80029a8:	b003      	add	sp, #12
 80029aa:	bd30      	pop	{r4, r5, pc}
 80029ac:	200004a8 	.word	0x200004a8

080029b0 <_malloc_r>:
 80029b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029b2:	1ccd      	adds	r5, r1, #3
 80029b4:	f025 0503 	bic.w	r5, r5, #3
 80029b8:	3508      	adds	r5, #8
 80029ba:	2d0c      	cmp	r5, #12
 80029bc:	bf38      	it	cc
 80029be:	250c      	movcc	r5, #12
 80029c0:	2d00      	cmp	r5, #0
 80029c2:	4606      	mov	r6, r0
 80029c4:	db01      	blt.n	80029ca <_malloc_r+0x1a>
 80029c6:	42a9      	cmp	r1, r5
 80029c8:	d903      	bls.n	80029d2 <_malloc_r+0x22>
 80029ca:	230c      	movs	r3, #12
 80029cc:	6033      	str	r3, [r6, #0]
 80029ce:	2000      	movs	r0, #0
 80029d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80029d2:	f000 fbdf 	bl	8003194 <__malloc_lock>
 80029d6:	4921      	ldr	r1, [pc, #132]	; (8002a5c <_malloc_r+0xac>)
 80029d8:	680a      	ldr	r2, [r1, #0]
 80029da:	4614      	mov	r4, r2
 80029dc:	b99c      	cbnz	r4, 8002a06 <_malloc_r+0x56>
 80029de:	4f20      	ldr	r7, [pc, #128]	; (8002a60 <_malloc_r+0xb0>)
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	b923      	cbnz	r3, 80029ee <_malloc_r+0x3e>
 80029e4:	4621      	mov	r1, r4
 80029e6:	4630      	mov	r0, r6
 80029e8:	f000 fb2a 	bl	8003040 <_sbrk_r>
 80029ec:	6038      	str	r0, [r7, #0]
 80029ee:	4629      	mov	r1, r5
 80029f0:	4630      	mov	r0, r6
 80029f2:	f000 fb25 	bl	8003040 <_sbrk_r>
 80029f6:	1c43      	adds	r3, r0, #1
 80029f8:	d123      	bne.n	8002a42 <_malloc_r+0x92>
 80029fa:	230c      	movs	r3, #12
 80029fc:	6033      	str	r3, [r6, #0]
 80029fe:	4630      	mov	r0, r6
 8002a00:	f000 fbce 	bl	80031a0 <__malloc_unlock>
 8002a04:	e7e3      	b.n	80029ce <_malloc_r+0x1e>
 8002a06:	6823      	ldr	r3, [r4, #0]
 8002a08:	1b5b      	subs	r3, r3, r5
 8002a0a:	d417      	bmi.n	8002a3c <_malloc_r+0x8c>
 8002a0c:	2b0b      	cmp	r3, #11
 8002a0e:	d903      	bls.n	8002a18 <_malloc_r+0x68>
 8002a10:	6023      	str	r3, [r4, #0]
 8002a12:	441c      	add	r4, r3
 8002a14:	6025      	str	r5, [r4, #0]
 8002a16:	e004      	b.n	8002a22 <_malloc_r+0x72>
 8002a18:	6863      	ldr	r3, [r4, #4]
 8002a1a:	42a2      	cmp	r2, r4
 8002a1c:	bf0c      	ite	eq
 8002a1e:	600b      	streq	r3, [r1, #0]
 8002a20:	6053      	strne	r3, [r2, #4]
 8002a22:	4630      	mov	r0, r6
 8002a24:	f000 fbbc 	bl	80031a0 <__malloc_unlock>
 8002a28:	f104 000b 	add.w	r0, r4, #11
 8002a2c:	1d23      	adds	r3, r4, #4
 8002a2e:	f020 0007 	bic.w	r0, r0, #7
 8002a32:	1ac2      	subs	r2, r0, r3
 8002a34:	d0cc      	beq.n	80029d0 <_malloc_r+0x20>
 8002a36:	1a1b      	subs	r3, r3, r0
 8002a38:	50a3      	str	r3, [r4, r2]
 8002a3a:	e7c9      	b.n	80029d0 <_malloc_r+0x20>
 8002a3c:	4622      	mov	r2, r4
 8002a3e:	6864      	ldr	r4, [r4, #4]
 8002a40:	e7cc      	b.n	80029dc <_malloc_r+0x2c>
 8002a42:	1cc4      	adds	r4, r0, #3
 8002a44:	f024 0403 	bic.w	r4, r4, #3
 8002a48:	42a0      	cmp	r0, r4
 8002a4a:	d0e3      	beq.n	8002a14 <_malloc_r+0x64>
 8002a4c:	1a21      	subs	r1, r4, r0
 8002a4e:	4630      	mov	r0, r6
 8002a50:	f000 faf6 	bl	8003040 <_sbrk_r>
 8002a54:	3001      	adds	r0, #1
 8002a56:	d1dd      	bne.n	8002a14 <_malloc_r+0x64>
 8002a58:	e7cf      	b.n	80029fa <_malloc_r+0x4a>
 8002a5a:	bf00      	nop
 8002a5c:	200004a8 	.word	0x200004a8
 8002a60:	200004ac 	.word	0x200004ac

08002a64 <__sfputc_r>:
 8002a64:	6893      	ldr	r3, [r2, #8]
 8002a66:	3b01      	subs	r3, #1
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	b410      	push	{r4}
 8002a6c:	6093      	str	r3, [r2, #8]
 8002a6e:	da08      	bge.n	8002a82 <__sfputc_r+0x1e>
 8002a70:	6994      	ldr	r4, [r2, #24]
 8002a72:	42a3      	cmp	r3, r4
 8002a74:	db01      	blt.n	8002a7a <__sfputc_r+0x16>
 8002a76:	290a      	cmp	r1, #10
 8002a78:	d103      	bne.n	8002a82 <__sfputc_r+0x1e>
 8002a7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002a7e:	f7ff bc69 	b.w	8002354 <__swbuf_r>
 8002a82:	6813      	ldr	r3, [r2, #0]
 8002a84:	1c58      	adds	r0, r3, #1
 8002a86:	6010      	str	r0, [r2, #0]
 8002a88:	7019      	strb	r1, [r3, #0]
 8002a8a:	4608      	mov	r0, r1
 8002a8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002a90:	4770      	bx	lr

08002a92 <__sfputs_r>:
 8002a92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a94:	4606      	mov	r6, r0
 8002a96:	460f      	mov	r7, r1
 8002a98:	4614      	mov	r4, r2
 8002a9a:	18d5      	adds	r5, r2, r3
 8002a9c:	42ac      	cmp	r4, r5
 8002a9e:	d101      	bne.n	8002aa4 <__sfputs_r+0x12>
 8002aa0:	2000      	movs	r0, #0
 8002aa2:	e007      	b.n	8002ab4 <__sfputs_r+0x22>
 8002aa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002aa8:	463a      	mov	r2, r7
 8002aaa:	4630      	mov	r0, r6
 8002aac:	f7ff ffda 	bl	8002a64 <__sfputc_r>
 8002ab0:	1c43      	adds	r3, r0, #1
 8002ab2:	d1f3      	bne.n	8002a9c <__sfputs_r+0xa>
 8002ab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002ab8 <_vfiprintf_r>:
 8002ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002abc:	460d      	mov	r5, r1
 8002abe:	b09d      	sub	sp, #116	; 0x74
 8002ac0:	4614      	mov	r4, r2
 8002ac2:	4698      	mov	r8, r3
 8002ac4:	4606      	mov	r6, r0
 8002ac6:	b118      	cbz	r0, 8002ad0 <_vfiprintf_r+0x18>
 8002ac8:	6983      	ldr	r3, [r0, #24]
 8002aca:	b90b      	cbnz	r3, 8002ad0 <_vfiprintf_r+0x18>
 8002acc:	f7ff fe1c 	bl	8002708 <__sinit>
 8002ad0:	4b89      	ldr	r3, [pc, #548]	; (8002cf8 <_vfiprintf_r+0x240>)
 8002ad2:	429d      	cmp	r5, r3
 8002ad4:	d11b      	bne.n	8002b0e <_vfiprintf_r+0x56>
 8002ad6:	6875      	ldr	r5, [r6, #4]
 8002ad8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002ada:	07d9      	lsls	r1, r3, #31
 8002adc:	d405      	bmi.n	8002aea <_vfiprintf_r+0x32>
 8002ade:	89ab      	ldrh	r3, [r5, #12]
 8002ae0:	059a      	lsls	r2, r3, #22
 8002ae2:	d402      	bmi.n	8002aea <_vfiprintf_r+0x32>
 8002ae4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002ae6:	f7ff fead 	bl	8002844 <__retarget_lock_acquire_recursive>
 8002aea:	89ab      	ldrh	r3, [r5, #12]
 8002aec:	071b      	lsls	r3, r3, #28
 8002aee:	d501      	bpl.n	8002af4 <_vfiprintf_r+0x3c>
 8002af0:	692b      	ldr	r3, [r5, #16]
 8002af2:	b9eb      	cbnz	r3, 8002b30 <_vfiprintf_r+0x78>
 8002af4:	4629      	mov	r1, r5
 8002af6:	4630      	mov	r0, r6
 8002af8:	f7ff fc7e 	bl	80023f8 <__swsetup_r>
 8002afc:	b1c0      	cbz	r0, 8002b30 <_vfiprintf_r+0x78>
 8002afe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002b00:	07dc      	lsls	r4, r3, #31
 8002b02:	d50e      	bpl.n	8002b22 <_vfiprintf_r+0x6a>
 8002b04:	f04f 30ff 	mov.w	r0, #4294967295
 8002b08:	b01d      	add	sp, #116	; 0x74
 8002b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b0e:	4b7b      	ldr	r3, [pc, #492]	; (8002cfc <_vfiprintf_r+0x244>)
 8002b10:	429d      	cmp	r5, r3
 8002b12:	d101      	bne.n	8002b18 <_vfiprintf_r+0x60>
 8002b14:	68b5      	ldr	r5, [r6, #8]
 8002b16:	e7df      	b.n	8002ad8 <_vfiprintf_r+0x20>
 8002b18:	4b79      	ldr	r3, [pc, #484]	; (8002d00 <_vfiprintf_r+0x248>)
 8002b1a:	429d      	cmp	r5, r3
 8002b1c:	bf08      	it	eq
 8002b1e:	68f5      	ldreq	r5, [r6, #12]
 8002b20:	e7da      	b.n	8002ad8 <_vfiprintf_r+0x20>
 8002b22:	89ab      	ldrh	r3, [r5, #12]
 8002b24:	0598      	lsls	r0, r3, #22
 8002b26:	d4ed      	bmi.n	8002b04 <_vfiprintf_r+0x4c>
 8002b28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002b2a:	f7ff fe8c 	bl	8002846 <__retarget_lock_release_recursive>
 8002b2e:	e7e9      	b.n	8002b04 <_vfiprintf_r+0x4c>
 8002b30:	2300      	movs	r3, #0
 8002b32:	9309      	str	r3, [sp, #36]	; 0x24
 8002b34:	2320      	movs	r3, #32
 8002b36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002b3a:	f8cd 800c 	str.w	r8, [sp, #12]
 8002b3e:	2330      	movs	r3, #48	; 0x30
 8002b40:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8002d04 <_vfiprintf_r+0x24c>
 8002b44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002b48:	f04f 0901 	mov.w	r9, #1
 8002b4c:	4623      	mov	r3, r4
 8002b4e:	469a      	mov	sl, r3
 8002b50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002b54:	b10a      	cbz	r2, 8002b5a <_vfiprintf_r+0xa2>
 8002b56:	2a25      	cmp	r2, #37	; 0x25
 8002b58:	d1f9      	bne.n	8002b4e <_vfiprintf_r+0x96>
 8002b5a:	ebba 0b04 	subs.w	fp, sl, r4
 8002b5e:	d00b      	beq.n	8002b78 <_vfiprintf_r+0xc0>
 8002b60:	465b      	mov	r3, fp
 8002b62:	4622      	mov	r2, r4
 8002b64:	4629      	mov	r1, r5
 8002b66:	4630      	mov	r0, r6
 8002b68:	f7ff ff93 	bl	8002a92 <__sfputs_r>
 8002b6c:	3001      	adds	r0, #1
 8002b6e:	f000 80aa 	beq.w	8002cc6 <_vfiprintf_r+0x20e>
 8002b72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002b74:	445a      	add	r2, fp
 8002b76:	9209      	str	r2, [sp, #36]	; 0x24
 8002b78:	f89a 3000 	ldrb.w	r3, [sl]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	f000 80a2 	beq.w	8002cc6 <_vfiprintf_r+0x20e>
 8002b82:	2300      	movs	r3, #0
 8002b84:	f04f 32ff 	mov.w	r2, #4294967295
 8002b88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002b8c:	f10a 0a01 	add.w	sl, sl, #1
 8002b90:	9304      	str	r3, [sp, #16]
 8002b92:	9307      	str	r3, [sp, #28]
 8002b94:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002b98:	931a      	str	r3, [sp, #104]	; 0x68
 8002b9a:	4654      	mov	r4, sl
 8002b9c:	2205      	movs	r2, #5
 8002b9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ba2:	4858      	ldr	r0, [pc, #352]	; (8002d04 <_vfiprintf_r+0x24c>)
 8002ba4:	f7fd fb34 	bl	8000210 <memchr>
 8002ba8:	9a04      	ldr	r2, [sp, #16]
 8002baa:	b9d8      	cbnz	r0, 8002be4 <_vfiprintf_r+0x12c>
 8002bac:	06d1      	lsls	r1, r2, #27
 8002bae:	bf44      	itt	mi
 8002bb0:	2320      	movmi	r3, #32
 8002bb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002bb6:	0713      	lsls	r3, r2, #28
 8002bb8:	bf44      	itt	mi
 8002bba:	232b      	movmi	r3, #43	; 0x2b
 8002bbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002bc0:	f89a 3000 	ldrb.w	r3, [sl]
 8002bc4:	2b2a      	cmp	r3, #42	; 0x2a
 8002bc6:	d015      	beq.n	8002bf4 <_vfiprintf_r+0x13c>
 8002bc8:	9a07      	ldr	r2, [sp, #28]
 8002bca:	4654      	mov	r4, sl
 8002bcc:	2000      	movs	r0, #0
 8002bce:	f04f 0c0a 	mov.w	ip, #10
 8002bd2:	4621      	mov	r1, r4
 8002bd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002bd8:	3b30      	subs	r3, #48	; 0x30
 8002bda:	2b09      	cmp	r3, #9
 8002bdc:	d94e      	bls.n	8002c7c <_vfiprintf_r+0x1c4>
 8002bde:	b1b0      	cbz	r0, 8002c0e <_vfiprintf_r+0x156>
 8002be0:	9207      	str	r2, [sp, #28]
 8002be2:	e014      	b.n	8002c0e <_vfiprintf_r+0x156>
 8002be4:	eba0 0308 	sub.w	r3, r0, r8
 8002be8:	fa09 f303 	lsl.w	r3, r9, r3
 8002bec:	4313      	orrs	r3, r2
 8002bee:	9304      	str	r3, [sp, #16]
 8002bf0:	46a2      	mov	sl, r4
 8002bf2:	e7d2      	b.n	8002b9a <_vfiprintf_r+0xe2>
 8002bf4:	9b03      	ldr	r3, [sp, #12]
 8002bf6:	1d19      	adds	r1, r3, #4
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	9103      	str	r1, [sp, #12]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	bfbb      	ittet	lt
 8002c00:	425b      	neglt	r3, r3
 8002c02:	f042 0202 	orrlt.w	r2, r2, #2
 8002c06:	9307      	strge	r3, [sp, #28]
 8002c08:	9307      	strlt	r3, [sp, #28]
 8002c0a:	bfb8      	it	lt
 8002c0c:	9204      	strlt	r2, [sp, #16]
 8002c0e:	7823      	ldrb	r3, [r4, #0]
 8002c10:	2b2e      	cmp	r3, #46	; 0x2e
 8002c12:	d10c      	bne.n	8002c2e <_vfiprintf_r+0x176>
 8002c14:	7863      	ldrb	r3, [r4, #1]
 8002c16:	2b2a      	cmp	r3, #42	; 0x2a
 8002c18:	d135      	bne.n	8002c86 <_vfiprintf_r+0x1ce>
 8002c1a:	9b03      	ldr	r3, [sp, #12]
 8002c1c:	1d1a      	adds	r2, r3, #4
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	9203      	str	r2, [sp, #12]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	bfb8      	it	lt
 8002c26:	f04f 33ff 	movlt.w	r3, #4294967295
 8002c2a:	3402      	adds	r4, #2
 8002c2c:	9305      	str	r3, [sp, #20]
 8002c2e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8002d14 <_vfiprintf_r+0x25c>
 8002c32:	7821      	ldrb	r1, [r4, #0]
 8002c34:	2203      	movs	r2, #3
 8002c36:	4650      	mov	r0, sl
 8002c38:	f7fd faea 	bl	8000210 <memchr>
 8002c3c:	b140      	cbz	r0, 8002c50 <_vfiprintf_r+0x198>
 8002c3e:	2340      	movs	r3, #64	; 0x40
 8002c40:	eba0 000a 	sub.w	r0, r0, sl
 8002c44:	fa03 f000 	lsl.w	r0, r3, r0
 8002c48:	9b04      	ldr	r3, [sp, #16]
 8002c4a:	4303      	orrs	r3, r0
 8002c4c:	3401      	adds	r4, #1
 8002c4e:	9304      	str	r3, [sp, #16]
 8002c50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c54:	482c      	ldr	r0, [pc, #176]	; (8002d08 <_vfiprintf_r+0x250>)
 8002c56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002c5a:	2206      	movs	r2, #6
 8002c5c:	f7fd fad8 	bl	8000210 <memchr>
 8002c60:	2800      	cmp	r0, #0
 8002c62:	d03f      	beq.n	8002ce4 <_vfiprintf_r+0x22c>
 8002c64:	4b29      	ldr	r3, [pc, #164]	; (8002d0c <_vfiprintf_r+0x254>)
 8002c66:	bb1b      	cbnz	r3, 8002cb0 <_vfiprintf_r+0x1f8>
 8002c68:	9b03      	ldr	r3, [sp, #12]
 8002c6a:	3307      	adds	r3, #7
 8002c6c:	f023 0307 	bic.w	r3, r3, #7
 8002c70:	3308      	adds	r3, #8
 8002c72:	9303      	str	r3, [sp, #12]
 8002c74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c76:	443b      	add	r3, r7
 8002c78:	9309      	str	r3, [sp, #36]	; 0x24
 8002c7a:	e767      	b.n	8002b4c <_vfiprintf_r+0x94>
 8002c7c:	fb0c 3202 	mla	r2, ip, r2, r3
 8002c80:	460c      	mov	r4, r1
 8002c82:	2001      	movs	r0, #1
 8002c84:	e7a5      	b.n	8002bd2 <_vfiprintf_r+0x11a>
 8002c86:	2300      	movs	r3, #0
 8002c88:	3401      	adds	r4, #1
 8002c8a:	9305      	str	r3, [sp, #20]
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	f04f 0c0a 	mov.w	ip, #10
 8002c92:	4620      	mov	r0, r4
 8002c94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002c98:	3a30      	subs	r2, #48	; 0x30
 8002c9a:	2a09      	cmp	r2, #9
 8002c9c:	d903      	bls.n	8002ca6 <_vfiprintf_r+0x1ee>
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d0c5      	beq.n	8002c2e <_vfiprintf_r+0x176>
 8002ca2:	9105      	str	r1, [sp, #20]
 8002ca4:	e7c3      	b.n	8002c2e <_vfiprintf_r+0x176>
 8002ca6:	fb0c 2101 	mla	r1, ip, r1, r2
 8002caa:	4604      	mov	r4, r0
 8002cac:	2301      	movs	r3, #1
 8002cae:	e7f0      	b.n	8002c92 <_vfiprintf_r+0x1da>
 8002cb0:	ab03      	add	r3, sp, #12
 8002cb2:	9300      	str	r3, [sp, #0]
 8002cb4:	462a      	mov	r2, r5
 8002cb6:	4b16      	ldr	r3, [pc, #88]	; (8002d10 <_vfiprintf_r+0x258>)
 8002cb8:	a904      	add	r1, sp, #16
 8002cba:	4630      	mov	r0, r6
 8002cbc:	f3af 8000 	nop.w
 8002cc0:	4607      	mov	r7, r0
 8002cc2:	1c78      	adds	r0, r7, #1
 8002cc4:	d1d6      	bne.n	8002c74 <_vfiprintf_r+0x1bc>
 8002cc6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002cc8:	07d9      	lsls	r1, r3, #31
 8002cca:	d405      	bmi.n	8002cd8 <_vfiprintf_r+0x220>
 8002ccc:	89ab      	ldrh	r3, [r5, #12]
 8002cce:	059a      	lsls	r2, r3, #22
 8002cd0:	d402      	bmi.n	8002cd8 <_vfiprintf_r+0x220>
 8002cd2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002cd4:	f7ff fdb7 	bl	8002846 <__retarget_lock_release_recursive>
 8002cd8:	89ab      	ldrh	r3, [r5, #12]
 8002cda:	065b      	lsls	r3, r3, #25
 8002cdc:	f53f af12 	bmi.w	8002b04 <_vfiprintf_r+0x4c>
 8002ce0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002ce2:	e711      	b.n	8002b08 <_vfiprintf_r+0x50>
 8002ce4:	ab03      	add	r3, sp, #12
 8002ce6:	9300      	str	r3, [sp, #0]
 8002ce8:	462a      	mov	r2, r5
 8002cea:	4b09      	ldr	r3, [pc, #36]	; (8002d10 <_vfiprintf_r+0x258>)
 8002cec:	a904      	add	r1, sp, #16
 8002cee:	4630      	mov	r0, r6
 8002cf0:	f000 f880 	bl	8002df4 <_printf_i>
 8002cf4:	e7e4      	b.n	8002cc0 <_vfiprintf_r+0x208>
 8002cf6:	bf00      	nop
 8002cf8:	08003404 	.word	0x08003404
 8002cfc:	08003424 	.word	0x08003424
 8002d00:	080033e4 	.word	0x080033e4
 8002d04:	08003444 	.word	0x08003444
 8002d08:	0800344e 	.word	0x0800344e
 8002d0c:	00000000 	.word	0x00000000
 8002d10:	08002a93 	.word	0x08002a93
 8002d14:	0800344a 	.word	0x0800344a

08002d18 <_printf_common>:
 8002d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d1c:	4616      	mov	r6, r2
 8002d1e:	4699      	mov	r9, r3
 8002d20:	688a      	ldr	r2, [r1, #8]
 8002d22:	690b      	ldr	r3, [r1, #16]
 8002d24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	bfb8      	it	lt
 8002d2c:	4613      	movlt	r3, r2
 8002d2e:	6033      	str	r3, [r6, #0]
 8002d30:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002d34:	4607      	mov	r7, r0
 8002d36:	460c      	mov	r4, r1
 8002d38:	b10a      	cbz	r2, 8002d3e <_printf_common+0x26>
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	6033      	str	r3, [r6, #0]
 8002d3e:	6823      	ldr	r3, [r4, #0]
 8002d40:	0699      	lsls	r1, r3, #26
 8002d42:	bf42      	ittt	mi
 8002d44:	6833      	ldrmi	r3, [r6, #0]
 8002d46:	3302      	addmi	r3, #2
 8002d48:	6033      	strmi	r3, [r6, #0]
 8002d4a:	6825      	ldr	r5, [r4, #0]
 8002d4c:	f015 0506 	ands.w	r5, r5, #6
 8002d50:	d106      	bne.n	8002d60 <_printf_common+0x48>
 8002d52:	f104 0a19 	add.w	sl, r4, #25
 8002d56:	68e3      	ldr	r3, [r4, #12]
 8002d58:	6832      	ldr	r2, [r6, #0]
 8002d5a:	1a9b      	subs	r3, r3, r2
 8002d5c:	42ab      	cmp	r3, r5
 8002d5e:	dc26      	bgt.n	8002dae <_printf_common+0x96>
 8002d60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002d64:	1e13      	subs	r3, r2, #0
 8002d66:	6822      	ldr	r2, [r4, #0]
 8002d68:	bf18      	it	ne
 8002d6a:	2301      	movne	r3, #1
 8002d6c:	0692      	lsls	r2, r2, #26
 8002d6e:	d42b      	bmi.n	8002dc8 <_printf_common+0xb0>
 8002d70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002d74:	4649      	mov	r1, r9
 8002d76:	4638      	mov	r0, r7
 8002d78:	47c0      	blx	r8
 8002d7a:	3001      	adds	r0, #1
 8002d7c:	d01e      	beq.n	8002dbc <_printf_common+0xa4>
 8002d7e:	6823      	ldr	r3, [r4, #0]
 8002d80:	68e5      	ldr	r5, [r4, #12]
 8002d82:	6832      	ldr	r2, [r6, #0]
 8002d84:	f003 0306 	and.w	r3, r3, #6
 8002d88:	2b04      	cmp	r3, #4
 8002d8a:	bf08      	it	eq
 8002d8c:	1aad      	subeq	r5, r5, r2
 8002d8e:	68a3      	ldr	r3, [r4, #8]
 8002d90:	6922      	ldr	r2, [r4, #16]
 8002d92:	bf0c      	ite	eq
 8002d94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002d98:	2500      	movne	r5, #0
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	bfc4      	itt	gt
 8002d9e:	1a9b      	subgt	r3, r3, r2
 8002da0:	18ed      	addgt	r5, r5, r3
 8002da2:	2600      	movs	r6, #0
 8002da4:	341a      	adds	r4, #26
 8002da6:	42b5      	cmp	r5, r6
 8002da8:	d11a      	bne.n	8002de0 <_printf_common+0xc8>
 8002daa:	2000      	movs	r0, #0
 8002dac:	e008      	b.n	8002dc0 <_printf_common+0xa8>
 8002dae:	2301      	movs	r3, #1
 8002db0:	4652      	mov	r2, sl
 8002db2:	4649      	mov	r1, r9
 8002db4:	4638      	mov	r0, r7
 8002db6:	47c0      	blx	r8
 8002db8:	3001      	adds	r0, #1
 8002dba:	d103      	bne.n	8002dc4 <_printf_common+0xac>
 8002dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8002dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002dc4:	3501      	adds	r5, #1
 8002dc6:	e7c6      	b.n	8002d56 <_printf_common+0x3e>
 8002dc8:	18e1      	adds	r1, r4, r3
 8002dca:	1c5a      	adds	r2, r3, #1
 8002dcc:	2030      	movs	r0, #48	; 0x30
 8002dce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002dd2:	4422      	add	r2, r4
 8002dd4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002dd8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002ddc:	3302      	adds	r3, #2
 8002dde:	e7c7      	b.n	8002d70 <_printf_common+0x58>
 8002de0:	2301      	movs	r3, #1
 8002de2:	4622      	mov	r2, r4
 8002de4:	4649      	mov	r1, r9
 8002de6:	4638      	mov	r0, r7
 8002de8:	47c0      	blx	r8
 8002dea:	3001      	adds	r0, #1
 8002dec:	d0e6      	beq.n	8002dbc <_printf_common+0xa4>
 8002dee:	3601      	adds	r6, #1
 8002df0:	e7d9      	b.n	8002da6 <_printf_common+0x8e>
	...

08002df4 <_printf_i>:
 8002df4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002df8:	460c      	mov	r4, r1
 8002dfa:	4691      	mov	r9, r2
 8002dfc:	7e27      	ldrb	r7, [r4, #24]
 8002dfe:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002e00:	2f78      	cmp	r7, #120	; 0x78
 8002e02:	4680      	mov	r8, r0
 8002e04:	469a      	mov	sl, r3
 8002e06:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002e0a:	d807      	bhi.n	8002e1c <_printf_i+0x28>
 8002e0c:	2f62      	cmp	r7, #98	; 0x62
 8002e0e:	d80a      	bhi.n	8002e26 <_printf_i+0x32>
 8002e10:	2f00      	cmp	r7, #0
 8002e12:	f000 80d8 	beq.w	8002fc6 <_printf_i+0x1d2>
 8002e16:	2f58      	cmp	r7, #88	; 0x58
 8002e18:	f000 80a3 	beq.w	8002f62 <_printf_i+0x16e>
 8002e1c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002e20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002e24:	e03a      	b.n	8002e9c <_printf_i+0xa8>
 8002e26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002e2a:	2b15      	cmp	r3, #21
 8002e2c:	d8f6      	bhi.n	8002e1c <_printf_i+0x28>
 8002e2e:	a001      	add	r0, pc, #4	; (adr r0, 8002e34 <_printf_i+0x40>)
 8002e30:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002e34:	08002e8d 	.word	0x08002e8d
 8002e38:	08002ea1 	.word	0x08002ea1
 8002e3c:	08002e1d 	.word	0x08002e1d
 8002e40:	08002e1d 	.word	0x08002e1d
 8002e44:	08002e1d 	.word	0x08002e1d
 8002e48:	08002e1d 	.word	0x08002e1d
 8002e4c:	08002ea1 	.word	0x08002ea1
 8002e50:	08002e1d 	.word	0x08002e1d
 8002e54:	08002e1d 	.word	0x08002e1d
 8002e58:	08002e1d 	.word	0x08002e1d
 8002e5c:	08002e1d 	.word	0x08002e1d
 8002e60:	08002fad 	.word	0x08002fad
 8002e64:	08002ed1 	.word	0x08002ed1
 8002e68:	08002f8f 	.word	0x08002f8f
 8002e6c:	08002e1d 	.word	0x08002e1d
 8002e70:	08002e1d 	.word	0x08002e1d
 8002e74:	08002fcf 	.word	0x08002fcf
 8002e78:	08002e1d 	.word	0x08002e1d
 8002e7c:	08002ed1 	.word	0x08002ed1
 8002e80:	08002e1d 	.word	0x08002e1d
 8002e84:	08002e1d 	.word	0x08002e1d
 8002e88:	08002f97 	.word	0x08002f97
 8002e8c:	680b      	ldr	r3, [r1, #0]
 8002e8e:	1d1a      	adds	r2, r3, #4
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	600a      	str	r2, [r1, #0]
 8002e94:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002e98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e0a3      	b.n	8002fe8 <_printf_i+0x1f4>
 8002ea0:	6825      	ldr	r5, [r4, #0]
 8002ea2:	6808      	ldr	r0, [r1, #0]
 8002ea4:	062e      	lsls	r6, r5, #24
 8002ea6:	f100 0304 	add.w	r3, r0, #4
 8002eaa:	d50a      	bpl.n	8002ec2 <_printf_i+0xce>
 8002eac:	6805      	ldr	r5, [r0, #0]
 8002eae:	600b      	str	r3, [r1, #0]
 8002eb0:	2d00      	cmp	r5, #0
 8002eb2:	da03      	bge.n	8002ebc <_printf_i+0xc8>
 8002eb4:	232d      	movs	r3, #45	; 0x2d
 8002eb6:	426d      	negs	r5, r5
 8002eb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002ebc:	485e      	ldr	r0, [pc, #376]	; (8003038 <_printf_i+0x244>)
 8002ebe:	230a      	movs	r3, #10
 8002ec0:	e019      	b.n	8002ef6 <_printf_i+0x102>
 8002ec2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002ec6:	6805      	ldr	r5, [r0, #0]
 8002ec8:	600b      	str	r3, [r1, #0]
 8002eca:	bf18      	it	ne
 8002ecc:	b22d      	sxthne	r5, r5
 8002ece:	e7ef      	b.n	8002eb0 <_printf_i+0xbc>
 8002ed0:	680b      	ldr	r3, [r1, #0]
 8002ed2:	6825      	ldr	r5, [r4, #0]
 8002ed4:	1d18      	adds	r0, r3, #4
 8002ed6:	6008      	str	r0, [r1, #0]
 8002ed8:	0628      	lsls	r0, r5, #24
 8002eda:	d501      	bpl.n	8002ee0 <_printf_i+0xec>
 8002edc:	681d      	ldr	r5, [r3, #0]
 8002ede:	e002      	b.n	8002ee6 <_printf_i+0xf2>
 8002ee0:	0669      	lsls	r1, r5, #25
 8002ee2:	d5fb      	bpl.n	8002edc <_printf_i+0xe8>
 8002ee4:	881d      	ldrh	r5, [r3, #0]
 8002ee6:	4854      	ldr	r0, [pc, #336]	; (8003038 <_printf_i+0x244>)
 8002ee8:	2f6f      	cmp	r7, #111	; 0x6f
 8002eea:	bf0c      	ite	eq
 8002eec:	2308      	moveq	r3, #8
 8002eee:	230a      	movne	r3, #10
 8002ef0:	2100      	movs	r1, #0
 8002ef2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002ef6:	6866      	ldr	r6, [r4, #4]
 8002ef8:	60a6      	str	r6, [r4, #8]
 8002efa:	2e00      	cmp	r6, #0
 8002efc:	bfa2      	ittt	ge
 8002efe:	6821      	ldrge	r1, [r4, #0]
 8002f00:	f021 0104 	bicge.w	r1, r1, #4
 8002f04:	6021      	strge	r1, [r4, #0]
 8002f06:	b90d      	cbnz	r5, 8002f0c <_printf_i+0x118>
 8002f08:	2e00      	cmp	r6, #0
 8002f0a:	d04d      	beq.n	8002fa8 <_printf_i+0x1b4>
 8002f0c:	4616      	mov	r6, r2
 8002f0e:	fbb5 f1f3 	udiv	r1, r5, r3
 8002f12:	fb03 5711 	mls	r7, r3, r1, r5
 8002f16:	5dc7      	ldrb	r7, [r0, r7]
 8002f18:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002f1c:	462f      	mov	r7, r5
 8002f1e:	42bb      	cmp	r3, r7
 8002f20:	460d      	mov	r5, r1
 8002f22:	d9f4      	bls.n	8002f0e <_printf_i+0x11a>
 8002f24:	2b08      	cmp	r3, #8
 8002f26:	d10b      	bne.n	8002f40 <_printf_i+0x14c>
 8002f28:	6823      	ldr	r3, [r4, #0]
 8002f2a:	07df      	lsls	r7, r3, #31
 8002f2c:	d508      	bpl.n	8002f40 <_printf_i+0x14c>
 8002f2e:	6923      	ldr	r3, [r4, #16]
 8002f30:	6861      	ldr	r1, [r4, #4]
 8002f32:	4299      	cmp	r1, r3
 8002f34:	bfde      	ittt	le
 8002f36:	2330      	movle	r3, #48	; 0x30
 8002f38:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002f3c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002f40:	1b92      	subs	r2, r2, r6
 8002f42:	6122      	str	r2, [r4, #16]
 8002f44:	f8cd a000 	str.w	sl, [sp]
 8002f48:	464b      	mov	r3, r9
 8002f4a:	aa03      	add	r2, sp, #12
 8002f4c:	4621      	mov	r1, r4
 8002f4e:	4640      	mov	r0, r8
 8002f50:	f7ff fee2 	bl	8002d18 <_printf_common>
 8002f54:	3001      	adds	r0, #1
 8002f56:	d14c      	bne.n	8002ff2 <_printf_i+0x1fe>
 8002f58:	f04f 30ff 	mov.w	r0, #4294967295
 8002f5c:	b004      	add	sp, #16
 8002f5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f62:	4835      	ldr	r0, [pc, #212]	; (8003038 <_printf_i+0x244>)
 8002f64:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002f68:	6823      	ldr	r3, [r4, #0]
 8002f6a:	680e      	ldr	r6, [r1, #0]
 8002f6c:	061f      	lsls	r7, r3, #24
 8002f6e:	f856 5b04 	ldr.w	r5, [r6], #4
 8002f72:	600e      	str	r6, [r1, #0]
 8002f74:	d514      	bpl.n	8002fa0 <_printf_i+0x1ac>
 8002f76:	07d9      	lsls	r1, r3, #31
 8002f78:	bf44      	itt	mi
 8002f7a:	f043 0320 	orrmi.w	r3, r3, #32
 8002f7e:	6023      	strmi	r3, [r4, #0]
 8002f80:	b91d      	cbnz	r5, 8002f8a <_printf_i+0x196>
 8002f82:	6823      	ldr	r3, [r4, #0]
 8002f84:	f023 0320 	bic.w	r3, r3, #32
 8002f88:	6023      	str	r3, [r4, #0]
 8002f8a:	2310      	movs	r3, #16
 8002f8c:	e7b0      	b.n	8002ef0 <_printf_i+0xfc>
 8002f8e:	6823      	ldr	r3, [r4, #0]
 8002f90:	f043 0320 	orr.w	r3, r3, #32
 8002f94:	6023      	str	r3, [r4, #0]
 8002f96:	2378      	movs	r3, #120	; 0x78
 8002f98:	4828      	ldr	r0, [pc, #160]	; (800303c <_printf_i+0x248>)
 8002f9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002f9e:	e7e3      	b.n	8002f68 <_printf_i+0x174>
 8002fa0:	065e      	lsls	r6, r3, #25
 8002fa2:	bf48      	it	mi
 8002fa4:	b2ad      	uxthmi	r5, r5
 8002fa6:	e7e6      	b.n	8002f76 <_printf_i+0x182>
 8002fa8:	4616      	mov	r6, r2
 8002faa:	e7bb      	b.n	8002f24 <_printf_i+0x130>
 8002fac:	680b      	ldr	r3, [r1, #0]
 8002fae:	6826      	ldr	r6, [r4, #0]
 8002fb0:	6960      	ldr	r0, [r4, #20]
 8002fb2:	1d1d      	adds	r5, r3, #4
 8002fb4:	600d      	str	r5, [r1, #0]
 8002fb6:	0635      	lsls	r5, r6, #24
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	d501      	bpl.n	8002fc0 <_printf_i+0x1cc>
 8002fbc:	6018      	str	r0, [r3, #0]
 8002fbe:	e002      	b.n	8002fc6 <_printf_i+0x1d2>
 8002fc0:	0671      	lsls	r1, r6, #25
 8002fc2:	d5fb      	bpl.n	8002fbc <_printf_i+0x1c8>
 8002fc4:	8018      	strh	r0, [r3, #0]
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	6123      	str	r3, [r4, #16]
 8002fca:	4616      	mov	r6, r2
 8002fcc:	e7ba      	b.n	8002f44 <_printf_i+0x150>
 8002fce:	680b      	ldr	r3, [r1, #0]
 8002fd0:	1d1a      	adds	r2, r3, #4
 8002fd2:	600a      	str	r2, [r1, #0]
 8002fd4:	681e      	ldr	r6, [r3, #0]
 8002fd6:	6862      	ldr	r2, [r4, #4]
 8002fd8:	2100      	movs	r1, #0
 8002fda:	4630      	mov	r0, r6
 8002fdc:	f7fd f918 	bl	8000210 <memchr>
 8002fe0:	b108      	cbz	r0, 8002fe6 <_printf_i+0x1f2>
 8002fe2:	1b80      	subs	r0, r0, r6
 8002fe4:	6060      	str	r0, [r4, #4]
 8002fe6:	6863      	ldr	r3, [r4, #4]
 8002fe8:	6123      	str	r3, [r4, #16]
 8002fea:	2300      	movs	r3, #0
 8002fec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002ff0:	e7a8      	b.n	8002f44 <_printf_i+0x150>
 8002ff2:	6923      	ldr	r3, [r4, #16]
 8002ff4:	4632      	mov	r2, r6
 8002ff6:	4649      	mov	r1, r9
 8002ff8:	4640      	mov	r0, r8
 8002ffa:	47d0      	blx	sl
 8002ffc:	3001      	adds	r0, #1
 8002ffe:	d0ab      	beq.n	8002f58 <_printf_i+0x164>
 8003000:	6823      	ldr	r3, [r4, #0]
 8003002:	079b      	lsls	r3, r3, #30
 8003004:	d413      	bmi.n	800302e <_printf_i+0x23a>
 8003006:	68e0      	ldr	r0, [r4, #12]
 8003008:	9b03      	ldr	r3, [sp, #12]
 800300a:	4298      	cmp	r0, r3
 800300c:	bfb8      	it	lt
 800300e:	4618      	movlt	r0, r3
 8003010:	e7a4      	b.n	8002f5c <_printf_i+0x168>
 8003012:	2301      	movs	r3, #1
 8003014:	4632      	mov	r2, r6
 8003016:	4649      	mov	r1, r9
 8003018:	4640      	mov	r0, r8
 800301a:	47d0      	blx	sl
 800301c:	3001      	adds	r0, #1
 800301e:	d09b      	beq.n	8002f58 <_printf_i+0x164>
 8003020:	3501      	adds	r5, #1
 8003022:	68e3      	ldr	r3, [r4, #12]
 8003024:	9903      	ldr	r1, [sp, #12]
 8003026:	1a5b      	subs	r3, r3, r1
 8003028:	42ab      	cmp	r3, r5
 800302a:	dcf2      	bgt.n	8003012 <_printf_i+0x21e>
 800302c:	e7eb      	b.n	8003006 <_printf_i+0x212>
 800302e:	2500      	movs	r5, #0
 8003030:	f104 0619 	add.w	r6, r4, #25
 8003034:	e7f5      	b.n	8003022 <_printf_i+0x22e>
 8003036:	bf00      	nop
 8003038:	08003455 	.word	0x08003455
 800303c:	08003466 	.word	0x08003466

08003040 <_sbrk_r>:
 8003040:	b538      	push	{r3, r4, r5, lr}
 8003042:	4d06      	ldr	r5, [pc, #24]	; (800305c <_sbrk_r+0x1c>)
 8003044:	2300      	movs	r3, #0
 8003046:	4604      	mov	r4, r0
 8003048:	4608      	mov	r0, r1
 800304a:	602b      	str	r3, [r5, #0]
 800304c:	f7fd fe80 	bl	8000d50 <_sbrk>
 8003050:	1c43      	adds	r3, r0, #1
 8003052:	d102      	bne.n	800305a <_sbrk_r+0x1a>
 8003054:	682b      	ldr	r3, [r5, #0]
 8003056:	b103      	cbz	r3, 800305a <_sbrk_r+0x1a>
 8003058:	6023      	str	r3, [r4, #0]
 800305a:	bd38      	pop	{r3, r4, r5, pc}
 800305c:	20000568 	.word	0x20000568

08003060 <__sread>:
 8003060:	b510      	push	{r4, lr}
 8003062:	460c      	mov	r4, r1
 8003064:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003068:	f000 f8a0 	bl	80031ac <_read_r>
 800306c:	2800      	cmp	r0, #0
 800306e:	bfab      	itete	ge
 8003070:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003072:	89a3      	ldrhlt	r3, [r4, #12]
 8003074:	181b      	addge	r3, r3, r0
 8003076:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800307a:	bfac      	ite	ge
 800307c:	6563      	strge	r3, [r4, #84]	; 0x54
 800307e:	81a3      	strhlt	r3, [r4, #12]
 8003080:	bd10      	pop	{r4, pc}

08003082 <__swrite>:
 8003082:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003086:	461f      	mov	r7, r3
 8003088:	898b      	ldrh	r3, [r1, #12]
 800308a:	05db      	lsls	r3, r3, #23
 800308c:	4605      	mov	r5, r0
 800308e:	460c      	mov	r4, r1
 8003090:	4616      	mov	r6, r2
 8003092:	d505      	bpl.n	80030a0 <__swrite+0x1e>
 8003094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003098:	2302      	movs	r3, #2
 800309a:	2200      	movs	r2, #0
 800309c:	f000 f868 	bl	8003170 <_lseek_r>
 80030a0:	89a3      	ldrh	r3, [r4, #12]
 80030a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80030a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80030aa:	81a3      	strh	r3, [r4, #12]
 80030ac:	4632      	mov	r2, r6
 80030ae:	463b      	mov	r3, r7
 80030b0:	4628      	mov	r0, r5
 80030b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80030b6:	f000 b817 	b.w	80030e8 <_write_r>

080030ba <__sseek>:
 80030ba:	b510      	push	{r4, lr}
 80030bc:	460c      	mov	r4, r1
 80030be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030c2:	f000 f855 	bl	8003170 <_lseek_r>
 80030c6:	1c43      	adds	r3, r0, #1
 80030c8:	89a3      	ldrh	r3, [r4, #12]
 80030ca:	bf15      	itete	ne
 80030cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80030ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80030d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80030d6:	81a3      	strheq	r3, [r4, #12]
 80030d8:	bf18      	it	ne
 80030da:	81a3      	strhne	r3, [r4, #12]
 80030dc:	bd10      	pop	{r4, pc}

080030de <__sclose>:
 80030de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030e2:	f000 b813 	b.w	800310c <_close_r>
	...

080030e8 <_write_r>:
 80030e8:	b538      	push	{r3, r4, r5, lr}
 80030ea:	4d07      	ldr	r5, [pc, #28]	; (8003108 <_write_r+0x20>)
 80030ec:	4604      	mov	r4, r0
 80030ee:	4608      	mov	r0, r1
 80030f0:	4611      	mov	r1, r2
 80030f2:	2200      	movs	r2, #0
 80030f4:	602a      	str	r2, [r5, #0]
 80030f6:	461a      	mov	r2, r3
 80030f8:	f7fd fe11 	bl	8000d1e <_write>
 80030fc:	1c43      	adds	r3, r0, #1
 80030fe:	d102      	bne.n	8003106 <_write_r+0x1e>
 8003100:	682b      	ldr	r3, [r5, #0]
 8003102:	b103      	cbz	r3, 8003106 <_write_r+0x1e>
 8003104:	6023      	str	r3, [r4, #0]
 8003106:	bd38      	pop	{r3, r4, r5, pc}
 8003108:	20000568 	.word	0x20000568

0800310c <_close_r>:
 800310c:	b538      	push	{r3, r4, r5, lr}
 800310e:	4d06      	ldr	r5, [pc, #24]	; (8003128 <_close_r+0x1c>)
 8003110:	2300      	movs	r3, #0
 8003112:	4604      	mov	r4, r0
 8003114:	4608      	mov	r0, r1
 8003116:	602b      	str	r3, [r5, #0]
 8003118:	f7fd fe0e 	bl	8000d38 <_close>
 800311c:	1c43      	adds	r3, r0, #1
 800311e:	d102      	bne.n	8003126 <_close_r+0x1a>
 8003120:	682b      	ldr	r3, [r5, #0]
 8003122:	b103      	cbz	r3, 8003126 <_close_r+0x1a>
 8003124:	6023      	str	r3, [r4, #0]
 8003126:	bd38      	pop	{r3, r4, r5, pc}
 8003128:	20000568 	.word	0x20000568

0800312c <_fstat_r>:
 800312c:	b538      	push	{r3, r4, r5, lr}
 800312e:	4d07      	ldr	r5, [pc, #28]	; (800314c <_fstat_r+0x20>)
 8003130:	2300      	movs	r3, #0
 8003132:	4604      	mov	r4, r0
 8003134:	4608      	mov	r0, r1
 8003136:	4611      	mov	r1, r2
 8003138:	602b      	str	r3, [r5, #0]
 800313a:	f7fd fe00 	bl	8000d3e <_fstat>
 800313e:	1c43      	adds	r3, r0, #1
 8003140:	d102      	bne.n	8003148 <_fstat_r+0x1c>
 8003142:	682b      	ldr	r3, [r5, #0]
 8003144:	b103      	cbz	r3, 8003148 <_fstat_r+0x1c>
 8003146:	6023      	str	r3, [r4, #0]
 8003148:	bd38      	pop	{r3, r4, r5, pc}
 800314a:	bf00      	nop
 800314c:	20000568 	.word	0x20000568

08003150 <_isatty_r>:
 8003150:	b538      	push	{r3, r4, r5, lr}
 8003152:	4d06      	ldr	r5, [pc, #24]	; (800316c <_isatty_r+0x1c>)
 8003154:	2300      	movs	r3, #0
 8003156:	4604      	mov	r4, r0
 8003158:	4608      	mov	r0, r1
 800315a:	602b      	str	r3, [r5, #0]
 800315c:	f7fd fdf4 	bl	8000d48 <_isatty>
 8003160:	1c43      	adds	r3, r0, #1
 8003162:	d102      	bne.n	800316a <_isatty_r+0x1a>
 8003164:	682b      	ldr	r3, [r5, #0]
 8003166:	b103      	cbz	r3, 800316a <_isatty_r+0x1a>
 8003168:	6023      	str	r3, [r4, #0]
 800316a:	bd38      	pop	{r3, r4, r5, pc}
 800316c:	20000568 	.word	0x20000568

08003170 <_lseek_r>:
 8003170:	b538      	push	{r3, r4, r5, lr}
 8003172:	4d07      	ldr	r5, [pc, #28]	; (8003190 <_lseek_r+0x20>)
 8003174:	4604      	mov	r4, r0
 8003176:	4608      	mov	r0, r1
 8003178:	4611      	mov	r1, r2
 800317a:	2200      	movs	r2, #0
 800317c:	602a      	str	r2, [r5, #0]
 800317e:	461a      	mov	r2, r3
 8003180:	f7fd fde4 	bl	8000d4c <_lseek>
 8003184:	1c43      	adds	r3, r0, #1
 8003186:	d102      	bne.n	800318e <_lseek_r+0x1e>
 8003188:	682b      	ldr	r3, [r5, #0]
 800318a:	b103      	cbz	r3, 800318e <_lseek_r+0x1e>
 800318c:	6023      	str	r3, [r4, #0]
 800318e:	bd38      	pop	{r3, r4, r5, pc}
 8003190:	20000568 	.word	0x20000568

08003194 <__malloc_lock>:
 8003194:	4801      	ldr	r0, [pc, #4]	; (800319c <__malloc_lock+0x8>)
 8003196:	f7ff bb55 	b.w	8002844 <__retarget_lock_acquire_recursive>
 800319a:	bf00      	nop
 800319c:	20000560 	.word	0x20000560

080031a0 <__malloc_unlock>:
 80031a0:	4801      	ldr	r0, [pc, #4]	; (80031a8 <__malloc_unlock+0x8>)
 80031a2:	f7ff bb50 	b.w	8002846 <__retarget_lock_release_recursive>
 80031a6:	bf00      	nop
 80031a8:	20000560 	.word	0x20000560

080031ac <_read_r>:
 80031ac:	b538      	push	{r3, r4, r5, lr}
 80031ae:	4d07      	ldr	r5, [pc, #28]	; (80031cc <_read_r+0x20>)
 80031b0:	4604      	mov	r4, r0
 80031b2:	4608      	mov	r0, r1
 80031b4:	4611      	mov	r1, r2
 80031b6:	2200      	movs	r2, #0
 80031b8:	602a      	str	r2, [r5, #0]
 80031ba:	461a      	mov	r2, r3
 80031bc:	f7fd fda2 	bl	8000d04 <_read>
 80031c0:	1c43      	adds	r3, r0, #1
 80031c2:	d102      	bne.n	80031ca <_read_r+0x1e>
 80031c4:	682b      	ldr	r3, [r5, #0]
 80031c6:	b103      	cbz	r3, 80031ca <_read_r+0x1e>
 80031c8:	6023      	str	r3, [r4, #0]
 80031ca:	bd38      	pop	{r3, r4, r5, pc}
 80031cc:	20000568 	.word	0x20000568

080031d0 <_init>:
 80031d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031d2:	bf00      	nop
 80031d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031d6:	bc08      	pop	{r3}
 80031d8:	469e      	mov	lr, r3
 80031da:	4770      	bx	lr

080031dc <_fini>:
 80031dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031de:	bf00      	nop
 80031e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031e2:	bc08      	pop	{r3}
 80031e4:	469e      	mov	lr, r3
 80031e6:	4770      	bx	lr
